
/Users/admin/CTD_2023/capstone/target/5.3.0/argon/capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000095d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd5f0  000bd5f0  0000d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001f0  2003e300  000bd614  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000300  2003e4f0  2003e4f0  0001e4f0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bd804  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd808  000bd808  0001d808  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd80e  000bd80e  0001d80e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd832  000bd832  0001d832  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00188796  00000000  00000000  0001d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001b267  00000000  00000000  001a5fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004f6c9  00000000  00000000  001c1233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003948  00000000  00000000  002108fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c898  00000000  00000000  00214244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048e5c  00000000  00000000  00220adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00060c1a  00000000  00000000  00269938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00147374  00000000  00000000  002ca552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b2f4  00000000  00000000  004118c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_d2ulz>:
   b4a28:	b5d0      	push	{r4, r6, r7, lr}
   b4a2a:	4b0c      	ldr	r3, [pc, #48]	; (b4a5c <__aeabi_d2ulz+0x34>)
   b4a2c:	2200      	movs	r2, #0
   b4a2e:	4606      	mov	r6, r0
   b4a30:	460f      	mov	r7, r1
   b4a32:	f7ff fcb1 	bl	b4398 <__aeabi_dmul>
   b4a36:	f7ff ff87 	bl	b4948 <__aeabi_d2uiz>
   b4a3a:	4604      	mov	r4, r0
   b4a3c:	f7ff fc32 	bl	b42a4 <__aeabi_ui2d>
   b4a40:	4b07      	ldr	r3, [pc, #28]	; (b4a60 <__aeabi_d2ulz+0x38>)
   b4a42:	2200      	movs	r2, #0
   b4a44:	f7ff fca8 	bl	b4398 <__aeabi_dmul>
   b4a48:	4602      	mov	r2, r0
   b4a4a:	460b      	mov	r3, r1
   b4a4c:	4630      	mov	r0, r6
   b4a4e:	4639      	mov	r1, r7
   b4a50:	f7ff faea 	bl	b4028 <__aeabi_dsub>
   b4a54:	f7ff ff78 	bl	b4948 <__aeabi_d2uiz>
   b4a58:	4621      	mov	r1, r4
   b4a5a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a5c:	3df00000 	.word	0x3df00000
   b4a60:	41f00000 	.word	0x41f00000

000b4a64 <strcmp>:
   b4a64:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a68:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a6c:	2a01      	cmp	r2, #1
   b4a6e:	bf28      	it	cs
   b4a70:	429a      	cmpcs	r2, r3
   b4a72:	d0f7      	beq.n	b4a64 <strcmp>
   b4a74:	1ad0      	subs	r0, r2, r3
   b4a76:	4770      	bx	lr

000b4a78 <strlen>:
   b4a78:	4603      	mov	r3, r0
   b4a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a7e:	2a00      	cmp	r2, #0
   b4a80:	d1fb      	bne.n	b4a7a <strlen+0x2>
   b4a82:	1a18      	subs	r0, r3, r0
   b4a84:	3801      	subs	r0, #1
   b4a86:	4770      	bx	lr

000b4a88 <__aeabi_d2lz>:
   b4a88:	b538      	push	{r3, r4, r5, lr}
   b4a8a:	2200      	movs	r2, #0
   b4a8c:	2300      	movs	r3, #0
   b4a8e:	4604      	mov	r4, r0
   b4a90:	460d      	mov	r5, r1
   b4a92:	f7ff fef3 	bl	b487c <__aeabi_dcmplt>
   b4a96:	b928      	cbnz	r0, b4aa4 <__aeabi_d2lz+0x1c>
   b4a98:	4620      	mov	r0, r4
   b4a9a:	4629      	mov	r1, r5
   b4a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4aa0:	f7ff bfc2 	b.w	b4a28 <__aeabi_d2ulz>
   b4aa4:	4620      	mov	r0, r4
   b4aa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4aaa:	f7ff ffbd 	bl	b4a28 <__aeabi_d2ulz>
   b4aae:	4240      	negs	r0, r0
   b4ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ab4:	bd38      	pop	{r3, r4, r5, pc}
   b4ab6:	bf00      	nop

000b4ab8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ab8:	4809      	ldr	r0, [pc, #36]	; (b4ae0 <module_user_pre_init+0x28>)
   b4aba:	490a      	ldr	r1, [pc, #40]	; (b4ae4 <module_user_pre_init+0x2c>)
   b4abc:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4abe:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ac0:	d005      	beq.n	b4ace <module_user_pre_init+0x16>
   b4ac2:	4a09      	ldr	r2, [pc, #36]	; (b4ae8 <module_user_pre_init+0x30>)
   b4ac4:	4282      	cmp	r2, r0
   b4ac6:	d002      	beq.n	b4ace <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4ac8:	1a12      	subs	r2, r2, r0
   b4aca:	f005 f968 	bl	b9d9e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4ace:	4807      	ldr	r0, [pc, #28]	; (b4aec <module_user_pre_init+0x34>)
   b4ad0:	4a07      	ldr	r2, [pc, #28]	; (b4af0 <module_user_pre_init+0x38>)
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	1a12      	subs	r2, r2, r0
   b4ad6:	f005 f970 	bl	b9dba <memset>
    return &link_global_data_start;
}
   b4ada:	4801      	ldr	r0, [pc, #4]	; (b4ae0 <module_user_pre_init+0x28>)
   b4adc:	bd08      	pop	{r3, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e300 	.word	0x2003e300
   b4ae4:	000bd614 	.word	0x000bd614
   b4ae8:	2003e4f0 	.word	0x2003e4f0
   b4aec:	2003e4f0 	.word	0x2003e4f0
   b4af0:	2003e7f0 	.word	0x2003e7f0

000b4af4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4af4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4af6:	4e07      	ldr	r6, [pc, #28]	; (b4b14 <module_user_init+0x20>)
   b4af8:	4c07      	ldr	r4, [pc, #28]	; (b4b18 <module_user_init+0x24>)
    module_user_init_hook();
   b4afa:	f004 fec1 	bl	b9880 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4afe:	1ba4      	subs	r4, r4, r6
   b4b00:	08a4      	lsrs	r4, r4, #2
   b4b02:	2500      	movs	r5, #0
   b4b04:	42ac      	cmp	r4, r5
   b4b06:	d100      	bne.n	b4b0a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b08:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b0a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b0e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b10:	3501      	adds	r5, #1
   b4b12:	e7f7      	b.n	b4b04 <module_user_init+0x10>
   b4b14:	000bd5cc 	.word	0x000bd5cc
   b4b18:	000bd5f0 	.word	0x000bd5f0

000b4b1c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b1c:	f001 b87e 	b.w	b5c1c <setup>

000b4b20 <module_user_loop>:
}

void module_user_loop() {
   b4b20:	b508      	push	{r3, lr}
    loop();
   b4b22:	f000 feef 	bl	b5904 <loop>
    _post_loop();
}
   b4b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b2a:	f004 be61 	b.w	b97f0 <_post_loop>

000b4b2e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b2e:	f003 bce3 	b.w	b84f8 <malloc>

000b4b32 <_Znaj>:
   b4b32:	f003 bce1 	b.w	b84f8 <malloc>

000b4b36 <_ZdaPv>:
   b4b36:	f003 bce7 	b.w	b8508 <free>

000b4b3a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b3a:	f003 bce5 	b.w	b8508 <free>
	...

000b4b40 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4b40:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4b42:	4a03      	ldr	r2, [pc, #12]	; (b4b50 <__cxa_pure_virtual+0x10>)
   b4b44:	4903      	ldr	r1, [pc, #12]	; (b4b54 <__cxa_pure_virtual+0x14>)
   b4b46:	200c      	movs	r0, #12
   b4b48:	f003 fc22 	bl	b8390 <panic_>
  while (1);
   b4b4c:	e7fe      	b.n	b4b4c <__cxa_pure_virtual+0xc>
   b4b4e:	bf00      	nop
   b4b50:	000b8001 	.word	0x000b8001
   b4b54:	000bbdb0 	.word	0x000bbdb0

000b4b58 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b58:	7800      	ldrb	r0, [r0, #0]
   b4b5a:	fab0 f080 	clz	r0, r0
   b4b5e:	0940      	lsrs	r0, r0, #5
   b4b60:	4770      	bx	lr

000b4b62 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b62:	2301      	movs	r3, #1
   b4b64:	7003      	strb	r3, [r0, #0]
   b4b66:	4770      	bx	lr

000b4b68 <_Z9callback2v>:
  }
}

void callback2()
{
  updateData = true;
   b4b68:	4b01      	ldr	r3, [pc, #4]	; (b4b70 <_Z9callback2v+0x8>)
   b4b6a:	2201      	movs	r2, #1
   b4b6c:	701a      	strb	r2, [r3, #0]
}
   b4b6e:	4770      	bx	lr
   b4b70:	2003e311 	.word	0x2003e311

000b4b74 <_Z8callbackPcPhj>:
    iHumidity = AHTSensor.getHumidity();
  }
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4b74:	b5f0      	push	{r4, r5, r6, r7, lr}
  char p[length + 1];
   b4b76:	f102 0308 	add.w	r3, r2, #8
{
   b4b7a:	b085      	sub	sp, #20
  char p[length + 1];
   b4b7c:	f023 0307 	bic.w	r3, r3, #7
{
   b4b80:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4b82:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4b86:	4615      	mov	r5, r2
   b4b88:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   b4b8a:	4668      	mov	r0, sp
   b4b8c:	f005 f907 	bl	b9d9e <memcpy>
  p[length] = NULL;
   b4b90:	2300      	movs	r3, #0

  if (String(topic).equals("WeatherBox/PostData/Temperature"))
   b4b92:	4621      	mov	r1, r4
   b4b94:	4638      	mov	r0, r7
  p[length] = NULL;
   b4b96:	f80d 3005 	strb.w	r3, [sp, r5]
  if (String(topic).equals("WeatherBox/PostData/Temperature"))
   b4b9a:	f004 f9b2 	bl	b8f02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b9e:	492e      	ldr	r1, [pc, #184]	; (b4c58 <_Z8callbackPcPhj+0xe4>)
   b4ba0:	4638      	mov	r0, r7
   b4ba2:	f004 f9d4 	bl	b8f4e <_ZNK6String6equalsEPKc>
   b4ba6:	4605      	mov	r5, r0
   b4ba8:	4638      	mov	r0, r7
  char p[length + 1];
   b4baa:	466e      	mov	r6, sp
  if (String(topic).equals("WeatherBox/PostData/Temperature"))
   b4bac:	f004 f95e 	bl	b8e6c <_ZN6StringD1Ev>
   b4bb0:	b145      	cbz	r5, b4bc4 <_Z8callbackPcPhj+0x50>
  {
    int rf = atof(p);
   b4bb2:	4668      	mov	r0, sp
   b4bb4:	f005 f8e8 	bl	b9d88 <atof>
   b4bb8:	ec51 0b10 	vmov	r0, r1, d0
   b4bbc:	f7ff fe9c 	bl	b48f8 <__aeabi_d2iz>
   b4bc0:	4b26      	ldr	r3, [pc, #152]	; (b4c5c <_Z8callbackPcPhj+0xe8>)
   b4bc2:	6018      	str	r0, [r3, #0]

    oTemp = rf;
  }
  if (String(topic).equals("WeatherBox/PostData/WindSpeed"))
   b4bc4:	4621      	mov	r1, r4
   b4bc6:	4638      	mov	r0, r7
   b4bc8:	f004 f99b 	bl	b8f02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4bcc:	4924      	ldr	r1, [pc, #144]	; (b4c60 <_Z8callbackPcPhj+0xec>)
   b4bce:	4638      	mov	r0, r7
   b4bd0:	f004 f9bd 	bl	b8f4e <_ZNK6String6equalsEPKc>
   b4bd4:	4605      	mov	r5, r0
   b4bd6:	4638      	mov	r0, r7
   b4bd8:	f004 f948 	bl	b8e6c <_ZN6StringD1Ev>
   b4bdc:	b145      	cbz	r5, b4bf0 <_Z8callbackPcPhj+0x7c>
  {
    float rf = atof(p);
   b4bde:	4630      	mov	r0, r6
   b4be0:	f005 f8d2 	bl	b9d88 <atof>
   b4be4:	ec51 0b10 	vmov	r0, r1, d0
   b4be8:	f7ff fece 	bl	b4988 <__aeabi_d2f>
   b4bec:	4b1d      	ldr	r3, [pc, #116]	; (b4c64 <_Z8callbackPcPhj+0xf0>)
   b4bee:	6018      	str	r0, [r3, #0]

    oWindSpeed = rf;
  }
  if (String(topic).equals("WeatherBox/PostData/Precipitation"))
   b4bf0:	4621      	mov	r1, r4
   b4bf2:	4638      	mov	r0, r7
   b4bf4:	f004 f985 	bl	b8f02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4bf8:	491b      	ldr	r1, [pc, #108]	; (b4c68 <_Z8callbackPcPhj+0xf4>)
   b4bfa:	4638      	mov	r0, r7
   b4bfc:	f004 f9a7 	bl	b8f4e <_ZNK6String6equalsEPKc>
   b4c00:	4605      	mov	r5, r0
   b4c02:	4638      	mov	r0, r7
   b4c04:	f004 f932 	bl	b8e6c <_ZN6StringD1Ev>
   b4c08:	b145      	cbz	r5, b4c1c <_Z8callbackPcPhj+0xa8>
  {
    int rf = atof(p);
   b4c0a:	4630      	mov	r0, r6
   b4c0c:	f005 f8bc 	bl	b9d88 <atof>
   b4c10:	ec51 0b10 	vmov	r0, r1, d0
   b4c14:	f7ff fe70 	bl	b48f8 <__aeabi_d2iz>
   b4c18:	4b14      	ldr	r3, [pc, #80]	; (b4c6c <_Z8callbackPcPhj+0xf8>)
   b4c1a:	6018      	str	r0, [r3, #0]

    oPrecipitation = rf;
  }
  if (String(topic).equals("WeatherBox/PostData/Humidity"))
   b4c1c:	4621      	mov	r1, r4
   b4c1e:	4638      	mov	r0, r7
   b4c20:	f004 f96f 	bl	b8f02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c24:	4912      	ldr	r1, [pc, #72]	; (b4c70 <_Z8callbackPcPhj+0xfc>)
   b4c26:	4638      	mov	r0, r7
   b4c28:	f004 f991 	bl	b8f4e <_ZNK6String6equalsEPKc>
   b4c2c:	4604      	mov	r4, r0
   b4c2e:	4638      	mov	r0, r7
   b4c30:	f004 f91c 	bl	b8e6c <_ZN6StringD1Ev>
   b4c34:	b16c      	cbz	r4, b4c52 <_Z8callbackPcPhj+0xde>
  {
    float rf = atof(p);
   b4c36:	4630      	mov	r0, r6
   b4c38:	f005 f8a6 	bl	b9d88 <atof>
   b4c3c:	ec51 0b10 	vmov	r0, r1, d0
   b4c40:	f7ff fea2 	bl	b4988 <__aeabi_d2f>

    oHumidity = rf;
   b4c44:	ee07 0a90 	vmov	s15, r0
   b4c48:	4b0a      	ldr	r3, [pc, #40]	; (b4c74 <_Z8callbackPcPhj+0x100>)
   b4c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b4c4e:	edc3 7a00 	vstr	s15, [r3]
  }
}
   b4c52:	3714      	adds	r7, #20
   b4c54:	46bd      	mov	sp, r7
   b4c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4c58:	000bbdc5 	.word	0x000bbdc5
   b4c5c:	2003e690 	.word	0x2003e690
   b4c60:	000bbde5 	.word	0x000bbde5
   b4c64:	2003e694 	.word	0x2003e694
   b4c68:	000bbe03 	.word	0x000bbe03
   b4c6c:	2003e68c 	.word	0x2003e68c
   b4c70:	000bbe25 	.word	0x000bbe25
   b4c74:	2003e688 	.word	0x2003e688

000b4c78 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4c78:	6943      	ldr	r3, [r0, #20]
   b4c7a:	b113      	cbz	r3, b4c82 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c7c:	6983      	ldr	r3, [r0, #24]
   b4c7e:	300c      	adds	r0, #12
   b4c80:	4718      	bx	r3
            callback();
        }
    }
   b4c82:	4770      	bx	lr

000b4c84 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4c84:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4c86:	2100      	movs	r1, #0
   b4c88:	4604      	mov	r4, r0
   b4c8a:	4608      	mov	r0, r1
   b4c8c:	f003 f958 	bl	b7f40 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4c90:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4c92:	4620      	mov	r0, r4
   b4c94:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4c96:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4c98:	f003 f96a 	bl	b7f70 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4c9c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4c9e:	b10c      	cbz	r4, b4ca4 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4ca0:	2301      	movs	r3, #1
   b4ca2:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4ca4:	2100      	movs	r1, #0
   b4ca6:	2001      	movs	r0, #1
   b4ca8:	f003 f94a 	bl	b7f40 <os_thread_scheduling>
            }
        }
        if (t) {
   b4cac:	b12c      	cbz	r4, b4cba <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4cae:	6823      	ldr	r3, [r4, #0]
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	689b      	ldr	r3, [r3, #8]
   b4cb4:	4798      	blx	r3
            t->running = false;
   b4cb6:	2300      	movs	r3, #0
   b4cb8:	7123      	strb	r3, [r4, #4]
        }
    }
   b4cba:	b002      	add	sp, #8
   b4cbc:	bd10      	pop	{r4, pc}
	...

000b4cc0 <_Z13getSensorDatav>:
{
   b4cc0:	b508      	push	{r3, lr}
  if (AHTSensor.available() == true)
   b4cc2:	4808      	ldr	r0, [pc, #32]	; (b4ce4 <_Z13getSensorDatav+0x24>)
   b4cc4:	f003 f819 	bl	b7cfa <_ZN5AHT209availableEv>
   b4cc8:	b158      	cbz	r0, b4ce2 <_Z13getSensorDatav+0x22>
    iTemperature = AHTSensor.getTemperature();
   b4cca:	4806      	ldr	r0, [pc, #24]	; (b4ce4 <_Z13getSensorDatav+0x24>)
   b4ccc:	f003 f82a 	bl	b7d24 <_ZN5AHT2014getTemperatureEv>
   b4cd0:	4b05      	ldr	r3, [pc, #20]	; (b4ce8 <_Z13getSensorDatav+0x28>)
    iHumidity = AHTSensor.getHumidity();
   b4cd2:	4804      	ldr	r0, [pc, #16]	; (b4ce4 <_Z13getSensorDatav+0x24>)
    iTemperature = AHTSensor.getTemperature();
   b4cd4:	ed83 0a00 	vstr	s0, [r3]
    iHumidity = AHTSensor.getHumidity();
   b4cd8:	f003 f856 	bl	b7d88 <_ZN5AHT2011getHumidityEv>
   b4cdc:	4b03      	ldr	r3, [pc, #12]	; (b4cec <_Z13getSensorDatav+0x2c>)
   b4cde:	ed83 0a00 	vstr	s0, [r3]
}
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	2003e4f0 	.word	0x2003e4f0
   b4ce8:	2003e684 	.word	0x2003e684
   b4cec:	2003e680 	.word	0x2003e680

000b4cf0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4cf0:	2a01      	cmp	r2, #1
   b4cf2:	d102      	bne.n	b4cfa <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4cf4:	6001      	str	r1, [r0, #0]
      }
   b4cf6:	2000      	movs	r0, #0
   b4cf8:	4770      	bx	lr
	  switch (__op)
   b4cfa:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4cfc:	bf04      	itt	eq
   b4cfe:	680b      	ldreq	r3, [r1, #0]
   b4d00:	6003      	streq	r3, [r0, #0]
	      break;
   b4d02:	e7f8      	b.n	b4cf6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4d04 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4d04:	6803      	ldr	r3, [r0, #0]
   b4d06:	4718      	bx	r3

000b4d08 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4d08:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4d0a:	6880      	ldr	r0, [r0, #8]
   b4d0c:	b130      	cbz	r0, b4d1c <_ZN5Timer4stopEj.isra.0+0x14>
   b4d0e:	2300      	movs	r3, #0
   b4d10:	e9cd 1300 	strd	r1, r3, [sp]
   b4d14:	461a      	mov	r2, r3
   b4d16:	2102      	movs	r1, #2
   b4d18:	f003 f932 	bl	b7f80 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4d1c:	b003      	add	sp, #12
   b4d1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d22 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4d22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d24:	4605      	mov	r5, r0
   b4d26:	460c      	mov	r4, r1
        stop(fromISR);
   b4d28:	2100      	movs	r1, #0
   b4d2a:	f7ff ffed 	bl	b4d08 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4d2e:	68a8      	ldr	r0, [r5, #8]
   b4d30:	b130      	cbz	r0, b4d40 <_ZN5Timer5startEj.isra.0+0x1e>
   b4d32:	2300      	movs	r3, #0
   b4d34:	e9cd 4300 	strd	r4, r3, [sp]
   b4d38:	461a      	mov	r2, r3
   b4d3a:	4619      	mov	r1, r3
   b4d3c:	f003 f920 	bl	b7f80 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4d40:	b003      	add	sp, #12
   b4d42:	bd30      	pop	{r4, r5, pc}

000b4d44 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4d44:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d46:	f003 f963 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d4a:	4b03      	ldr	r3, [pc, #12]	; (b4d58 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4d4c:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4d52:	f003 bb59 	b.w	b8408 <spark_process>
   b4d56:	bf00      	nop
   b4d58:	2003e728 	.word	0x2003e728

000b4d5c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4d5c:	b510      	push	{r4, lr}
      if (_M_manager)
   b4d5e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d60:	4604      	mov	r4, r0
      if (_M_manager)
   b4d62:	b113      	cbz	r3, b4d6a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d64:	2203      	movs	r2, #3
   b4d66:	4601      	mov	r1, r0
   b4d68:	4798      	blx	r3
    }
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	bd10      	pop	{r4, pc}
	...

000b4d70 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4d70:	b538      	push	{r3, r4, r5, lr}
   b4d72:	4b0f      	ldr	r3, [pc, #60]	; (b4db0 <_ZN5TimerD1Ev+0x40>)
   b4d74:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4d76:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4d78:	4604      	mov	r4, r0
        if (handle) {
   b4d7a:	b19b      	cbz	r3, b4da4 <_ZN5TimerD1Ev+0x34>
            stop();
   b4d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4d80:	f7ff ffc2 	bl	b4d08 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4d84:	68a0      	ldr	r0, [r4, #8]
   b4d86:	2100      	movs	r1, #0
   b4d88:	f003 f92a 	bl	b7fe0 <os_timer_set_id>
            while (running) {
   b4d8c:	7923      	ldrb	r3, [r4, #4]
   b4d8e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4d92:	b113      	cbz	r3, b4d9a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4d94:	f003 f8cc 	bl	b7f30 <os_thread_yield>
            while (running) {
   b4d98:	e7f8      	b.n	b4d8c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4d9a:	68a0      	ldr	r0, [r4, #8]
   b4d9c:	4629      	mov	r1, r5
   b4d9e:	f003 f8df 	bl	b7f60 <os_timer_destroy>
            handle = nullptr;
   b4da2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4da4:	f104 000c 	add.w	r0, r4, #12
   b4da8:	f7ff ffd8 	bl	b4d5c <_ZNSt14_Function_baseD1Ev>
    }
   b4dac:	4620      	mov	r0, r4
   b4dae:	bd38      	pop	{r3, r4, r5, pc}
   b4db0:	000bbf40 	.word	0x000bbf40

000b4db4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4db4:	b510      	push	{r4, lr}
   b4db6:	4604      	mov	r4, r0
    }
   b4db8:	f7ff ffda 	bl	b4d70 <_ZN5TimerD1Ev>
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	211c      	movs	r1, #28
   b4dc0:	f7ff febb 	bl	b4b3a <_ZdlPvj>
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	bd10      	pop	{r4, pc}

000b4dc8 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4dca:	468c      	mov	ip, r1
   b4dcc:	2500      	movs	r5, #0
   b4dce:	4914      	ldr	r1, [pc, #80]	; (b4e20 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4dd0:	7105      	strb	r5, [r0, #4]
   b4dd2:	4604      	mov	r4, r0
   b4dd4:	6085      	str	r5, [r0, #8]
   b4dd6:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4ddc:	b085      	sub	sp, #20
   b4dde:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4de0:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4de4:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4de8:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4dec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4df0:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4df4:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4df8:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4dfa:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4dfc:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dfe:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4e00:	6095      	str	r5, [r2, #8]
   b4e02:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e04:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4e06:	e9cd 3500 	strd	r3, r5, [sp]
   b4e0a:	4a06      	ldr	r2, [pc, #24]	; (b4e24 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4e0c:	4623      	mov	r3, r4
   b4e0e:	4661      	mov	r1, ip
   b4e10:	f104 0008 	add.w	r0, r4, #8
   b4e14:	f003 f89c 	bl	b7f50 <os_timer_create>
    }
   b4e18:	4620      	mov	r0, r4
   b4e1a:	b005      	add	sp, #20
   b4e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4e1e:	bf00      	nop
   b4e20:	000bbf40 	.word	0x000bbf40
   b4e24:	000b4c85 	.word	0x000b4c85

000b4e28 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e28:	6803      	ldr	r3, [r0, #0]
   b4e2a:	b12b      	cbz	r3, b4e38 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4e2c:	6842      	ldr	r2, [r0, #4]
   b4e2e:	4293      	cmp	r3, r2
   b4e30:	d202      	bcs.n	b4e38 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4e32:	4618      	mov	r0, r3
   b4e34:	f004 bfab 	b.w	b9d8e <atoi>
   b4e38:	2000      	movs	r0, #0
   b4e3a:	4770      	bx	lr

000b4e3c <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4e3c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e3e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4e40:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e42:	b145      	cbz	r5, b4e56 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4e44:	6843      	ldr	r3, [r0, #4]
   b4e46:	429d      	cmp	r5, r3
   b4e48:	d205      	bcs.n	b4e56 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4e4a:	4628      	mov	r0, r5
   b4e4c:	f7ff fe14 	bl	b4a78 <strlen>
   b4e50:	3001      	adds	r0, #1
   b4e52:	4405      	add	r5, r0
   b4e54:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4e56:	4620      	mov	r0, r4
   b4e58:	bd38      	pop	{r3, r4, r5, pc}

000b4e5a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e5c:	4604      	mov	r4, r0
   b4e5e:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4e60:	460d      	mov	r5, r1
   b4e62:	b921      	cbnz	r1, b4e6e <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4e64:	6803      	ldr	r3, [r0, #0]
   b4e66:	1c7a      	adds	r2, r7, #1
   b4e68:	6042      	str	r2, [r0, #4]
   b4e6a:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4e6e:	4608      	mov	r0, r1
   b4e70:	f7ff fe02 	bl	b4a78 <strlen>
    if (len + l > buff_size)
   b4e74:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4e76:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4e78:	19f2      	adds	r2, r6, r7
   b4e7a:	429a      	cmp	r2, r3
   b4e7c:	d8f6      	bhi.n	b4e6c <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4e7e:	6820      	ldr	r0, [r4, #0]
   b4e80:	4632      	mov	r2, r6
   b4e82:	4629      	mov	r1, r5
   b4e84:	4438      	add	r0, r7
   b4e86:	f004 ff8a 	bl	b9d9e <memcpy>
    len += l;
   b4e8a:	6860      	ldr	r0, [r4, #4]
   b4e8c:	4430      	add	r0, r6
   b4e8e:	6060      	str	r0, [r4, #4]
   b4e90:	e7ec      	b.n	b4e6c <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4e94 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4e94:	b538      	push	{r3, r4, r5, lr}
   b4e96:	4604      	mov	r4, r0
   b4e98:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4e9a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4e9e:	6825      	ldr	r5, [r4, #0]
   b4ea0:	4a04      	ldr	r2, [pc, #16]	; (b4eb4 <_ZN10BlynkParam3addEi+0x20>)
   b4ea2:	1a09      	subs	r1, r1, r0
   b4ea4:	4428      	add	r0, r5
   b4ea6:	f003 fb3f 	bl	b8528 <snprintf>
   b4eaa:	6863      	ldr	r3, [r4, #4]
   b4eac:	3001      	adds	r0, #1
   b4eae:	4403      	add	r3, r0
   b4eb0:	6063      	str	r3, [r4, #4]
    }
   b4eb2:	bd38      	pop	{r3, r4, r5, pc}
   b4eb4:	000bbe42 	.word	0x000bbe42

000b4eb8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4eb8:	b538      	push	{r3, r4, r5, lr}
   b4eba:	4604      	mov	r4, r0
   b4ebc:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4ebe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4ec2:	6825      	ldr	r5, [r4, #0]
   b4ec4:	4a04      	ldr	r2, [pc, #16]	; (b4ed8 <_ZN10BlynkParam3addEl+0x20>)
   b4ec6:	1a09      	subs	r1, r1, r0
   b4ec8:	4428      	add	r0, r5
   b4eca:	f003 fb2d 	bl	b8528 <snprintf>
   b4ece:	6863      	ldr	r3, [r4, #4]
   b4ed0:	3001      	adds	r0, #1
   b4ed2:	4403      	add	r3, r0
   b4ed4:	6063      	str	r3, [r4, #4]
    }
   b4ed6:	bd38      	pop	{r3, r4, r5, pc}
   b4ed8:	000bbe45 	.word	0x000bbe45

000b4edc <_Z12resetDisplayv>:

void resetDisplay()
{
   b4edc:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4ede:	4c07      	ldr	r4, [pc, #28]	; (b4efc <_Z12resetDisplayv+0x20>)
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	f001 fd67 	bl	b69b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4ee6:	2101      	movs	r1, #1
   b4ee8:	4620      	mov	r0, r4
   b4eea:	f001 fbaa 	bl	b6642 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4eee:	2200      	movs	r2, #0
   b4ef0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4ef4:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
   b4ef8:	bd10      	pop	{r4, pc}
   b4efa:	bf00      	nop
   b4efc:	2003e5d4 	.word	0x2003e5d4

000b4f00 <_Z19connectingAnimationv>:
void connectingAnimation() {
   b4f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  resetDisplay();
   b4f02:	f7ff ffeb 	bl	b4edc <_Z12resetDisplayv>
  display.print("Connecting");
   b4f06:	490d      	ldr	r1, [pc, #52]	; (b4f3c <_Z19connectingAnimationv+0x3c>)
   b4f08:	480d      	ldr	r0, [pc, #52]	; (b4f40 <_Z19connectingAnimationv+0x40>)
  for (int i = 0; i < iAmount; i++) {
   b4f0a:	4c0e      	ldr	r4, [pc, #56]	; (b4f44 <_Z19connectingAnimationv+0x44>)
    display.print(".");
   b4f0c:	4f0e      	ldr	r7, [pc, #56]	; (b4f48 <_Z19connectingAnimationv+0x48>)
   b4f0e:	4e0c      	ldr	r6, [pc, #48]	; (b4f40 <_Z19connectingAnimationv+0x40>)
  display.print("Connecting");
   b4f10:	f003 fd82 	bl	b8a18 <_ZN5Print5printEPKc>
  for (int i = 0; i < iAmount; i++) {
   b4f14:	2500      	movs	r5, #0
   b4f16:	6823      	ldr	r3, [r4, #0]
   b4f18:	42ab      	cmp	r3, r5
   b4f1a:	dd05      	ble.n	b4f28 <_Z19connectingAnimationv+0x28>
    display.print(".");
   b4f1c:	4639      	mov	r1, r7
   b4f1e:	4630      	mov	r0, r6
   b4f20:	f003 fd7a 	bl	b8a18 <_ZN5Print5printEPKc>
  for (int i = 0; i < iAmount; i++) {
   b4f24:	3501      	adds	r5, #1
   b4f26:	e7f6      	b.n	b4f16 <_Z19connectingAnimationv+0x16>
  iAmount++;
   b4f28:	3301      	adds	r3, #1
  if (iAmount > 3) {
   b4f2a:	2b03      	cmp	r3, #3
    iAmount = 0;
   b4f2c:	bfc8      	it	gt
   b4f2e:	2300      	movgt	r3, #0
   b4f30:	6023      	str	r3, [r4, #0]
  display.display();
   b4f32:	4803      	ldr	r0, [pc, #12]	; (b4f40 <_Z19connectingAnimationv+0x40>)
}
   b4f34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  display.display();
   b4f38:	f001 bfaa 	b.w	b6e90 <_ZN16Adafruit_SSD13067displayEv>
   b4f3c:	000bbe49 	.word	0x000bbe49
   b4f40:	2003e5d4 	.word	0x2003e5d4
   b4f44:	2003e67c 	.word	0x2003e67c
   b4f48:	000bbe54 	.word	0x000bbe54

000b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4f4c:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4f4e:	2300      	movs	r3, #0
   b4f50:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4f52:	6800      	ldr	r0, [r0, #0]
   b4f54:	f004 fab2 	bl	b94bc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4f5c:	f002 bf48 	b.w	b7df0 <BlynkNoOpCbk>

000b4f60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4f64:	188f      	adds	r7, r1, r2
   b4f66:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4f68:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4f6a:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4f6e:	4606      	mov	r6, r0
   b4f70:	4689      	mov	r9, r1
   b4f72:	4690      	mov	r8, r2
    if (it >= param.end())
   b4f74:	f080 80c2 	bcs.w	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4f78:	a805      	add	r0, sp, #20
   b4f7a:	880d      	ldrh	r5, [r1, #0]
   b4f7c:	f7ff ff5e 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
   b4f80:	6803      	ldr	r3, [r0, #0]
   b4f82:	42bb      	cmp	r3, r7
   b4f84:	f080 80ba 	bcs.w	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4f88:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4f8a:	7803      	ldrb	r3, [r0, #0]
   b4f8c:	2b41      	cmp	r3, #65	; 0x41
   b4f8e:	d149      	bne.n	b5024 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4f90:	3001      	adds	r0, #1
   b4f92:	f004 fefc 	bl	b9d8e <atoi>
   b4f96:	2805      	cmp	r0, #5
   b4f98:	dd37      	ble.n	b500a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4f9a:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4f9c:	f247 2376 	movw	r3, #29302	; 0x7276
   b4fa0:	429d      	cmp	r5, r3
   b4fa2:	f000 80d3 	beq.w	b514c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4fa6:	d841      	bhi.n	b502c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4fa8:	f247 2361 	movw	r3, #29281	; 0x7261
   b4fac:	429d      	cmp	r5, r3
   b4fae:	f000 80a8 	beq.w	b5102 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4fb2:	f247 2364 	movw	r3, #29284	; 0x7264
   b4fb6:	429d      	cmp	r5, r3
   b4fb8:	d06b      	beq.n	b5092 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4fba:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4fbe:	429d      	cmp	r5, r3
   b4fc0:	d141      	bne.n	b5046 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4fc2:	4d78      	ldr	r5, [pc, #480]	; (b51a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4fc4:	4e78      	ldr	r6, [pc, #480]	; (b51a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4fc6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b51bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4fca:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4fcc:	42b8      	cmp	r0, r7
   b4fce:	f080 8095 	bcs.w	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4fd2:	7803      	ldrb	r3, [r0, #0]
   b4fd4:	2b41      	cmp	r3, #65	; 0x41
   b4fd6:	d14b      	bne.n	b5070 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4fd8:	3001      	adds	r0, #1
   b4fda:	f004 fed8 	bl	b9d8e <atoi>
   b4fde:	2805      	cmp	r0, #5
   b4fe0:	dd39      	ble.n	b5056 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4fe2:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4fe4:	a805      	add	r0, sp, #20
   b4fe6:	f7ff ff29 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4fea:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4fee:	4629      	mov	r1, r5
   b4ff0:	4648      	mov	r0, r9
   b4ff2:	f7ff fd37 	bl	b4a64 <strcmp>
   b4ff6:	4601      	mov	r1, r0
   b4ff8:	2800      	cmp	r0, #0
   b4ffa:	d13d      	bne.n	b5078 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4ffc:	4620      	mov	r0, r4
   b4ffe:	f004 fcaf 	bl	b9960 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b5002:	a805      	add	r0, sp, #20
   b5004:	f7ff ff1a 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b5008:	e7df      	b.n	b4fca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b500a:	9805      	ldr	r0, [sp, #20]
   b500c:	3001      	adds	r0, #1
   b500e:	f004 febe 	bl	b9d8e <atoi>
   b5012:	2800      	cmp	r0, #0
   b5014:	dbc1      	blt.n	b4f9a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b5016:	9805      	ldr	r0, [sp, #20]
   b5018:	3001      	adds	r0, #1
   b501a:	f004 feb8 	bl	b9d8e <atoi>
   b501e:	300e      	adds	r0, #14
   b5020:	b2c4      	uxtb	r4, r0
   b5022:	e7bb      	b.n	b4f9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b5024:	a805      	add	r0, sp, #20
   b5026:	f7ff feff 	bl	b4e28 <_ZNK10BlynkParam8iterator5asIntEv>
   b502a:	e7f9      	b.n	b5020 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b502c:	f247 7364 	movw	r3, #30564	; 0x7764
   b5030:	429d      	cmp	r5, r3
   b5032:	d04f      	beq.n	b50d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b5034:	f247 7376 	movw	r3, #30582	; 0x7776
   b5038:	429d      	cmp	r5, r3
   b503a:	f000 8097 	beq.w	b516c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b503e:	f247 7361 	movw	r3, #30561	; 0x7761
   b5042:	429d      	cmp	r5, r3
   b5044:	d06f      	beq.n	b5126 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b5046:	2300      	movs	r3, #0
   b5048:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b504c:	2202      	movs	r2, #2
   b504e:	9200      	str	r2, [sp, #0]
   b5050:	8b72      	ldrh	r2, [r6, #26]
   b5052:	4619      	mov	r1, r3
   b5054:	e03a      	b.n	b50cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5056:	9805      	ldr	r0, [sp, #20]
   b5058:	3001      	adds	r0, #1
   b505a:	f004 fe98 	bl	b9d8e <atoi>
   b505e:	2800      	cmp	r0, #0
   b5060:	dbbf      	blt.n	b4fe2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b5062:	9805      	ldr	r0, [sp, #20]
   b5064:	3001      	adds	r0, #1
   b5066:	f004 fe92 	bl	b9d8e <atoi>
   b506a:	300e      	adds	r0, #14
   b506c:	b2c4      	uxtb	r4, r0
   b506e:	e7b9      	b.n	b4fe4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b5070:	a805      	add	r0, sp, #20
   b5072:	f7ff fed9 	bl	b4e28 <_ZNK10BlynkParam8iterator5asIntEv>
   b5076:	e7f9      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b5078:	4631      	mov	r1, r6
   b507a:	4648      	mov	r0, r9
   b507c:	f7ff fcf2 	bl	b4a64 <strcmp>
   b5080:	b128      	cbz	r0, b508e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b5082:	4641      	mov	r1, r8
   b5084:	4648      	mov	r0, r9
   b5086:	f7ff fced 	bl	b4a64 <strcmp>
   b508a:	2800      	cmp	r0, #0
   b508c:	d1b9      	bne.n	b5002 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b508e:	2101      	movs	r1, #1
   b5090:	e7b4      	b.n	b4ffc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5092:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5094:	4945      	ldr	r1, [pc, #276]	; (b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b5096:	9307      	str	r3, [sp, #28]
   b5098:	a807      	add	r0, sp, #28
   b509a:	2310      	movs	r3, #16
   b509c:	2500      	movs	r5, #0
   b509e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b50a2:	f7ff feda 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b50a6:	a807      	add	r0, sp, #28
   b50a8:	4621      	mov	r1, r4
   b50aa:	f7ff fef3 	bl	b4e94 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b50ae:	4620      	mov	r0, r4
   b50b0:	f004 fc80 	bl	b99b4 <digitalRead>
        rsp.add(analogRead(pin));
   b50b4:	4601      	mov	r1, r0
   b50b6:	a807      	add	r0, sp, #28
   b50b8:	f7ff fefe 	bl	b4eb8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b50bc:	9b08      	ldr	r3, [sp, #32]
   b50be:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b50c2:	3b01      	subs	r3, #1
   b50c4:	9300      	str	r3, [sp, #0]
   b50c6:	9b07      	ldr	r3, [sp, #28]
   b50c8:	462a      	mov	r2, r5
   b50ca:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b50cc:	4630      	mov	r0, r6
   b50ce:	f000 fa85 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b50d2:	e013      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b50d4:	a805      	add	r0, sp, #20
   b50d6:	f7ff feb1 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
   b50da:	6803      	ldr	r3, [r0, #0]
   b50dc:	429f      	cmp	r7, r3
   b50de:	d90d      	bls.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b50e0:	b2a4      	uxth	r4, r4
   b50e2:	2101      	movs	r1, #1
   b50e4:	4620      	mov	r0, r4
   b50e6:	f004 fc3b 	bl	b9960 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b50ea:	a805      	add	r0, sp, #20
   b50ec:	f7ff fe9c 	bl	b4e28 <_ZNK10BlynkParam8iterator5asIntEv>
   b50f0:	1e01      	subs	r1, r0, #0
   b50f2:	bf18      	it	ne
   b50f4:	2101      	movne	r1, #1
   b50f6:	4620      	mov	r0, r4
   b50f8:	f004 fc43 	bl	b9982 <digitalWrite>
    }
}
   b50fc:	b00f      	add	sp, #60	; 0x3c
   b50fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5102:	ab0a      	add	r3, sp, #40	; 0x28
   b5104:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b5106:	a807      	add	r0, sp, #28
   b5108:	2310      	movs	r3, #16
   b510a:	4929      	ldr	r1, [pc, #164]	; (b51b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b510c:	2500      	movs	r5, #0
   b510e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5112:	f7ff fea2 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5116:	a807      	add	r0, sp, #28
   b5118:	4621      	mov	r1, r4
   b511a:	f7ff febb 	bl	b4e94 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b511e:	4620      	mov	r0, r4
   b5120:	f004 fc5b 	bl	b99da <analogRead>
   b5124:	e7c6      	b.n	b50b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b5126:	a805      	add	r0, sp, #20
   b5128:	f7ff fe88 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
   b512c:	6803      	ldr	r3, [r0, #0]
   b512e:	429f      	cmp	r7, r3
   b5130:	d9e4      	bls.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b5132:	b2a4      	uxth	r4, r4
   b5134:	2101      	movs	r1, #1
   b5136:	4620      	mov	r0, r4
   b5138:	f004 fc12 	bl	b9960 <pinMode>
        analogWrite(pin, it.asInt());
   b513c:	a805      	add	r0, sp, #20
   b513e:	f7ff fe73 	bl	b4e28 <_ZNK10BlynkParam8iterator5asIntEv>
   b5142:	4601      	mov	r1, r0
   b5144:	4620      	mov	r0, r4
   b5146:	f004 fc5f 	bl	b9a08 <_Z11analogWritetm>
    } break;
   b514a:	e7d7      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b514c:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b514e:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b5152:	f002 fe4f 	bl	b7df4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b5156:	4603      	mov	r3, r0
            handler(req);
   b5158:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b515a:	b123      	cbz	r3, b5166 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b515c:	4a15      	ldr	r2, [pc, #84]	; (b51b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b515e:	4293      	cmp	r3, r2
   b5160:	d001      	beq.n	b5166 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b5162:	4798      	blx	r3
   b5164:	e7ca      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b5166:	f002 fe41 	bl	b7dec <BlynkWidgetRead>
        }
    }
   b516a:	e7c7      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b516c:	a805      	add	r0, sp, #20
   b516e:	f7ff fe65 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5172:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b5174:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b5178:	eba3 0109 	sub.w	r1, r3, r9
   b517c:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b5180:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b5182:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b5186:	910c      	str	r1, [sp, #48]	; 0x30
   b5188:	f002 fe3e 	bl	b7e08 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b518c:	4603      	mov	r3, r0
            handler(req, param);
   b518e:	a90a      	add	r1, sp, #40	; 0x28
   b5190:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5192:	b123      	cbz	r3, b519e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b5194:	4a08      	ldr	r2, [pc, #32]	; (b51b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b5196:	4293      	cmp	r3, r2
   b5198:	d001      	beq.n	b519e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b519a:	4798      	blx	r3
   b519c:	e7ae      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b519e:	f002 fe26 	bl	b7dee <BlynkWidgetWrite>
    } break;
   b51a2:	e7ab      	b.n	b50fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b51a4:	000bbe56 	.word	0x000bbe56
   b51a8:	000bbe59 	.word	0x000bbe59
   b51ac:	000bbe61 	.word	0x000bbe61
   b51b0:	000bbe64 	.word	0x000bbe64
   b51b4:	000b7ded 	.word	0x000b7ded
   b51b8:	000b7def 	.word	0x000b7def
   b51bc:	000bbe5d 	.word	0x000bbe5d

000b51c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b51c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b51c4:	b08c      	sub	sp, #48	; 0x30
   b51c6:	af04      	add	r7, sp, #16
   b51c8:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b51ca:	2205      	movs	r2, #5
   b51cc:	6800      	ldr	r0, [r0, #0]
   b51ce:	1d39      	adds	r1, r7, #4
   b51d0:	f003 fe37 	bl	b8e42 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b51d4:	b3a8      	cbz	r0, b5242 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b51d6:	2805      	cmp	r0, #5
   b51d8:	d004      	beq.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b51da:	2000      	movs	r0, #0
}
   b51dc:	3720      	adds	r7, #32
   b51de:	46bd      	mov	sp, r7
   b51e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b51e4:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b51e8:	f002 ffd2 	bl	b8190 <inet_ntohs>
   b51ec:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b51f0:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b51f4:	f002 ffcc 	bl	b8190 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b51f8:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b51fc:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5200:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b5202:	2b00      	cmp	r3, #0
   b5204:	d0e9      	beq.n	b51da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5206:	793b      	ldrb	r3, [r7, #4]
   b5208:	bb23      	cbnz	r3, b5254 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b520a:	f002 fded 	bl	b7de8 <_Z11BlynkMillisv>
   b520e:	4602      	mov	r2, r0
   b5210:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b5212:	7f60      	ldrb	r0, [r4, #29]
   b5214:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5218:	b9c0      	cbnz	r0, b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b521a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b521e:	2901      	cmp	r1, #1
   b5220:	d114      	bne.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b5222:	2b09      	cmp	r3, #9
   b5224:	d00f      	beq.n	b5246 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5226:	2bc8      	cmp	r3, #200	; 0xc8
   b5228:	d001      	beq.n	b522e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b522a:	2b04      	cmp	r3, #4
   b522c:	d1d6      	bne.n	b51dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b522e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b5230:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b5232:	4620      	mov	r0, r4
                state = CONNECTED;
   b5234:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b5236:	f000 fa81 	bl	b573c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b523a:	f7ff fd83 	bl	b4d44 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b523e:	f002 fdd7 	bl	b7df0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b5242:	2001      	movs	r0, #1
   b5244:	e7ca      	b.n	b51dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b5246:	2303      	movs	r3, #3
   b5248:	7763      	strb	r3, [r4, #29]
                break;
   b524a:	e7c7      	b.n	b51dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b524c:	1f58      	subs	r0, r3, #5
   b524e:	bf18      	it	ne
   b5250:	2001      	movne	r0, #1
   b5252:	e7c3      	b.n	b51dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b5254:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5258:	d903      	bls.n	b5262 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b525a:	4620      	mov	r0, r4
   b525c:	f7ff fe76 	bl	b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5260:	e7ef      	b.n	b5242 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b5262:	f100 0308 	add.w	r3, r0, #8
   b5266:	f023 0307 	bic.w	r3, r3, #7
   b526a:	466e      	mov	r6, sp
   b526c:	ebad 0d03 	sub.w	sp, sp, r3
   b5270:	ad04      	add	r5, sp, #16
   b5272:	4602      	mov	r2, r0
   b5274:	4629      	mov	r1, r5
   b5276:	6820      	ldr	r0, [r4, #0]
   b5278:	f003 fde3 	bl	b8e42 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b527c:	4580      	cmp	r8, r0
   b527e:	f04f 0000 	mov.w	r0, #0
   b5282:	d17f      	bne.n	b5384 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b5284:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5288:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b528a:	f002 fdad 	bl	b7de8 <_Z11BlynkMillisv>
    switch (hdr.type)
   b528e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5290:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b5292:	2b14      	cmp	r3, #20
   b5294:	f000 80a6 	beq.w	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5298:	d848      	bhi.n	b532c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b529a:	2b0f      	cmp	r3, #15
   b529c:	f000 80a2 	beq.w	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b52a0:	d807      	bhi.n	b52b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b52a2:	2b02      	cmp	r3, #2
   b52a4:	d048      	beq.n	b5338 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b52a6:	2b06      	cmp	r3, #6
   b52a8:	d051      	beq.n	b534e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b52aa:	4620      	mov	r0, r4
   b52ac:	f7ff fe4e 	bl	b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b52b0:	e058      	b.n	b5364 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b52b2:	2b11      	cmp	r3, #17
   b52b4:	d1f9      	bne.n	b52aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b52b6:	2300      	movs	r3, #0
   b52b8:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b52ba:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b52be:	442b      	add	r3, r5
        if (it >= param.end())
   b52c0:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b52c2:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b52c6:	d24d      	bcs.n	b5364 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b52c8:	f107 000c 	add.w	r0, r7, #12
   b52cc:	f8d5 8000 	ldr.w	r8, [r5]
   b52d0:	f7ff fdb4 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b52d4:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b52d6:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b52da:	1b5d      	subs	r5, r3, r5
   b52dc:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b52de:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b52e2:	687b      	ldr	r3, [r7, #4]
   b52e4:	61fd      	str	r5, [r7, #28]
   b52e6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b52ea:	8363      	strh	r3, [r4, #26]
   b52ec:	4b64      	ldr	r3, [pc, #400]	; (b5480 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b52ee:	4598      	cmp	r8, r3
   b52f0:	f000 80bf 	beq.w	b5472 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b52f4:	f200 808c 	bhi.w	b5410 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b52f8:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b52fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5300:	4413      	add	r3, r2
   b5302:	4598      	cmp	r8, r3
   b5304:	f000 809d 	beq.w	b5442 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5308:	d879      	bhi.n	b53fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b530a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b530e:	3b06      	subs	r3, #6
   b5310:	4598      	cmp	r8, r3
   b5312:	f000 809c 	beq.w	b544e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5316:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b531a:	3303      	adds	r3, #3
   b531c:	4598      	cmp	r8, r3
   b531e:	d16b      	bne.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b5320:	f107 0114 	add.w	r1, r7, #20
   b5324:	4638      	mov	r0, r7
   b5326:	f002 fd62 	bl	b7dee <BlynkWidgetWrite>
   b532a:	e065      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b532c:	2b29      	cmp	r3, #41	; 0x29
   b532e:	d01b      	beq.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b5330:	2b37      	cmp	r3, #55	; 0x37
   b5332:	d017      	beq.n	b5364 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5334:	2b1d      	cmp	r3, #29
   b5336:	d1b8      	bne.n	b52aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b5338:	7f63      	ldrb	r3, [r4, #29]
   b533a:	b943      	cbnz	r3, b534e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b533c:	2301      	movs	r3, #1
   b533e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b5340:	4620      	mov	r0, r4
   b5342:	f000 f9fb 	bl	b573c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b5346:	f7ff fcfd 	bl	b4d44 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b534a:	f002 fd51 	bl	b7df0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b534e:	2300      	movs	r3, #0
   b5350:	21c8      	movs	r1, #200	; 0xc8
   b5352:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b5356:	9100      	str	r1, [sp, #0]
   b5358:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b535c:	4619      	mov	r1, r3
   b535e:	4620      	mov	r0, r4
   b5360:	f000 f93c 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b5364:	2001      	movs	r0, #1
   b5366:	e00d      	b.n	b5384 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b5368:	68a3      	ldr	r3, [r4, #8]
   b536a:	b91b      	cbnz	r3, b5374 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b536c:	2040      	movs	r0, #64	; 0x40
   b536e:	f003 f8c3 	bl	b84f8 <malloc>
   b5372:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b5374:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b5378:	44a8      	add	r8, r5
        if (it >= param.end())
   b537a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b537c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b5380:	d302      	bcc.n	b5388 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b5382:	2000      	movs	r0, #0
   b5384:	46b5      	mov	sp, r6
   b5386:	e729      	b.n	b51dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b5388:	4629      	mov	r1, r5
   b538a:	2240      	movs	r2, #64	; 0x40
   b538c:	68a0      	ldr	r0, [r4, #8]
   b538e:	f004 fd5f 	bl	b9e50 <strncpy>
        redir_serv[63] = '\0';
   b5392:	68a3      	ldr	r3, [r4, #8]
   b5394:	2500      	movs	r5, #0
   b5396:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b539a:	f107 0014 	add.w	r0, r7, #20
   b539e:	f7ff fd4d 	bl	b4e3c <_ZN10BlynkParam8iteratorppEv>
   b53a2:	6803      	ldr	r3, [r0, #0]
   b53a4:	4598      	cmp	r8, r3
   b53a6:	d91b      	bls.n	b53e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b53a8:	6978      	ldr	r0, [r7, #20]
   b53aa:	b120      	cbz	r0, b53b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b53ac:	69bb      	ldr	r3, [r7, #24]
   b53ae:	4298      	cmp	r0, r3
   b53b0:	d214      	bcs.n	b53dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b53b2:	f004 fcf0 	bl	b9d96 <atol>
            redir_port = it.asLong();
   b53b6:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b53b8:	6820      	ldr	r0, [r4, #0]
   b53ba:	f004 f87f 	bl	b94bc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b53be:	6823      	ldr	r3, [r4, #0]
   b53c0:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b53c2:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b53c4:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b53c6:	2300      	movs	r3, #0
   b53c8:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b53ca:	f002 fd0d 	bl	b7de8 <_Z11BlynkMillisv>
   b53ce:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b53d2:	3808      	subs	r0, #8
   b53d4:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b53d8:	6160      	str	r0, [r4, #20]
   b53da:	e7c3      	b.n	b5364 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b53dc:	4628      	mov	r0, r5
   b53de:	e7ea      	b.n	b53b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b53e0:	2550      	movs	r5, #80	; 0x50
   b53e2:	e7e9      	b.n	b53b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b53e4:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b53e6:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b53ea:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b53ee:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b53f0:	4629      	mov	r1, r5
   b53f2:	4620      	mov	r0, r4
   b53f4:	f7ff fdb4 	bl	b4f60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b53f8:	2300      	movs	r3, #0
   b53fa:	8363      	strh	r3, [r4, #26]
   b53fc:	e7b2      	b.n	b5364 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b53fe:	4b21      	ldr	r3, [pc, #132]	; (b5484 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5400:	4598      	cmp	r8, r3
   b5402:	d1f9      	bne.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5404:	f107 0114 	add.w	r1, r7, #20
   b5408:	4638      	mov	r0, r7
   b540a:	f002 fcf0 	bl	b7dee <BlynkWidgetWrite>
   b540e:	e7f3      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5410:	4b1d      	ldr	r3, [pc, #116]	; (b5488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b5412:	4598      	cmp	r8, r3
   b5414:	d021      	beq.n	b545a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5416:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b541a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b541e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b5422:	4598      	cmp	r8, r3
   b5424:	d01f      	beq.n	b5466 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5426:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b542a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b542e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b5432:	4598      	cmp	r8, r3
   b5434:	d1e0      	bne.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b5436:	f107 0114 	add.w	r1, r7, #20
   b543a:	4638      	mov	r0, r7
   b543c:	f002 fcd7 	bl	b7dee <BlynkWidgetWrite>
   b5440:	e7da      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b5442:	f107 0114 	add.w	r1, r7, #20
   b5446:	4638      	mov	r0, r7
   b5448:	f002 fcd1 	bl	b7dee <BlynkWidgetWrite>
   b544c:	e7d4      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b544e:	f107 0114 	add.w	r1, r7, #20
   b5452:	4638      	mov	r0, r7
   b5454:	f002 fccb 	bl	b7dee <BlynkWidgetWrite>
   b5458:	e7ce      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b545a:	f107 0114 	add.w	r1, r7, #20
   b545e:	4638      	mov	r0, r7
   b5460:	f002 fcc5 	bl	b7dee <BlynkWidgetWrite>
   b5464:	e7c8      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b5466:	f107 0114 	add.w	r1, r7, #20
   b546a:	4638      	mov	r0, r7
   b546c:	f002 fcbf 	bl	b7dee <BlynkWidgetWrite>
   b5470:	e7c2      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b5472:	f107 0114 	add.w	r1, r7, #20
   b5476:	4638      	mov	r0, r7
   b5478:	f002 fcb9 	bl	b7dee <BlynkWidgetWrite>
   b547c:	e7bc      	b.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b547e:	bf00      	nop
   b5480:	00736676 	.word	0x00736676
   b5484:	00676264 	.word	0x00676264
   b5488:	6e6f6361 	.word	0x6e6f6361

000b548c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5490:	4604      	mov	r4, r0
   b5492:	b08c      	sub	sp, #48	; 0x30
   b5494:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5496:	f7ff fc55 	bl	b4d44 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b549a:	7f63      	ldrb	r3, [r4, #29]
   b549c:	2b02      	cmp	r3, #2
   b549e:	d01e      	beq.n	b54de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b54a0:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b54a2:	8b62      	ldrh	r2, [r4, #26]
   b54a4:	3301      	adds	r3, #1
   b54a6:	b2db      	uxtb	r3, r3
   b54a8:	7723      	strb	r3, [r4, #28]
   b54aa:	b9aa      	cbnz	r2, b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b54ac:	2b02      	cmp	r3, #2
   b54ae:	d813      	bhi.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b54b0:	6820      	ldr	r0, [r4, #0]
   b54b2:	f003 fecb 	bl	b924c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b54b6:	b1a8      	cbz	r0, b54e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b54b8:	b925      	cbnz	r5, b54c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b54ba:	6820      	ldr	r0, [r4, #0]
   b54bc:	f003 ffa4 	bl	b9408 <_ZN9TCPClient9availableEv>
   b54c0:	2800      	cmp	r0, #0
   b54c2:	dd0f      	ble.n	b54e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b54c4:	4620      	mov	r0, r4
   b54c6:	f7ff fe7b 	bl	b51c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b54ca:	2800      	cmp	r0, #0
   b54cc:	d1f5      	bne.n	b54ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b54ce:	6820      	ldr	r0, [r4, #0]
   b54d0:	f003 fff4 	bl	b94bc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b54d4:	f002 fc8c 	bl	b7df0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b54d8:	7f23      	ldrb	r3, [r4, #28]
   b54da:	3b01      	subs	r3, #1
   b54dc:	7723      	strb	r3, [r4, #28]
}
   b54de:	b00c      	add	sp, #48	; 0x30
   b54e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b54e4:	f002 fc80 	bl	b7de8 <_Z11BlynkMillisv>
   b54e8:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b54ea:	6820      	ldr	r0, [r4, #0]
   b54ec:	f003 feae 	bl	b924c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b54f0:	7f67      	ldrb	r7, [r4, #29]
   b54f2:	2f01      	cmp	r7, #1
   b54f4:	4606      	mov	r6, r0
   b54f6:	d124      	bne.n	b5542 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b54f8:	b920      	cbnz	r0, b5504 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b54fa:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b54fc:	4620      	mov	r0, r4
   b54fe:	f7ff fd25 	bl	b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b5502:	e7e9      	b.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5504:	68e3      	ldr	r3, [r4, #12]
   b5506:	f24f 6218 	movw	r2, #63000	; 0xf618
   b550a:	1aeb      	subs	r3, r5, r3
   b550c:	4293      	cmp	r3, r2
   b550e:	d8f5      	bhi.n	b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5510:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5514:	4293      	cmp	r3, r2
   b5516:	d803      	bhi.n	b5520 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5518:	6923      	ldr	r3, [r4, #16]
   b551a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b551c:	4293      	cmp	r3, r2
   b551e:	d9db      	bls.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5520:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5522:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5526:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5528:	4293      	cmp	r3, r2
   b552a:	d9d5      	bls.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b552c:	2300      	movs	r3, #0
   b552e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5532:	9300      	str	r3, [sp, #0]
   b5534:	461a      	mov	r2, r3
   b5536:	2106      	movs	r1, #6
   b5538:	4620      	mov	r0, r4
   b553a:	f000 f84f 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b553e:	6165      	str	r5, [r4, #20]
                return false;
   b5540:	e7ca      	b.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b5542:	2f00      	cmp	r7, #0
   b5544:	d1c8      	bne.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5546:	6963      	ldr	r3, [r4, #20]
   b5548:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b554a:	b140      	cbz	r0, b555e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b554c:	f241 7270 	movw	r2, #6000	; 0x1770
   b5550:	4293      	cmp	r3, r2
   b5552:	d9c1      	bls.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b5554:	6820      	ldr	r0, [r4, #0]
   b5556:	f003 ffb1 	bl	b94bc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b555a:	7767      	strb	r7, [r4, #29]
            return false;
   b555c:	e7bc      	b.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b555e:	f241 3288 	movw	r2, #5000	; 0x1388
   b5562:	4293      	cmp	r3, r2
   b5564:	d9b8      	bls.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b5566:	6820      	ldr	r0, [r4, #0]
   b5568:	f003 ffa8 	bl	b94bc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b556c:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b5570:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b5574:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b5578:	f1be 0f00 	cmp.w	lr, #0
   b557c:	d01b      	beq.n	b55b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b557e:	4633      	mov	r3, r6
   b5580:	4642      	mov	r2, r8
   b5582:	4671      	mov	r1, lr
   b5584:	4660      	mov	r0, ip
   b5586:	f003 fde3 	bl	b9150 <_ZN9TCPClient7connectEPKctm>
   b558a:	2801      	cmp	r0, #1
   b558c:	d1d7      	bne.n	b553e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b558e:	6863      	ldr	r3, [r4, #4]
   b5590:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5592:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5594:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5596:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5598:	f7ff fa6e 	bl	b4a78 <strlen>
   b559c:	2200      	movs	r2, #0
   b559e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b55a2:	9b05      	ldr	r3, [sp, #20]
   b55a4:	9000      	str	r0, [sp, #0]
   b55a6:	462a      	mov	r2, r5
   b55a8:	211d      	movs	r1, #29
   b55aa:	4620      	mov	r0, r4
   b55ac:	f000 f816 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b55b0:	6923      	ldr	r3, [r4, #16]
   b55b2:	6163      	str	r3, [r4, #20]
            return true;
   b55b4:	e790      	b.n	b54d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b55b6:	4b08      	ldr	r3, [pc, #32]	; (b55d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b55b8:	9306      	str	r3, [sp, #24]
   b55ba:	f10c 0720 	add.w	r7, ip, #32
   b55be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b55c0:	ae07      	add	r6, sp, #28
   b55c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b55c4:	683b      	ldr	r3, [r7, #0]
   b55c6:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b55c8:	4642      	mov	r2, r8
   b55ca:	4673      	mov	r3, lr
   b55cc:	a906      	add	r1, sp, #24
   b55ce:	4660      	mov	r0, ip
   b55d0:	f003 fe9e 	bl	b9310 <_ZN9TCPClient7connectE9IPAddresstm>
   b55d4:	e7d9      	b.n	b558a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b55d6:	bf00      	nop
   b55d8:	000bcf90 	.word	0x000bcf90

000b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b55dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55e0:	b083      	sub	sp, #12
   b55e2:	af00      	add	r7, sp, #0
   b55e4:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b55e6:	6800      	ldr	r0, [r0, #0]
   b55e8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b55ea:	4688      	mov	r8, r1
   b55ec:	4616      	mov	r6, r2
   b55ee:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b55f0:	46eb      	mov	fp, sp
   b55f2:	f003 fe2b 	bl	b924c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b55f6:	2800      	cmp	r0, #0
   b55f8:	f000 8081 	beq.w	b56fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b55fc:	f1b8 0f1d 	cmp.w	r8, #29
   b5600:	d804      	bhi.n	b560c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5602:	4b4d      	ldr	r3, [pc, #308]	; (b5738 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5604:	fa23 f308 	lsr.w	r3, r3, r8
   b5608:	07db      	lsls	r3, r3, #31
   b560a:	d402      	bmi.n	b5612 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b560c:	7f63      	ldrb	r3, [r4, #29]
   b560e:	2b01      	cmp	r3, #1
   b5610:	d175      	bne.n	b56fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5612:	b946      	cbnz	r6, b5626 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5614:	8b66      	ldrh	r6, [r4, #26]
   b5616:	b936      	cbnz	r6, b5626 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5618:	8b23      	ldrh	r3, [r4, #24]
   b561a:	3301      	adds	r3, #1
   b561c:	b29b      	uxth	r3, r3
   b561e:	2b00      	cmp	r3, #0
   b5620:	d072      	beq.n	b5708 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b5622:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5624:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5626:	f1a8 030c 	sub.w	r3, r8, #12
   b562a:	2b08      	cmp	r3, #8
   b562c:	d816      	bhi.n	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b562e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b5632:	4293      	cmp	r3, r2
   b5634:	bf38      	it	cc
   b5636:	4613      	movcc	r3, r2
   b5638:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b563c:	f002 fbd4 	bl	b7de8 <_Z11BlynkMillisv>
   b5640:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b5644:	2800      	cmp	r0, #0
   b5646:	db61      	blt.n	b570c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b5648:	2100      	movs	r1, #0
   b564a:	4620      	mov	r0, r4
   b564c:	f7ff ff1e 	bl	b548c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b5650:	f002 fbca 	bl	b7de8 <_Z11BlynkMillisv>
   b5654:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b5658:	2800      	cmp	r0, #0
   b565a:	daf5      	bge.n	b5648 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b565c:	f1b9 0f00 	cmp.w	r9, #0
   b5660:	d05b      	beq.n	b571a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b5662:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b5664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b5666:	2a00      	cmp	r2, #0
   b5668:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b566a:	bf08      	it	eq
   b566c:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b566e:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b5672:	f10a 0307 	add.w	r3, sl, #7
   b5676:	f023 0307 	bic.w	r3, r3, #7
   b567a:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b567e:	4630      	mov	r0, r6
    hdr->type = cmd;
   b5680:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b5684:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b5688:	f002 fd8a 	bl	b81a0 <inet_htons>
    hdr->length = htons(length+length2);
   b568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b568e:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5692:	18e8      	adds	r0, r5, r3
   b5694:	b280      	uxth	r0, r0
   b5696:	f002 fd83 	bl	b81a0 <inet_htons>
   b569a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b569e:	f1b9 0f00 	cmp.w	r9, #0
   b56a2:	d03c      	beq.n	b571e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b56a4:	2d00      	cmp	r5, #0
   b56a6:	d03a      	beq.n	b571e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b56a8:	462a      	mov	r2, r5
   b56aa:	4649      	mov	r1, r9
   b56ac:	f10d 0005 	add.w	r0, sp, #5
   b56b0:	f004 fb75 	bl	b9d9e <memcpy>
        pos += length;
   b56b4:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b56b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b56b8:	b13b      	cbz	r3, b56ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b56ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b56bc:	b12b      	cbz	r3, b56ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b56be:	461a      	mov	r2, r3
   b56c0:	687b      	ldr	r3, [r7, #4]
   b56c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b56c4:	4418      	add	r0, r3
   b56c6:	f004 fb6a 	bl	b9d9e <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b56ca:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b56cc:	4555      	cmp	r5, sl
   b56ce:	d22a      	bcs.n	b5726 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b56d0:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b56d4:	687b      	ldr	r3, [r7, #4]
   b56d6:	6820      	ldr	r0, [r4, #0]
   b56d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b56dc:	bf28      	it	cs
   b56de:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b56e2:	1959      	adds	r1, r3, r5
   b56e4:	f003 fc65 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
   b56e8:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b56ea:	2000      	movs	r0, #0
   b56ec:	f002 fb7a 	bl	b7de4 <_Z10BlynkDelaym>
        if (w == 0) {
   b56f0:	b9be      	cbnz	r6, b5722 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b56f2:	6820      	ldr	r0, [r4, #0]
   b56f4:	f003 fee2 	bl	b94bc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b56f8:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b56fa:	f002 fb79 	bl	b7df0 <BlynkNoOpCbk>
}
   b56fe:	370c      	adds	r7, #12
   b5700:	46dd      	mov	sp, fp
   b5702:	46bd      	mov	sp, r7
   b5704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5708:	2301      	movs	r3, #1
   b570a:	e78a      	b.n	b5622 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b570c:	7f21      	ldrb	r1, [r4, #28]
   b570e:	2900      	cmp	r1, #0
   b5710:	d1a4      	bne.n	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5712:	4620      	mov	r0, r4
   b5714:	f7ff feba 	bl	b548c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5718:	e7a0      	b.n	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b571a:	2305      	movs	r3, #5
   b571c:	e7a2      	b.n	b5664 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b571e:	2005      	movs	r0, #5
   b5720:	e7c9      	b.n	b56b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b5722:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5724:	e7d2      	b.n	b56cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5726:	d003      	beq.n	b5730 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5728:	4620      	mov	r0, r4
   b572a:	f7ff fc0f 	bl	b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b572e:	e7e6      	b.n	b56fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b5730:	f002 fb5a 	bl	b7de8 <_Z11BlynkMillisv>
   b5734:	6120      	str	r0, [r4, #16]
   b5736:	e7e2      	b.n	b56fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5738:	20000045 	.word	0x20000045

000b573c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b573c:	b530      	push	{r4, r5, lr}
   b573e:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5740:	ab08      	add	r3, sp, #32
   b5742:	4604      	mov	r4, r0
   b5744:	9305      	str	r3, [sp, #20]
   b5746:	2500      	movs	r5, #0
   b5748:	2340      	movs	r3, #64	; 0x40
        add(key);
   b574a:	a805      	add	r0, sp, #20
   b574c:	490b      	ldr	r1, [pc, #44]	; (b577c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b574e:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b5752:	f7ff fb82 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        add(val);
   b5756:	a805      	add	r0, sp, #20
   b5758:	4909      	ldr	r1, [pc, #36]	; (b5780 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b575a:	f7ff fb7e 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b575e:	9b06      	ldr	r3, [sp, #24]
   b5760:	9302      	str	r3, [sp, #8]
   b5762:	9b05      	ldr	r3, [sp, #20]
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	2365      	movs	r3, #101	; 0x65
   b5768:	9300      	str	r3, [sp, #0]
   b576a:	462a      	mov	r2, r5
   b576c:	4b05      	ldr	r3, [pc, #20]	; (b5784 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b576e:	2111      	movs	r1, #17
   b5770:	4620      	mov	r0, r4
   b5772:	f7ff ff33 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b5776:	b019      	add	sp, #100	; 0x64
   b5778:	bd30      	pop	{r4, r5, pc}
   b577a:	bf00      	nop
   b577c:	000bbe67 	.word	0x000bbe67
   b5780:	000bbe6c 	.word	0x000bbe6c
   b5784:	000bbf54 	.word	0x000bbf54

000b5788 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   b5788:	b530      	push	{r4, r5, lr}
   b578a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b578e:	ab08      	add	r3, sp, #32
   b5790:	2400      	movs	r4, #0
   b5792:	4605      	mov	r5, r0
   b5794:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   b5796:	a805      	add	r0, sp, #20
   b5798:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b579c:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b57a0:	f7ff fb5b 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   b57a4:	9b06      	ldr	r3, [sp, #24]
   b57a6:	3b01      	subs	r3, #1
   b57a8:	9300      	str	r3, [sp, #0]
   b57aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b57ae:	9b05      	ldr	r3, [sp, #20]
   b57b0:	4622      	mov	r2, r4
   b57b2:	2140      	movs	r1, #64	; 0x40
   b57b4:	4628      	mov	r0, r5
   b57b6:	f7ff ff11 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b57ba:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b57be:	bd30      	pop	{r4, r5, pc}

000b57c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b57c0:	b570      	push	{r4, r5, r6, lr}
   b57c2:	ed2d 8b02 	vpush	{d8}
   b57c6:	eeb0 8a40 	vmov.f32	s16, s0
   b57ca:	eef0 8a60 	vmov.f32	s17, s1
   b57ce:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
   b57d2:	ab08      	add	r3, sp, #32
   b57d4:	2400      	movs	r4, #0
   b57d6:	4605      	mov	r5, r0
   b57d8:	460e      	mov	r6, r1
   b57da:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b57dc:	a805      	add	r0, sp, #20
   b57de:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b57e2:	4913      	ldr	r1, [pc, #76]	; (b5830 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   b57e4:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b57e8:	f7ff fb37 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b57ec:	4631      	mov	r1, r6
   b57ee:	a805      	add	r0, sp, #20
   b57f0:	f7ff fb50 	bl	b4e94 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   b57f4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   b57f8:	9805      	ldr	r0, [sp, #20]
   b57fa:	4a0e      	ldr	r2, [pc, #56]	; (b5834 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   b57fc:	1ac9      	subs	r1, r1, r3
   b57fe:	ed8d 8b00 	vstr	d8, [sp]
   b5802:	4418      	add	r0, r3
   b5804:	f002 fe90 	bl	b8528 <snprintf>
   b5808:	1c43      	adds	r3, r0, #1
   b580a:	9806      	ldr	r0, [sp, #24]
   b580c:	4403      	add	r3, r0
   b580e:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5810:	3b01      	subs	r3, #1
   b5812:	9300      	str	r3, [sp, #0]
   b5814:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5818:	9b05      	ldr	r3, [sp, #20]
   b581a:	4622      	mov	r2, r4
   b581c:	2114      	movs	r1, #20
   b581e:	4628      	mov	r0, r5
   b5820:	f7ff fedc 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5824:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b5828:	ecbd 8b02 	vpop	{d8}
   b582c:	bd70      	pop	{r4, r5, r6, pc}
   b582e:	bf00      	nop
   b5830:	000bbe7a 	.word	0x000bbe7a
   b5834:	000bbe7d 	.word	0x000bbe7d

000b5838 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b5838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b583c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5840:	ab08      	add	r3, sp, #32
   b5842:	2400      	movs	r4, #0
   b5844:	4605      	mov	r5, r0
   b5846:	460e      	mov	r6, r1
   b5848:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b584a:	a805      	add	r0, sp, #20
   b584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b5850:	4915      	ldr	r1, [pc, #84]	; (b58a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x70>)
    void virtualWrite(int pin, Args... values) {
   b5852:	ee10 8a10 	vmov	r8, s0
   b5856:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b585a:	f7ff fafe 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b585e:	a805      	add	r0, sp, #20
   b5860:	4631      	mov	r1, r6
   b5862:	f7ff fb17 	bl	b4e94 <_ZN10BlynkParam3addEi>
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   b5866:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
   b586a:	9b05      	ldr	r3, [sp, #20]
   b586c:	4640      	mov	r0, r8
   b586e:	1b8f      	subs	r7, r1, r6
   b5870:	441e      	add	r6, r3
   b5872:	f7fe fd39 	bl	b42e8 <__aeabi_f2d>
   b5876:	4a0d      	ldr	r2, [pc, #52]	; (b58ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x74>)
   b5878:	e9cd 0100 	strd	r0, r1, [sp]
   b587c:	4639      	mov	r1, r7
   b587e:	4630      	mov	r0, r6
   b5880:	f002 fe52 	bl	b8528 <snprintf>
   b5884:	1c43      	adds	r3, r0, #1
   b5886:	9806      	ldr	r0, [sp, #24]
   b5888:	4403      	add	r3, r0
   b588a:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b588c:	3b01      	subs	r3, #1
   b588e:	9300      	str	r3, [sp, #0]
   b5890:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5894:	9b05      	ldr	r3, [sp, #20]
   b5896:	4622      	mov	r2, r4
   b5898:	2114      	movs	r1, #20
   b589a:	4628      	mov	r0, r5
   b589c:	f7ff fe9e 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b58a0:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b58a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b58a8:	000bbe7a 	.word	0x000bbe7a
   b58ac:	000bbe83 	.word	0x000bbe83

000b58b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b58b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b58b6:	ab08      	add	r3, sp, #32
   b58b8:	2400      	movs	r4, #0
   b58ba:	4605      	mov	r5, r0
   b58bc:	460f      	mov	r7, r1
   b58be:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b58c0:	a805      	add	r0, sp, #20
   b58c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b58c6:	490e      	ldr	r1, [pc, #56]	; (b5900 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b58c8:	4616      	mov	r6, r2
   b58ca:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b58ce:	f7ff fac4 	bl	b4e5a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b58d2:	4639      	mov	r1, r7
   b58d4:	a805      	add	r0, sp, #20
   b58d6:	f7ff fadd 	bl	b4e94 <_ZN10BlynkParam3addEi>
        add(last);
   b58da:	4631      	mov	r1, r6
   b58dc:	a805      	add	r0, sp, #20
   b58de:	f7ff fad9 	bl	b4e94 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b58e2:	9b06      	ldr	r3, [sp, #24]
   b58e4:	3b01      	subs	r3, #1
   b58e6:	9300      	str	r3, [sp, #0]
   b58e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b58ec:	9b05      	ldr	r3, [sp, #20]
   b58ee:	4622      	mov	r2, r4
   b58f0:	2114      	movs	r1, #20
   b58f2:	4628      	mov	r0, r5
   b58f4:	f7ff fe72 	bl	b55dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b58f8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b58fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b58fe:	bf00      	nop
   b5900:	000bbe7a 	.word	0x000bbe7a

000b5904 <loop>:
{
   b5904:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   b5906:	48a7      	ldr	r0, [pc, #668]	; (b5ba4 <loop+0x2a0>)
  if (stoppingFirst) {
   b5908:	4ca7      	ldr	r4, [pc, #668]	; (b5ba8 <loop+0x2a4>)
{
   b590a:	b086      	sub	sp, #24
  display.loop();
   b590c:	f002 faf7 	bl	b7efe <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b5910:	48a6      	ldr	r0, [pc, #664]	; (b5bac <loop+0x2a8>)
   b5912:	2100      	movs	r1, #0
   b5914:	f7ff fdba 	bl	b548c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (stoppingFirst) {
   b5918:	7823      	ldrb	r3, [r4, #0]
   b591a:	b133      	cbz	r3, b592a <loop+0x26>
    startAnimation.stop();
   b591c:	48a4      	ldr	r0, [pc, #656]	; (b5bb0 <loop+0x2ac>)
   b591e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5922:	f7ff f9f1 	bl	b4d08 <_ZN5Timer4stopEj.isra.0>
    stoppingFirst = false;
   b5926:	2300      	movs	r3, #0
   b5928:	7023      	strb	r3, [r4, #0]
  if (accel.getSample(sample))
   b592a:	48a2      	ldr	r0, [pc, #648]	; (b5bb4 <loop+0x2b0>)
   b592c:	4669      	mov	r1, sp
   b592e:	f001 fc2b 	bl	b7188 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b5932:	b1f8      	cbz	r0, b5974 <loop+0x70>
    if (abs(sample.y - shakePreviousY) > shakeSensitivity || abs(sample.x - shakePreviousX) > shakeSensitivity)
   b5934:	4ba0      	ldr	r3, [pc, #640]	; (b5bb8 <loop+0x2b4>)
   b5936:	4ca1      	ldr	r4, [pc, #644]	; (b5bbc <loop+0x2b8>)
   b5938:	681a      	ldr	r2, [r3, #0]
   b593a:	6821      	ldr	r1, [r4, #0]
   b593c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   b5940:	4d9f      	ldr	r5, [pc, #636]	; (b5bc0 <loop+0x2bc>)
   b5942:	1a5b      	subs	r3, r3, r1
   b5944:	2b00      	cmp	r3, #0
   b5946:	bfb8      	it	lt
   b5948:	425b      	neglt	r3, r3
   b594a:	4293      	cmp	r3, r2
   b594c:	dc08      	bgt.n	b5960 <loop+0x5c>
   b594e:	f9bd 3000 	ldrsh.w	r3, [sp]
   b5952:	6829      	ldr	r1, [r5, #0]
   b5954:	1a5b      	subs	r3, r3, r1
   b5956:	2b00      	cmp	r3, #0
   b5958:	bfb8      	it	lt
   b595a:	425b      	neglt	r3, r3
   b595c:	429a      	cmp	r2, r3
   b595e:	da03      	bge.n	b5968 <loop+0x64>
      Blynk.logEvent(SHOCKNOTIF);
   b5960:	4998      	ldr	r1, [pc, #608]	; (b5bc4 <loop+0x2c0>)
   b5962:	4892      	ldr	r0, [pc, #584]	; (b5bac <loop+0x2a8>)
   b5964:	f7ff ff10 	bl	b5788 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cEEvRKT_>
    shakePreviousX = sample.x;
   b5968:	f9bd 3000 	ldrsh.w	r3, [sp]
   b596c:	602b      	str	r3, [r5, #0]
    shakePreviousY = sample.y;
   b596e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   b5972:	6023      	str	r3, [r4, #0]
  if (client.isConnected())
   b5974:	4894      	ldr	r0, [pc, #592]	; (b5bc8 <loop+0x2c4>)
   b5976:	f001 fdb9 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b597a:	2800      	cmp	r0, #0
   b597c:	f000 80a9 	beq.w	b5ad2 <loop+0x1ce>
    if (updateData)
   b5980:	4c92      	ldr	r4, [pc, #584]	; (b5bcc <loop+0x2c8>)
    client.loop();
   b5982:	4891      	ldr	r0, [pc, #580]	; (b5bc8 <loop+0x2c4>)
   b5984:	f001 ff89 	bl	b789a <_ZN4MQTT4loopEv>
    if (updateData)
   b5988:	7823      	ldrb	r3, [r4, #0]
   b598a:	b133      	cbz	r3, b599a <loop+0x96>
      client.publish("WeatherBox/GetData", "GetData");
   b598c:	4a90      	ldr	r2, [pc, #576]	; (b5bd0 <loop+0x2cc>)
   b598e:	4991      	ldr	r1, [pc, #580]	; (b5bd4 <loop+0x2d0>)
   b5990:	488d      	ldr	r0, [pc, #564]	; (b5bc8 <loop+0x2c4>)
   b5992:	f001 ff26 	bl	b77e2 <_ZN4MQTT7publishEPKcS1_>
      updateData = false;
   b5996:	2300      	movs	r3, #0
   b5998:	7023      	strb	r3, [r4, #0]
  if (digitalRead(BUTTONPIN) && !previousState)
   b599a:	2006      	movs	r0, #6
   b599c:	f004 f80a 	bl	b99b4 <digitalRead>
   b59a0:	4c8d      	ldr	r4, [pc, #564]	; (b5bd8 <loop+0x2d4>)
   b59a2:	2800      	cmp	r0, #0
   b59a4:	f000 80a4 	beq.w	b5af0 <loop+0x1ec>
   b59a8:	4a8c      	ldr	r2, [pc, #560]	; (b5bdc <loop+0x2d8>)
   b59aa:	7813      	ldrb	r3, [r2, #0]
   b59ac:	2b00      	cmp	r3, #0
   b59ae:	f040 809f 	bne.w	b5af0 <loop+0x1ec>
    OLEDdisplayInside = !OLEDdisplayInside;
   b59b2:	7823      	ldrb	r3, [r4, #0]
   b59b4:	f083 0301 	eor.w	r3, r3, #1
   b59b8:	7023      	strb	r3, [r4, #0]
    previousState = true;
   b59ba:	2301      	movs	r3, #1
   b59bc:	7013      	strb	r3, [r2, #0]
  if (!OLEDdisplayInside)
   b59be:	7823      	ldrb	r3, [r4, #0]
   b59c0:	2b00      	cmp	r3, #0
   b59c2:	f040 80a4 	bne.w	b5b0e <loop+0x20a>
    if (client.isConnected())
   b59c6:	4880      	ldr	r0, [pc, #512]	; (b5bc8 <loop+0x2c4>)
   b59c8:	f001 fd90 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b59cc:	2800      	cmp	r0, #0
   b59ce:	d07e      	beq.n	b5ace <loop+0x1ca>
      resetDisplay();
   b59d0:	f7ff fa84 	bl	b4edc <_Z12resetDisplayv>
      display.print("Temperature: ");
   b59d4:	4982      	ldr	r1, [pc, #520]	; (b5be0 <loop+0x2dc>)
   b59d6:	4873      	ldr	r0, [pc, #460]	; (b5ba4 <loop+0x2a0>)
   b59d8:	f003 f81e 	bl	b8a18 <_ZN5Print5printEPKc>
      display.print(oTemp);
   b59dc:	4b81      	ldr	r3, [pc, #516]	; (b5be4 <loop+0x2e0>)
   b59de:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b59e0:	2c00      	cmp	r4, #0
   b59e2:	f280 808e 	bge.w	b5b02 <loop+0x1fe>
            t = print('-');
   b59e6:	212d      	movs	r1, #45	; 0x2d
   b59e8:	486e      	ldr	r0, [pc, #440]	; (b5ba4 <loop+0x2a0>)
   b59ea:	f003 f819 	bl	b8a20 <_ZN5Print5printEc>
            val = -n;
   b59ee:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b59f0:	220a      	movs	r2, #10
   b59f2:	486c      	ldr	r0, [pc, #432]	; (b5ba4 <loop+0x2a0>)
      display.print(oWindSpeed);
   b59f4:	4e7c      	ldr	r6, [pc, #496]	; (b5be8 <loop+0x2e4>)
      display.print(oPrecipitation);
   b59f6:	4d7d      	ldr	r5, [pc, #500]	; (b5bec <loop+0x2e8>)
   b59f8:	f003 f82b 	bl	b8a52 <_ZN5Print11printNumberEmh>
      display.println("F");
   b59fc:	497c      	ldr	r1, [pc, #496]	; (b5bf0 <loop+0x2ec>)
   b59fe:	4869      	ldr	r0, [pc, #420]	; (b5ba4 <loop+0x2a0>)
   b5a00:	f003 f81d 	bl	b8a3e <_ZN5Print7printlnEPKc>
      display.print("Wind Speed: ");
   b5a04:	497b      	ldr	r1, [pc, #492]	; (b5bf4 <loop+0x2f0>)
   b5a06:	4867      	ldr	r0, [pc, #412]	; (b5ba4 <loop+0x2a0>)
   b5a08:	f003 f806 	bl	b8a18 <_ZN5Print5printEPKc>
      display.print(oWindSpeed);
   b5a0c:	ed96 0a00 	vldr	s0, [r6]
   b5a10:	4864      	ldr	r0, [pc, #400]	; (b5ba4 <loop+0x2a0>)
   b5a12:	2102      	movs	r1, #2
   b5a14:	f003 f904 	bl	b8c20 <_ZN5Print5printEfi>
      display.println("mph");
   b5a18:	4977      	ldr	r1, [pc, #476]	; (b5bf8 <loop+0x2f4>)
   b5a1a:	4862      	ldr	r0, [pc, #392]	; (b5ba4 <loop+0x2a0>)
   b5a1c:	f003 f80f 	bl	b8a3e <_ZN5Print7printlnEPKc>
      display.print("Chance for Rain: ");
   b5a20:	4976      	ldr	r1, [pc, #472]	; (b5bfc <loop+0x2f8>)
   b5a22:	4860      	ldr	r0, [pc, #384]	; (b5ba4 <loop+0x2a0>)
   b5a24:	f002 fff8 	bl	b8a18 <_ZN5Print5printEPKc>
      display.print(oPrecipitation);
   b5a28:	682c      	ldr	r4, [r5, #0]
        if (n < 0 && base == 10) {
   b5a2a:	2c00      	cmp	r4, #0
   b5a2c:	da6b      	bge.n	b5b06 <loop+0x202>
            t = print('-');
   b5a2e:	212d      	movs	r1, #45	; 0x2d
   b5a30:	485c      	ldr	r0, [pc, #368]	; (b5ba4 <loop+0x2a0>)
   b5a32:	f002 fff5 	bl	b8a20 <_ZN5Print5printEc>
            val = -n;
   b5a36:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5a38:	220a      	movs	r2, #10
   b5a3a:	485a      	ldr	r0, [pc, #360]	; (b5ba4 <loop+0x2a0>)
   b5a3c:	f003 f809 	bl	b8a52 <_ZN5Print11printNumberEmh>
      display.println("%");
   b5a40:	496f      	ldr	r1, [pc, #444]	; (b5c00 <loop+0x2fc>)
   b5a42:	4858      	ldr	r0, [pc, #352]	; (b5ba4 <loop+0x2a0>)
   b5a44:	f002 fffb 	bl	b8a3e <_ZN5Print7printlnEPKc>
      display.print("Humidity: ");
   b5a48:	496e      	ldr	r1, [pc, #440]	; (b5c04 <loop+0x300>)
   b5a4a:	4856      	ldr	r0, [pc, #344]	; (b5ba4 <loop+0x2a0>)
   b5a4c:	f002 ffe4 	bl	b8a18 <_ZN5Print5printEPKc>
      display.print(oHumidity);
   b5a50:	4b6d      	ldr	r3, [pc, #436]	; (b5c08 <loop+0x304>)
   b5a52:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   b5a54:	2c00      	cmp	r4, #0
   b5a56:	da58      	bge.n	b5b0a <loop+0x206>
            t = print('-');
   b5a58:	212d      	movs	r1, #45	; 0x2d
   b5a5a:	4852      	ldr	r0, [pc, #328]	; (b5ba4 <loop+0x2a0>)
   b5a5c:	f002 ffe0 	bl	b8a20 <_ZN5Print5printEc>
            val = -n;
   b5a60:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5a62:	220a      	movs	r2, #10
   b5a64:	484f      	ldr	r0, [pc, #316]	; (b5ba4 <loop+0x2a0>)
   b5a66:	f002 fff4 	bl	b8a52 <_ZN5Print11printNumberEmh>
      display.print("%");
   b5a6a:	4965      	ldr	r1, [pc, #404]	; (b5c00 <loop+0x2fc>)
   b5a6c:	484d      	ldr	r0, [pc, #308]	; (b5ba4 <loop+0x2a0>)
   b5a6e:	f002 ffd3 	bl	b8a18 <_ZN5Print5printEPKc>
      display.display();
   b5a72:	484c      	ldr	r0, [pc, #304]	; (b5ba4 <loop+0x2a0>)
   b5a74:	f001 fa0c 	bl	b6e90 <_ZN16Adafruit_SSD13067displayEv>
      Blynk.virtualWrite(VTEMPPIN, iTemperature * 9 / 5 + 32.0);
   b5a78:	4b64      	ldr	r3, [pc, #400]	; (b5c0c <loop+0x308>)
   b5a7a:	edd3 7a00 	vldr	s15, [r3]
   b5a7e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   b5a82:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5a86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   b5a8a:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b5a8e:	ee17 0a90 	vmov	r0, s15
   b5a92:	f7fe fc29 	bl	b42e8 <__aeabi_f2d>
   b5a96:	2200      	movs	r2, #0
   b5a98:	4b5d      	ldr	r3, [pc, #372]	; (b5c10 <loop+0x30c>)
   b5a9a:	f7fe fac7 	bl	b402c <__adddf3>
   b5a9e:	ec41 0b10 	vmov	d0, r0, r1
   b5aa2:	4842      	ldr	r0, [pc, #264]	; (b5bac <loop+0x2a8>)
   b5aa4:	2100      	movs	r1, #0
   b5aa6:	f7ff fe8b 	bl	b57c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
      Blynk.virtualWrite(VHUMIDITYPIN, iHumidity);
   b5aaa:	4b5a      	ldr	r3, [pc, #360]	; (b5c14 <loop+0x310>)
   b5aac:	483f      	ldr	r0, [pc, #252]	; (b5bac <loop+0x2a8>)
   b5aae:	ed93 0a00 	vldr	s0, [r3]
   b5ab2:	2101      	movs	r1, #1
   b5ab4:	f7ff fec0 	bl	b5838 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
      Blynk.virtualWrite(VWINDSPEED, oWindSpeed);
   b5ab8:	ed96 0a00 	vldr	s0, [r6]
   b5abc:	483b      	ldr	r0, [pc, #236]	; (b5bac <loop+0x2a8>)
   b5abe:	2102      	movs	r1, #2
   b5ac0:	f7ff feba 	bl	b5838 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
      Blynk.virtualWrite(VPRECIPITATION, oPrecipitation);
   b5ac4:	682a      	ldr	r2, [r5, #0]
    Blynk.virtualWrite(VPRECIPITATION, oPrecipitation);
   b5ac6:	4839      	ldr	r0, [pc, #228]	; (b5bac <loop+0x2a8>)
   b5ac8:	2103      	movs	r1, #3
   b5aca:	f7ff fef1 	bl	b58b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
   b5ace:	b006      	add	sp, #24
   b5ad0:	bd70      	pop	{r4, r5, r6, pc}
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b5ad2:	a802      	add	r0, sp, #8
   b5ad4:	f002 fca0 	bl	b8418 <spark_deviceID>
    client.connect(System.deviceID());
   b5ad8:	9902      	ldr	r1, [sp, #8]
   b5ada:	483b      	ldr	r0, [pc, #236]	; (b5bc8 <loop+0x2c4>)
   b5adc:	f001 fdf6 	bl	b76cc <_ZN4MQTT7connectEPKc>
   b5ae0:	a802      	add	r0, sp, #8
   b5ae2:	f003 f9c3 	bl	b8e6c <_ZN6StringD1Ev>
    client.subscribe("WeatherBox/PostData/+");
   b5ae6:	494c      	ldr	r1, [pc, #304]	; (b5c18 <loop+0x314>)
   b5ae8:	4837      	ldr	r0, [pc, #220]	; (b5bc8 <loop+0x2c4>)
   b5aea:	f002 f81e 	bl	b7b2a <_ZN4MQTT9subscribeEPKc>
   b5aee:	e754      	b.n	b599a <loop+0x96>
  else if (!digitalRead(BUTTONPIN))
   b5af0:	2006      	movs	r0, #6
   b5af2:	f003 ff5f 	bl	b99b4 <digitalRead>
   b5af6:	2800      	cmp	r0, #0
   b5af8:	f47f af61 	bne.w	b59be <loop+0xba>
    previousState = false;
   b5afc:	4b37      	ldr	r3, [pc, #220]	; (b5bdc <loop+0x2d8>)
   b5afe:	7018      	strb	r0, [r3, #0]
   b5b00:	e75d      	b.n	b59be <loop+0xba>
            val = n;
   b5b02:	4621      	mov	r1, r4
   b5b04:	e774      	b.n	b59f0 <loop+0xec>
   b5b06:	4621      	mov	r1, r4
   b5b08:	e796      	b.n	b5a38 <loop+0x134>
   b5b0a:	4621      	mov	r1, r4
   b5b0c:	e7a9      	b.n	b5a62 <loop+0x15e>
    resetDisplay();
   b5b0e:	f7ff f9e5 	bl	b4edc <_Z12resetDisplayv>
    display.print("Temperature: ");
   b5b12:	4933      	ldr	r1, [pc, #204]	; (b5be0 <loop+0x2dc>)
   b5b14:	4823      	ldr	r0, [pc, #140]	; (b5ba4 <loop+0x2a0>)
   b5b16:	f002 ff7f 	bl	b8a18 <_ZN5Print5printEPKc>
    display.print(iTemperature * 9 / 5 + 32.0);
   b5b1a:	4b3c      	ldr	r3, [pc, #240]	; (b5c0c <loop+0x308>)
   b5b1c:	edd3 7a00 	vldr	s15, [r3]
   b5b20:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   b5b24:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5b28:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   b5b2c:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b5b30:	ee17 0a90 	vmov	r0, s15
   b5b34:	f7fe fbd8 	bl	b42e8 <__aeabi_f2d>
   b5b38:	2200      	movs	r2, #0
   b5b3a:	4b35      	ldr	r3, [pc, #212]	; (b5c10 <loop+0x30c>)
   b5b3c:	f7fe fa76 	bl	b402c <__adddf3>
   b5b40:	ec41 0b10 	vmov	d0, r0, r1
   b5b44:	2102      	movs	r1, #2
   b5b46:	4817      	ldr	r0, [pc, #92]	; (b5ba4 <loop+0x2a0>)
   b5b48:	f003 f879 	bl	b8c3e <_ZN5Print5printEdi>
    display.println("F");
   b5b4c:	4928      	ldr	r1, [pc, #160]	; (b5bf0 <loop+0x2ec>)
   b5b4e:	4815      	ldr	r0, [pc, #84]	; (b5ba4 <loop+0x2a0>)
   b5b50:	f002 ff75 	bl	b8a3e <_ZN5Print7printlnEPKc>
    display.print("Humidity: ");
   b5b54:	492b      	ldr	r1, [pc, #172]	; (b5c04 <loop+0x300>)
   b5b56:	4813      	ldr	r0, [pc, #76]	; (b5ba4 <loop+0x2a0>)
   b5b58:	f002 ff5e 	bl	b8a18 <_ZN5Print5printEPKc>
    display.print(iHumidity);
   b5b5c:	4b2d      	ldr	r3, [pc, #180]	; (b5c14 <loop+0x310>)
   b5b5e:	4811      	ldr	r0, [pc, #68]	; (b5ba4 <loop+0x2a0>)
   b5b60:	ed93 0a00 	vldr	s0, [r3]
   b5b64:	2102      	movs	r1, #2
   b5b66:	f003 f85b 	bl	b8c20 <_ZN5Print5printEfi>
    display.print("%");
   b5b6a:	4925      	ldr	r1, [pc, #148]	; (b5c00 <loop+0x2fc>)
   b5b6c:	480d      	ldr	r0, [pc, #52]	; (b5ba4 <loop+0x2a0>)
   b5b6e:	f002 ff53 	bl	b8a18 <_ZN5Print5printEPKc>
    display.display();
   b5b72:	480c      	ldr	r0, [pc, #48]	; (b5ba4 <loop+0x2a0>)
   b5b74:	f001 f98c 	bl	b6e90 <_ZN16Adafruit_SSD13067displayEv>
    Blynk.virtualWrite(VTEMPPIN, oTemp);
   b5b78:	4b1a      	ldr	r3, [pc, #104]	; (b5be4 <loop+0x2e0>)
   b5b7a:	480c      	ldr	r0, [pc, #48]	; (b5bac <loop+0x2a8>)
   b5b7c:	681a      	ldr	r2, [r3, #0]
   b5b7e:	2100      	movs	r1, #0
   b5b80:	f7ff fe96 	bl	b58b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    Blynk.virtualWrite(VHUMIDITYPIN, oHumidity);
   b5b84:	4b20      	ldr	r3, [pc, #128]	; (b5c08 <loop+0x304>)
   b5b86:	4809      	ldr	r0, [pc, #36]	; (b5bac <loop+0x2a8>)
   b5b88:	681a      	ldr	r2, [r3, #0]
   b5b8a:	2101      	movs	r1, #1
   b5b8c:	f7ff fe90 	bl	b58b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    Blynk.virtualWrite(VWINDSPEED, oWindSpeed);
   b5b90:	4b15      	ldr	r3, [pc, #84]	; (b5be8 <loop+0x2e4>)
   b5b92:	4806      	ldr	r0, [pc, #24]	; (b5bac <loop+0x2a8>)
   b5b94:	ed93 0a00 	vldr	s0, [r3]
   b5b98:	2102      	movs	r1, #2
   b5b9a:	f7ff fe4d 	bl	b5838 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
    Blynk.virtualWrite(VPRECIPITATION, oPrecipitation);
   b5b9e:	4b13      	ldr	r3, [pc, #76]	; (b5bec <loop+0x2e8>)
   b5ba0:	681a      	ldr	r2, [r3, #0]
   b5ba2:	e790      	b.n	b5ac6 <loop+0x1c2>
   b5ba4:	2003e5d4 	.word	0x2003e5d4
   b5ba8:	2003e310 	.word	0x2003e310
   b5bac:	2003e504 	.word	0x2003e504
   b5bb0:	2003e69c 	.word	0x2003e69c
   b5bb4:	2003e560 	.word	0x2003e560
   b5bb8:	2003e30c 	.word	0x2003e30c
   b5bbc:	2003e308 	.word	0x2003e308
   b5bc0:	2003e304 	.word	0x2003e304
   b5bc4:	000bbe89 	.word	0x000bbe89
   b5bc8:	2003e574 	.word	0x2003e574
   b5bcc:	2003e311 	.word	0x2003e311
   b5bd0:	000bbe9f 	.word	0x000bbe9f
   b5bd4:	000bbe94 	.word	0x000bbe94
   b5bd8:	2003e300 	.word	0x2003e300
   b5bdc:	2003e698 	.word	0x2003e698
   b5be0:	000bbebd 	.word	0x000bbebd
   b5be4:	2003e690 	.word	0x2003e690
   b5be8:	2003e694 	.word	0x2003e694
   b5bec:	2003e68c 	.word	0x2003e68c
   b5bf0:	000bbe78 	.word	0x000bbe78
   b5bf4:	000bbecb 	.word	0x000bbecb
   b5bf8:	000bbed8 	.word	0x000bbed8
   b5bfc:	000bbedc 	.word	0x000bbedc
   b5c00:	000bbeee 	.word	0x000bbeee
   b5c04:	000bbef0 	.word	0x000bbef0
   b5c08:	2003e688 	.word	0x2003e688
   b5c0c:	2003e684 	.word	0x2003e684
   b5c10:	40400000 	.word	0x40400000
   b5c14:	2003e680 	.word	0x2003e680
   b5c18:	000bbea7 	.word	0x000bbea7

000b5c1c <setup>:
{
   b5c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.setup();
   b5c1e:	4c4d      	ldr	r4, [pc, #308]	; (b5d54 <setup+0x138>)
{
   b5c20:	b085      	sub	sp, #20
  pinMode(BUTTONPIN, INPUT_PULLDOWN);
   b5c22:	2103      	movs	r1, #3
   b5c24:	2006      	movs	r0, #6
   b5c26:	f003 fe9b 	bl	b9960 <pinMode>
  display.setup();
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	f002 f93e 	bl	b7eac <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b5c30:	4620      	mov	r0, r4
   b5c32:	f000 febf 	bl	b69b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5c36:	4620      	mov	r0, r4
   b5c38:	f001 f92a 	bl	b6e90 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   b5c3c:	2101      	movs	r1, #1
   b5c3e:	4620      	mov	r0, r4
   b5c40:	f000 fcff 	bl	b6642 <_ZN12Adafruit_GFX11setTextSizeEh>
   b5c44:	2200      	movs	r2, #0
   b5c46:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5c4a:	e9c4 2304 	strd	r2, r3, [r4, #16]
   b5c4e:	4668      	mov	r0, sp
   b5c50:	f002 fbe2 	bl	b8418 <spark_deviceID>
  client.connect(System.deviceID());
   b5c54:	9900      	ldr	r1, [sp, #0]
   b5c56:	4840      	ldr	r0, [pc, #256]	; (b5d58 <setup+0x13c>)
   b5c58:	f001 fd38 	bl	b76cc <_ZN4MQTT7connectEPKc>
   b5c5c:	4668      	mov	r0, sp
   b5c5e:	f003 f905 	bl	b8e6c <_ZN6StringD1Ev>
  startAnimation.start();
   b5c62:	483e      	ldr	r0, [pc, #248]	; (b5d5c <setup+0x140>)
   b5c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5c68:	f7ff f85b 	bl	b4d22 <_ZN5Timer5startEj.isra.0>
  display.print("Connecting");
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	493c      	ldr	r1, [pc, #240]	; (b5d60 <setup+0x144>)
  while (!client.isConnected()) {
   b5c70:	4c39      	ldr	r4, [pc, #228]	; (b5d58 <setup+0x13c>)
  display.print("Connecting");
   b5c72:	f002 fed1 	bl	b8a18 <_ZN5Print5printEPKc>
  iAmount++;
   b5c76:	4a3b      	ldr	r2, [pc, #236]	; (b5d64 <setup+0x148>)
   b5c78:	6813      	ldr	r3, [r2, #0]
   b5c7a:	3301      	adds	r3, #1
   b5c7c:	6013      	str	r3, [r2, #0]
  while (!client.isConnected()) {
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f001 fc34 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b5c84:	b950      	cbnz	r0, b5c9c <setup+0x80>
   b5c86:	4668      	mov	r0, sp
   b5c88:	f002 fbc6 	bl	b8418 <spark_deviceID>
    client.connect(System.deviceID());
   b5c8c:	9900      	ldr	r1, [sp, #0]
   b5c8e:	4620      	mov	r0, r4
   b5c90:	f001 fd1c 	bl	b76cc <_ZN4MQTT7connectEPKc>
   b5c94:	4668      	mov	r0, sp
   b5c96:	f003 f8e9 	bl	b8e6c <_ZN6StringD1Ev>
  while (!client.isConnected()) {
   b5c9a:	e7f0      	b.n	b5c7e <setup+0x62>
  client.subscribe("WeatherBox/PostData/+");
   b5c9c:	4932      	ldr	r1, [pc, #200]	; (b5d68 <setup+0x14c>)
   b5c9e:	482e      	ldr	r0, [pc, #184]	; (b5d58 <setup+0x13c>)
        this->authkey = auth;
   b5ca0:	4c32      	ldr	r4, [pc, #200]	; (b5d6c <setup+0x150>)
   b5ca2:	f001 ff42 	bl	b7b2a <_ZN4MQTT9subscribeEPKc>
  Wire.setSpeed(CLOCK_SPEED_100KHZ);
   b5ca6:	f003 fef1 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b5caa:	4931      	ldr	r1, [pc, #196]	; (b5d70 <setup+0x154>)
   b5cac:	f002 fd00 	bl	b86b0 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   b5cb0:	f003 feec 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b5cb4:	f002 fd00 	bl	b86b8 <_ZN7TwoWire5beginEv>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5cb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5cbc:	f002 f892 	bl	b7de4 <_Z10BlynkDelaym>
   b5cc0:	4b2c      	ldr	r3, [pc, #176]	; (b5d74 <setup+0x158>)
   b5cc2:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5cc4:	f002 f890 	bl	b7de8 <_Z11BlynkMillisv>
   b5cc8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b5ccc:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b5cce:	4a2a      	ldr	r2, [pc, #168]	; (b5d78 <setup+0x15c>)
   b5cd0:	635a      	str	r2, [r3, #52]	; 0x34
   b5cd2:	3808      	subs	r0, #8
   b5cd4:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b5cd8:	2250      	movs	r2, #80	; 0x50
   b5cda:	6160      	str	r0, [r4, #20]
   b5cdc:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b5cde:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5ce0:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5ce4:	6820      	ldr	r0, [r4, #0]
   b5ce6:	f003 fbe9 	bl	b94bc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5cea:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b5cec:	f002 f87c 	bl	b7de8 <_Z11BlynkMillisv>
   b5cf0:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5cf2:	7f63      	ldrb	r3, [r4, #29]
   b5cf4:	2b01      	cmp	r3, #1
   b5cf6:	d00c      	beq.n	b5d12 <setup+0xf6>
               (BlynkMillis() - started < timeout))
   b5cf8:	f002 f876 	bl	b7de8 <_Z11BlynkMillisv>
   b5cfc:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5cfe:	42b8      	cmp	r0, r7
   b5d00:	d804      	bhi.n	b5d0c <setup+0xf0>
            run();
   b5d02:	2100      	movs	r1, #0
   b5d04:	4620      	mov	r0, r4
   b5d06:	f7ff fbc1 	bl	b548c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5d0a:	e7f2      	b.n	b5cf2 <setup+0xd6>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5d0c:	7f63      	ldrb	r3, [r4, #29]
   b5d0e:	2b01      	cmp	r3, #1
   b5d10:	d1e8      	bne.n	b5ce4 <setup+0xc8>
  getSensorDataTimer.start();
   b5d12:	481a      	ldr	r0, [pc, #104]	; (b5d7c <setup+0x160>)
  while (!AHTSensor.begin())
   b5d14:	4c1a      	ldr	r4, [pc, #104]	; (b5d80 <setup+0x164>)
  getSensorDataTimer.start();
   b5d16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5d1a:	f7ff f802 	bl	b4d22 <_ZN5Timer5startEj.isra.0>
  getWeatherData.start();
   b5d1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5d22:	4818      	ldr	r0, [pc, #96]	; (b5d84 <setup+0x168>)
   b5d24:	f7fe fffd 	bl	b4d22 <_ZN5Timer5startEj.isra.0>
  LIS3DHConfig config;
   b5d28:	4668      	mov	r0, sp
   b5d2a:	f001 f9fb 	bl	b7124 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
   b5d2e:	2150      	movs	r1, #80	; 0x50
   b5d30:	4668      	mov	r0, sp
   b5d32:	f001 fa04 	bl	b713e <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
   b5d36:	4814      	ldr	r0, [pc, #80]	; (b5d88 <setup+0x16c>)
   b5d38:	4669      	mov	r1, sp
   b5d3a:	f001 fa4f 	bl	b71dc <_ZN6LIS3DH5setupER12LIS3DHConfig>
  while (!AHTSensor.begin())
   b5d3e:	f003 fea5 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b5d42:	4601      	mov	r1, r0
   b5d44:	4620      	mov	r0, r4
   b5d46:	f001 ff61 	bl	b7c0c <_ZN5AHT205beginER7TwoWire>
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	d0f7      	beq.n	b5d3e <setup+0x122>
}
   b5d4e:	b005      	add	sp, #20
   b5d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d52:	bf00      	nop
   b5d54:	2003e5d4 	.word	0x2003e5d4
   b5d58:	2003e574 	.word	0x2003e574
   b5d5c:	2003e69c 	.word	0x2003e69c
   b5d60:	000bbe49 	.word	0x000bbe49
   b5d64:	2003e67c 	.word	0x2003e67c
   b5d68:	000bbea7 	.word	0x000bbea7
   b5d6c:	2003e504 	.word	0x2003e504
   b5d70:	000186a0 	.word	0x000186a0
   b5d74:	000bbefb 	.word	0x000bbefb
   b5d78:	000bbf1c 	.word	0x000bbf1c
   b5d7c:	2003e644 	.word	0x2003e644
   b5d80:	2003e4f0 	.word	0x2003e4f0
   b5d84:	2003e660 	.word	0x2003e660
   b5d88:	2003e560 	.word	0x2003e560

000b5d8c <_GLOBAL__sub_I_Blynk>:
   b5d8c:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b5d8e:	4d2e      	ldr	r5, [pc, #184]	; (b5e48 <_GLOBAL__sub_I_Blynk+0xbc>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5d90:	4e2e      	ldr	r6, [pc, #184]	; (b5e4c <_GLOBAL__sub_I_Blynk+0xc0>)
   b5d92:	b086      	sub	sp, #24
   b5d94:	4628      	mov	r0, r5
   b5d96:	f003 fbdb 	bl	b9550 <_ZN9TCPClientC1Ev>
   b5d9a:	f105 001c 	add.w	r0, r5, #28
   b5d9e:	f002 fd05 	bl	b87ac <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5da2:	4b2b      	ldr	r3, [pc, #172]	; (b5e50 <_GLOBAL__sub_I_Blynk+0xc4>)
   b5da4:	2400      	movs	r4, #0
   b5da6:	e9c3 5400 	strd	r5, r4, [r3]
   b5daa:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5dae:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b5db2:	636c      	str	r4, [r5, #52]	; 0x34
   b5db4:	872c      	strh	r4, [r5, #56]	; 0x38
   b5db6:	619c      	str	r4, [r3, #24]
   b5db8:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b5dba:	4621      	mov	r1, r4
   b5dbc:	2001      	movs	r0, #1
   b5dbe:	f002 fb07 	bl	b83d0 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b5dc2:	f240 725b 	movw	r2, #1883	; 0x75b
   b5dc6:	4b23      	ldr	r3, [pc, #140]	; (b5e54 <_GLOBAL__sub_I_Blynk+0xc8>)
   b5dc8:	4923      	ldr	r1, [pc, #140]	; (b5e58 <_GLOBAL__sub_I_Blynk+0xcc>)
   b5dca:	9400      	str	r4, [sp, #0]
   b5dcc:	4823      	ldr	r0, [pc, #140]	; (b5e5c <_GLOBAL__sub_I_Blynk+0xd0>)
	    _M_manager = &_My_handler::_M_manager;
   b5dce:	4d24      	ldr	r5, [pc, #144]	; (b5e60 <_GLOBAL__sub_I_Blynk+0xd4>)
   b5dd0:	f001 fab0 	bl	b7334 <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b5dd4:	2107      	movs	r1, #7
   b5dd6:	4823      	ldr	r0, [pc, #140]	; (b5e64 <_GLOBAL__sub_I_Blynk+0xd8>)
   b5dd8:	f002 f83a 	bl	b7e50 <_ZN16OledWingAdafruitC1Ei>
    sfe_aht20_reg_reset = 0xBA,
    sfe_aht20_reg_initialize = 0xBE,
    sfe_aht20_reg_measure = 0xAC,
};

class AHT20
   b5ddc:	4b22      	ldr	r3, [pc, #136]	; (b5e68 <_GLOBAL__sub_I_Blynk+0xdc>)
   b5dde:	715c      	strb	r4, [r3, #5]
LIS3DHI2C accel(Wire, 0, WKP);
   b5de0:	f003 fe54 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b5de4:	4622      	mov	r2, r4
   b5de6:	4601      	mov	r1, r0
   b5de8:	2308      	movs	r3, #8
   b5dea:	4820      	ldr	r0, [pc, #128]	; (b5e6c <_GLOBAL__sub_I_Blynk+0xe0>)
   b5dec:	f001 fa52 	bl	b7294 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5df0:	4b1f      	ldr	r3, [pc, #124]	; (b5e70 <_GLOBAL__sub_I_Blynk+0xe4>)
   b5df2:	9302      	str	r3, [sp, #8]
Timer getWeatherData(30000, callback2, false);
   b5df4:	aa02      	add	r2, sp, #8
   b5df6:	4623      	mov	r3, r4
   b5df8:	f247 5130 	movw	r1, #30000	; 0x7530
   b5dfc:	481d      	ldr	r0, [pc, #116]	; (b5e74 <_GLOBAL__sub_I_Blynk+0xe8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5dfe:	9605      	str	r6, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5e00:	9504      	str	r5, [sp, #16]
   b5e02:	f7fe ffe1 	bl	b4dc8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5e06:	a802      	add	r0, sp, #8
   b5e08:	f7fe ffa8 	bl	b4d5c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5e0c:	4b1a      	ldr	r3, [pc, #104]	; (b5e78 <_GLOBAL__sub_I_Blynk+0xec>)
   b5e0e:	9302      	str	r3, [sp, #8]
Timer startAnimation(500, connectingAnimation, false);
   b5e10:	aa02      	add	r2, sp, #8
   b5e12:	4623      	mov	r3, r4
   b5e14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5e18:	4818      	ldr	r0, [pc, #96]	; (b5e7c <_GLOBAL__sub_I_Blynk+0xf0>)
	    _M_manager = &_My_handler::_M_manager;
   b5e1a:	e9cd 5604 	strd	r5, r6, [sp, #16]
   b5e1e:	f7fe ffd3 	bl	b4dc8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5e22:	a802      	add	r0, sp, #8
   b5e24:	f7fe ff9a 	bl	b4d5c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5e28:	4b15      	ldr	r3, [pc, #84]	; (b5e80 <_GLOBAL__sub_I_Blynk+0xf4>)
   b5e2a:	9302      	str	r3, [sp, #8]
Timer getSensorDataTimer(2000, getSensorData, false);
   b5e2c:	aa02      	add	r2, sp, #8
   b5e2e:	4623      	mov	r3, r4
   b5e30:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5e34:	4813      	ldr	r0, [pc, #76]	; (b5e84 <_GLOBAL__sub_I_Blynk+0xf8>)
	    _M_manager = &_My_handler::_M_manager;
   b5e36:	e9cd 5604 	strd	r5, r6, [sp, #16]
   b5e3a:	f7fe ffc5 	bl	b4dc8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5e3e:	a802      	add	r0, sp, #8
   b5e40:	f7fe ff8c 	bl	b4d5c <_ZNSt14_Function_baseD1Ev>
   b5e44:	b006      	add	sp, #24
   b5e46:	bd70      	pop	{r4, r5, r6, pc}
   b5e48:	2003e524 	.word	0x2003e524
   b5e4c:	000b4d05 	.word	0x000b4d05
   b5e50:	2003e504 	.word	0x2003e504
   b5e54:	000b4b75 	.word	0x000b4b75
   b5e58:	000bbf28 	.word	0x000bbf28
   b5e5c:	2003e574 	.word	0x2003e574
   b5e60:	000b4cf1 	.word	0x000b4cf1
   b5e64:	2003e5d4 	.word	0x2003e5d4
   b5e68:	2003e4f0 	.word	0x2003e4f0
   b5e6c:	2003e560 	.word	0x2003e560
   b5e70:	000b4b69 	.word	0x000b4b69
   b5e74:	2003e660 	.word	0x2003e660
   b5e78:	000b4f01 	.word	0x000b4f01
   b5e7c:	2003e69c 	.word	0x2003e69c
   b5e80:	000b4cc1 	.word	0x000b4cc1
   b5e84:	2003e644 	.word	0x2003e644

000b5e88 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e8c:	b085      	sub	sp, #20
   b5e8e:	461f      	mov	r7, r3
   b5e90:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5e94:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5e98:	eba8 0902 	sub.w	r9, r8, r2
   b5e9c:	eba7 0a01 	sub.w	sl, r7, r1
   b5ea0:	f1b9 0f00 	cmp.w	r9, #0
   b5ea4:	bfb8      	it	lt
   b5ea6:	f1c9 0900 	rsblt	r9, r9, #0
   b5eaa:	f1ba 0f00 	cmp.w	sl, #0
   b5eae:	bfb8      	it	lt
   b5eb0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5eb4:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5eb6:	4683      	mov	fp, r0
   b5eb8:	460c      	mov	r4, r1
   b5eba:	4615      	mov	r5, r2
    if (steep) {
   b5ebc:	dd04      	ble.n	b5ec8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5ebe:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5ec0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5ec2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5ec4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5ec6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5ec8:	42bc      	cmp	r4, r7
   b5eca:	dd05      	ble.n	b5ed8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5ecc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5ece:	4645      	mov	r5, r8
   b5ed0:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5ed2:	4622      	mov	r2, r4
   b5ed4:	463c      	mov	r4, r7
   b5ed6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5ed8:	1b3e      	subs	r6, r7, r4
   b5eda:	b2b2      	uxth	r2, r6
   b5edc:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5ede:	eba8 0205 	sub.w	r2, r8, r5
   b5ee2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5ee6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5eea:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5eee:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5ef2:	4545      	cmp	r5, r8
   b5ef4:	bfb4      	ite	lt
   b5ef6:	2201      	movlt	r2, #1
   b5ef8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5efc:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5efe:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5f00:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5f02:	42bc      	cmp	r4, r7
   b5f04:	dc1c      	bgt.n	b5f40 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5f06:	f8db 2000 	ldr.w	r2, [fp]
   b5f0a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5f0c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5f0e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5f12:	bfc7      	ittee	gt
   b5f14:	4629      	movgt	r1, r5
   b5f16:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5f18:	462a      	movle	r2, r5
   b5f1a:	4621      	movle	r1, r4
   b5f1c:	4658      	mov	r0, fp
   b5f1e:	47c0      	blx	r8
        }
        err -= dy;
   b5f20:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5f22:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5f24:	1ab6      	subs	r6, r6, r2
   b5f26:	b2b1      	uxth	r1, r6
   b5f28:	b236      	sxth	r6, r6
        if (err < 0) {
   b5f2a:	2e00      	cmp	r6, #0
   b5f2c:	da05      	bge.n	b5f3a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5f2e:	9a02      	ldr	r2, [sp, #8]
   b5f30:	4415      	add	r5, r2
            err += dx;
   b5f32:	9a00      	ldr	r2, [sp, #0]
   b5f34:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5f36:	b22d      	sxth	r5, r5
            err += dx;
   b5f38:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5f3a:	3401      	adds	r4, #1
   b5f3c:	b224      	sxth	r4, r4
   b5f3e:	e7e0      	b.n	b5f02 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5f40:	b005      	add	sp, #20
   b5f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5f46 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5f46:	4770      	bx	lr

000b5f48 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5f48:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5f4a:	6804      	ldr	r4, [r0, #0]
   b5f4c:	6924      	ldr	r4, [r4, #16]
   b5f4e:	46a4      	mov	ip, r4
}
   b5f50:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5f54:	4760      	bx	ip

000b5f56 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5f56:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5f58:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5f5a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5f5e:	9502      	str	r5, [sp, #8]
   b5f60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5f62:	46a4      	mov	ip, r4
}
   b5f64:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5f66:	4760      	bx	ip

000b5f68 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5f68:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5f6a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5f6c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5f70:	9502      	str	r5, [sp, #8]
   b5f72:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5f74:	46a4      	mov	ip, r4
}
   b5f76:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5f78:	4760      	bx	ip

000b5f7a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5f7a:	b470      	push	{r4, r5, r6}
   b5f7c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5f80:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5f84:	6804      	ldr	r4, [r0, #0]
   b5f86:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5f8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5f8c:	46a4      	mov	ip, r4
}
   b5f8e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5f90:	4760      	bx	ip

000b5f92 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5f92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5f96:	461c      	mov	r4, r3
    startWrite();
   b5f98:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5f9a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5f9e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5fa0:	4605      	mov	r5, r0
   b5fa2:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5fa4:	3c01      	subs	r4, #1
   b5fa6:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5fa8:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5faa:	b224      	sxth	r4, r4
    startWrite();
   b5fac:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5fae:	682b      	ldr	r3, [r5, #0]
   b5fb0:	f8cd 8004 	str.w	r8, [sp, #4]
   b5fb4:	9400      	str	r4, [sp, #0]
   b5fb6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5fb8:	4628      	mov	r0, r5
   b5fba:	463b      	mov	r3, r7
   b5fbc:	4632      	mov	r2, r6
   b5fbe:	4639      	mov	r1, r7
   b5fc0:	47a0      	blx	r4
    endWrite();
   b5fc2:	682b      	ldr	r3, [r5, #0]
   b5fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fc6:	4628      	mov	r0, r5
}
   b5fc8:	b002      	add	sp, #8
   b5fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5fce:	4718      	bx	r3

000b5fd0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5fd4:	461d      	mov	r5, r3
    startWrite();
   b5fd6:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5fd8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5fdc:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5fde:	4604      	mov	r4, r0
   b5fe0:	4617      	mov	r7, r2
   b5fe2:	460e      	mov	r6, r1
    startWrite();
   b5fe4:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5fe6:	e9cd 7800 	strd	r7, r8, [sp]
   b5fea:	6822      	ldr	r2, [r4, #0]
   b5fec:	1e6b      	subs	r3, r5, #1
   b5fee:	4433      	add	r3, r6
   b5ff0:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	b21b      	sxth	r3, r3
   b5ff6:	463a      	mov	r2, r7
   b5ff8:	4631      	mov	r1, r6
   b5ffa:	47a8      	blx	r5
    endWrite();
   b5ffc:	6823      	ldr	r3, [r4, #0]
   b5ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6000:	4620      	mov	r0, r4
}
   b6002:	b002      	add	sp, #8
   b6004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6008:	4718      	bx	r3

000b600a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b600a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b600e:	461e      	mov	r6, r3
    startWrite();
   b6010:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6012:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b6016:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6018:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b601c:	460c      	mov	r4, r1
   b601e:	4605      	mov	r5, r0
   b6020:	4617      	mov	r7, r2
    startWrite();
   b6022:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b6024:	4426      	add	r6, r4
   b6026:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b6028:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b602a:	da0b      	bge.n	b6044 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b602c:	f8cd 8000 	str.w	r8, [sp]
   b6030:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6034:	4621      	mov	r1, r4
   b6036:	464b      	mov	r3, r9
   b6038:	463a      	mov	r2, r7
   b603a:	4628      	mov	r0, r5
   b603c:	3401      	adds	r4, #1
   b603e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b6040:	b224      	sxth	r4, r4
   b6042:	e7f0      	b.n	b6026 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b6044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6046:	4628      	mov	r0, r5
}
   b6048:	b002      	add	sp, #8
   b604a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b604e:	4718      	bx	r3

000b6050 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6050:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6052:	6802      	ldr	r2, [r0, #0]
   b6054:	9101      	str	r1, [sp, #4]
   b6056:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b605a:	9100      	str	r1, [sp, #0]
   b605c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b605e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6062:	2200      	movs	r2, #0
   b6064:	4611      	mov	r1, r2
   b6066:	47a0      	blx	r4
}
   b6068:	b002      	add	sp, #8
   b606a:	bd10      	pop	{r4, pc}

000b606c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b606c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b6070:	4299      	cmp	r1, r3
        uint16_t color) {
   b6072:	4616      	mov	r6, r2
   b6074:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b6078:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b607c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b607e:	4680      	mov	r8, r0
   b6080:	460d      	mov	r5, r1
   b6082:	461c      	mov	r4, r3
    if(x0 == x1){
   b6084:	d113      	bne.n	b60ae <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6086:	42be      	cmp	r6, r7
   b6088:	bfc8      	it	gt
   b608a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b608c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6090:	bfc4      	itt	gt
   b6092:	463e      	movgt	r6, r7
   b6094:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6096:	1c7b      	adds	r3, r7, #1
   b6098:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b609a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b609c:	b21b      	sxth	r3, r3
   b609e:	4632      	mov	r2, r6
   b60a0:	4629      	mov	r1, r5
   b60a2:	4640      	mov	r0, r8
   b60a4:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b60a6:	b003      	add	sp, #12
   b60a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b60ac:	4760      	bx	ip
    } else if(y0 == y1){
   b60ae:	42be      	cmp	r6, r7
   b60b0:	d10a      	bne.n	b60c8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b60b2:	4299      	cmp	r1, r3
   b60b4:	bfc2      	ittt	gt
   b60b6:	460b      	movgt	r3, r1
   b60b8:	4625      	movgt	r5, r4
   b60ba:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b60bc:	1c63      	adds	r3, r4, #1
   b60be:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b60c2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b60c4:	1b5b      	subs	r3, r3, r5
   b60c6:	e7e9      	b.n	b609c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b60c8:	6953      	ldr	r3, [r2, #20]
   b60ca:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b60cc:	e9cd 7900 	strd	r7, r9, [sp]
   b60d0:	f8d8 3000 	ldr.w	r3, [r8]
   b60d4:	4640      	mov	r0, r8
   b60d6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b60d8:	4632      	mov	r2, r6
   b60da:	4623      	mov	r3, r4
   b60dc:	4629      	mov	r1, r5
   b60de:	47b8      	blx	r7
        endWrite();
   b60e0:	f8d8 3000 	ldr.w	r3, [r8]
   b60e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60e6:	4640      	mov	r0, r8
}
   b60e8:	b003      	add	sp, #12
   b60ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b60ee:	4718      	bx	r3

000b60f0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b60f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b60f4:	461d      	mov	r5, r3
    startWrite();
   b60f6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b60f8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b60fc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b60fe:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6102:	4604      	mov	r4, r0
   b6104:	460f      	mov	r7, r1
   b6106:	4616      	mov	r6, r2
    startWrite();
   b6108:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b610a:	6823      	ldr	r3, [r4, #0]
   b610c:	f8cd 8000 	str.w	r8, [sp]
   b6110:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6114:	4632      	mov	r2, r6
   b6116:	462b      	mov	r3, r5
   b6118:	4639      	mov	r1, r7
   b611a:	4620      	mov	r0, r4
   b611c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b611e:	6823      	ldr	r3, [r4, #0]
   b6120:	f8cd 8000 	str.w	r8, [sp]
   b6124:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b6128:	4432      	add	r2, r6
   b612a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b612e:	4639      	mov	r1, r7
   b6130:	462b      	mov	r3, r5
   b6132:	4620      	mov	r0, r4
   b6134:	b212      	sxth	r2, r2
   b6136:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b6138:	6823      	ldr	r3, [r4, #0]
   b613a:	f8cd 8000 	str.w	r8, [sp]
   b613e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6142:	4632      	mov	r2, r6
   b6144:	464b      	mov	r3, r9
   b6146:	4639      	mov	r1, r7
   b6148:	4620      	mov	r0, r4
   b614a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b614c:	1e6b      	subs	r3, r5, #1
   b614e:	19d9      	adds	r1, r3, r7
   b6150:	6823      	ldr	r3, [r4, #0]
   b6152:	f8cd 8000 	str.w	r8, [sp]
   b6156:	6a1d      	ldr	r5, [r3, #32]
   b6158:	4620      	mov	r0, r4
   b615a:	464b      	mov	r3, r9
   b615c:	4632      	mov	r2, r6
   b615e:	b209      	sxth	r1, r1
   b6160:	47a8      	blx	r5
    endWrite();
   b6162:	6823      	ldr	r3, [r4, #0]
   b6164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6166:	4620      	mov	r0, r4
}
   b6168:	b002      	add	sp, #8
   b616a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b616e:	4718      	bx	r3

000b6170 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b6170:	4770      	bx	lr

000b6172 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b6172:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6176:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b617a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b617c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b617e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6182:	bf59      	ittee	pl
   b6184:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6186:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6188:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b618a:	81c3      	strhmi	r3, [r0, #14]
}
   b618c:	4770      	bx	lr
	...

000b6190 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6190:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b6192:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6194:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6196:	4a07      	ldr	r2, [pc, #28]	; (b61b4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6198:	4d07      	ldr	r5, [pc, #28]	; (b61b8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b619a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b619c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b619e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b61a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b61a4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b61a8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b61aa:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b61ac:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b61ae:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b61b0:	6204      	str	r4, [r0, #32]
}
   b61b2:	bd30      	pop	{r4, r5, pc}
   b61b4:	01000101 	.word	0x01000101
   b61b8:	000bc4c4 	.word	0x000bc4c4

000b61bc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b61bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61c0:	b089      	sub	sp, #36	; 0x24
   b61c2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b61c6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b61c8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b61cc:	9304      	str	r3, [sp, #16]
   b61ce:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b61d2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b61d4:	9305      	str	r3, [sp, #20]
   b61d6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b61da:	4604      	mov	r4, r0
    startWrite();
   b61dc:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b61de:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b61e2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b61e6:	bf48      	it	mi
   b61e8:	f108 020e 	addmi.w	r2, r8, #14
   b61ec:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b61f0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b61f2:	4635      	mov	r5, r6
   b61f4:	9b03      	ldr	r3, [sp, #12]
   b61f6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b61f8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b61fc:	189a      	adds	r2, r3, r2
   b61fe:	9b05      	ldr	r3, [sp, #20]
   b6200:	428b      	cmp	r3, r1
   b6202:	b212      	sxth	r2, r2
   b6204:	dd27      	ble.n	b6256 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6206:	9b04      	ldr	r3, [sp, #16]
   b6208:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b620a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b620e:	9306      	str	r3, [sp, #24]
   b6210:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b6214:	4580      	cmp	r8, r0
   b6216:	fa1f f189 	uxth.w	r1, r9
   b621a:	dd17      	ble.n	b624c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b621c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b621e:	bf05      	ittet	eq
   b6220:	9b06      	ldreq	r3, [sp, #24]
   b6222:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b6224:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6226:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b6228:	bf18      	it	ne
   b622a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b622c:	062b      	lsls	r3, r5, #24
   b622e:	d50a      	bpl.n	b6246 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b6230:	9b02      	ldr	r3, [sp, #8]
   b6232:	6820      	ldr	r0, [r4, #0]
   b6234:	9207      	str	r2, [sp, #28]
   b6236:	4419      	add	r1, r3
   b6238:	6983      	ldr	r3, [r0, #24]
   b623a:	b209      	sxth	r1, r1
   b623c:	461f      	mov	r7, r3
   b623e:	4620      	mov	r0, r4
   b6240:	4653      	mov	r3, sl
   b6242:	47b8      	blx	r7
   b6244:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6246:	f109 0901 	add.w	r9, r9, #1
   b624a:	e7e1      	b.n	b6210 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b624c:	9b01      	ldr	r3, [sp, #4]
   b624e:	3301      	adds	r3, #1
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	445e      	add	r6, fp
   b6254:	e7ce      	b.n	b61f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6256:	6823      	ldr	r3, [r4, #0]
   b6258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b625a:	4620      	mov	r0, r4
}
   b625c:	b009      	add	sp, #36	; 0x24
   b625e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b6262:	4718      	bx	r3

000b6264 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6268:	ed2d 8b02 	vpush	{d8}
   b626c:	b091      	sub	sp, #68	; 0x44
   b626e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6270:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6272:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6276:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b627a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b627e:	9103      	str	r1, [sp, #12]
   b6280:	461f      	mov	r7, r3
   b6282:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6286:	9304      	str	r3, [sp, #16]
   b6288:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b628a:	2a00      	cmp	r2, #0
   b628c:	f040 80c5 	bne.w	b641a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6290:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6294:	428b      	cmp	r3, r1
   b6296:	f340 814c 	ble.w	b6532 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b629a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b629e:	42b3      	cmp	r3, r6
   b62a0:	f340 8147 	ble.w	b6532 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b62a4:	2306      	movs	r3, #6
   b62a6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b62aa:	2b00      	cmp	r3, #0
   b62ac:	f340 8141 	ble.w	b6532 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b62b0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b62b4:	2b00      	cmp	r3, #0
   b62b6:	f340 813c 	ble.w	b6532 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b62ba:	7f03      	ldrb	r3, [r0, #28]
   b62bc:	b91b      	cbnz	r3, b62c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b62be:	2faf      	cmp	r7, #175	; 0xaf
   b62c0:	bf84      	itt	hi
   b62c2:	3701      	addhi	r7, #1
   b62c4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b62c6:	f8db 3000 	ldr.w	r3, [fp]
   b62ca:	4658      	mov	r0, fp
   b62cc:	695b      	ldr	r3, [r3, #20]
   b62ce:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b62d0:	2205      	movs	r2, #5
   b62d2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b62d4:	2200      	movs	r2, #0
   b62d6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b62d8:	4a98      	ldr	r2, [pc, #608]	; (b653c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b62da:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b62de:	18d3      	adds	r3, r2, r3
   b62e0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b62e2:	b2b3      	uxth	r3, r6
   b62e4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b62e6:	9a05      	ldr	r2, [sp, #20]
   b62e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b62ea:	5c9b      	ldrb	r3, [r3, r2]
   b62ec:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b62ee:	b2ab      	uxth	r3, r5
   b62f0:	930b      	str	r3, [sp, #44]	; 0x2c
   b62f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b62f6:	9308      	str	r3, [sp, #32]
   b62f8:	9b03      	ldr	r3, [sp, #12]
   b62fa:	fb02 f905 	mul.w	r9, r2, r5
   b62fe:	fa19 f983 	uxtah	r9, r9, r3
   b6302:	fa0f f389 	sxth.w	r3, r9
   b6306:	ee08 3a10 	vmov	s16, r3
   b630a:	2308      	movs	r3, #8
   b630c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b630e:	9b03      	ldr	r3, [sp, #12]
   b6310:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6314:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b6318:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b631c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b631e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b6322:	07d2      	lsls	r2, r2, #31
   b6324:	d552      	bpl.n	b63cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b6326:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6328:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b632c:	d13e      	bne.n	b63ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b632e:	2c01      	cmp	r4, #1
   b6330:	d13c      	bne.n	b63ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b6332:	699b      	ldr	r3, [r3, #24]
   b6334:	9906      	ldr	r1, [sp, #24]
   b6336:	461f      	mov	r7, r3
   b6338:	9b04      	ldr	r3, [sp, #16]
   b633a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b633c:	b212      	sxth	r2, r2
   b633e:	4651      	mov	r1, sl
   b6340:	4658      	mov	r0, fp
   b6342:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6344:	f109 0301 	add.w	r3, r9, #1
   b6348:	fa4f f983 	sxtb.w	r9, r3
   b634c:	9b07      	ldr	r3, [sp, #28]
   b634e:	085b      	lsrs	r3, r3, #1
   b6350:	9307      	str	r3, [sp, #28]
   b6352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6354:	3b01      	subs	r3, #1
   b6356:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b635a:	930a      	str	r3, [sp, #40]	; 0x28
   b635c:	d1de      	bne.n	b631c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b635e:	9f05      	ldr	r7, [sp, #20]
   b6360:	3701      	adds	r7, #1
   b6362:	b27b      	sxtb	r3, r7
   b6364:	9305      	str	r3, [sp, #20]
   b6366:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6368:	3b01      	subs	r3, #1
   b636a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b636e:	9309      	str	r3, [sp, #36]	; 0x24
   b6370:	d1b9      	bne.n	b62e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b6372:	9b04      	ldr	r3, [sp, #16]
   b6374:	4543      	cmp	r3, r8
   b6376:	d00f      	beq.n	b6398 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6378:	2d01      	cmp	r5, #1
   b637a:	f8db 3000 	ldr.w	r3, [fp]
   b637e:	d13b      	bne.n	b63f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6380:	2c01      	cmp	r4, #1
   b6382:	d139      	bne.n	b63f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6384:	9908      	ldr	r1, [sp, #32]
   b6386:	f8cd 8000 	str.w	r8, [sp]
   b638a:	3105      	adds	r1, #5
   b638c:	6a1c      	ldr	r4, [r3, #32]
   b638e:	4632      	mov	r2, r6
   b6390:	2308      	movs	r3, #8
   b6392:	b209      	sxth	r1, r1
   b6394:	4658      	mov	r0, fp
   b6396:	47a0      	blx	r4
        endWrite();
   b6398:	f8db 3000 	ldr.w	r3, [fp]
   b639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b639e:	4658      	mov	r0, fp
}
   b63a0:	b011      	add	sp, #68	; 0x44
   b63a2:	ecbd 8b02 	vpop	{d8}
   b63a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b63aa:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b63ac:	9906      	ldr	r1, [sp, #24]
   b63ae:	fb14 f202 	smulbb	r2, r4, r2
   b63b2:	440a      	add	r2, r1
   b63b4:	9904      	ldr	r1, [sp, #16]
   b63b6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b63b8:	9400      	str	r4, [sp, #0]
   b63ba:	69db      	ldr	r3, [r3, #28]
   b63bc:	ee18 1a10 	vmov	r1, s16
   b63c0:	461f      	mov	r7, r3
   b63c2:	b212      	sxth	r2, r2
   b63c4:	462b      	mov	r3, r5
   b63c6:	4658      	mov	r0, fp
   b63c8:	47b8      	blx	r7
   b63ca:	e7bb      	b.n	b6344 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b63cc:	9a04      	ldr	r2, [sp, #16]
   b63ce:	4542      	cmp	r2, r8
   b63d0:	d0b8      	beq.n	b6344 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b63d2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b63d4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b63d8:	d107      	bne.n	b63ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b63da:	2c01      	cmp	r4, #1
   b63dc:	d105      	bne.n	b63ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b63de:	699b      	ldr	r3, [r3, #24]
   b63e0:	9906      	ldr	r1, [sp, #24]
   b63e2:	461f      	mov	r7, r3
   b63e4:	440a      	add	r2, r1
   b63e6:	4643      	mov	r3, r8
   b63e8:	e7a8      	b.n	b633c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b63ea:	9906      	ldr	r1, [sp, #24]
   b63ec:	f8cd 8004 	str.w	r8, [sp, #4]
   b63f0:	fb14 f202 	smulbb	r2, r4, r2
   b63f4:	440a      	add	r2, r1
   b63f6:	e7df      	b.n	b63b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b63f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b63fa:	f8cd 8004 	str.w	r8, [sp, #4]
   b63fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6402:	9a08      	ldr	r2, [sp, #32]
   b6404:	00e4      	lsls	r4, r4, #3
   b6406:	440a      	add	r2, r1
   b6408:	4611      	mov	r1, r2
   b640a:	9400      	str	r4, [sp, #0]
   b640c:	69dc      	ldr	r4, [r3, #28]
   b640e:	4632      	mov	r2, r6
   b6410:	462b      	mov	r3, r5
   b6412:	b209      	sxth	r1, r1
   b6414:	4658      	mov	r0, fp
   b6416:	47a0      	blx	r4
        endWrite();
   b6418:	e7be      	b.n	b6398 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b641a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b641c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b641e:	6812      	ldr	r2, [r2, #0]
   b6420:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6422:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6424:	b2ff      	uxtb	r7, r7
   b6426:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b642a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b642e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6430:	789a      	ldrb	r2, [r3, #2]
   b6432:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6434:	78da      	ldrb	r2, [r3, #3]
   b6436:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6438:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b643a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b643e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6442:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6444:	d801      	bhi.n	b644a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6446:	2c01      	cmp	r4, #1
   b6448:	d957      	bls.n	b64fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b644a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b644e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6450:	fa0f f38a 	sxth.w	r3, sl
   b6454:	9307      	str	r3, [sp, #28]
        startWrite();
   b6456:	f8db 3000 	ldr.w	r3, [fp]
   b645a:	4658      	mov	r0, fp
   b645c:	695b      	ldr	r3, [r3, #20]
   b645e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6460:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6462:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6466:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6468:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b646c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b646e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6470:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6474:	429f      	cmp	r7, r3
   b6476:	d28f      	bcs.n	b6398 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6478:	9b07      	ldr	r3, [sp, #28]
   b647a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b647c:	443b      	add	r3, r7
   b647e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6482:	2200      	movs	r2, #0
   b6484:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6488:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b648a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b648e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6492:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6496:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6498:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b649a:	9905      	ldr	r1, [sp, #20]
   b649c:	4291      	cmp	r1, r2
   b649e:	d241      	bcs.n	b6524 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b64a0:	1c5a      	adds	r2, r3, #1
   b64a2:	b2d2      	uxtb	r2, r2
   b64a4:	075b      	lsls	r3, r3, #29
   b64a6:	920d      	str	r2, [sp, #52]	; 0x34
   b64a8:	d107      	bne.n	b64ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b64aa:	9b06      	ldr	r3, [sp, #24]
   b64ac:	9906      	ldr	r1, [sp, #24]
   b64ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b64b0:	3301      	adds	r3, #1
   b64b2:	b29b      	uxth	r3, r3
   b64b4:	f812 9001 	ldrb.w	r9, [r2, r1]
   b64b8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b64ba:	f019 0f80 	tst.w	r9, #128	; 0x80
   b64be:	d012      	beq.n	b64e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b64c0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b64c2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b64c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b64ca:	d11a      	bne.n	b6502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b64cc:	2c01      	cmp	r4, #1
   b64ce:	d118      	bne.n	b6502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b64d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b64d2:	699b      	ldr	r3, [r3, #24]
   b64d4:	4411      	add	r1, r2
   b64d6:	9a05      	ldr	r2, [sp, #20]
   b64d8:	4411      	add	r1, r2
   b64da:	461e      	mov	r6, r3
   b64dc:	4652      	mov	r2, sl
   b64de:	9b04      	ldr	r3, [sp, #16]
   b64e0:	b209      	sxth	r1, r1
   b64e2:	4658      	mov	r0, fp
   b64e4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b64e6:	9e05      	ldr	r6, [sp, #20]
   b64e8:	3601      	adds	r6, #1
   b64ea:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b64ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b64f0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b64f2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b64f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b64f8:	e7ce      	b.n	b6498 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b64fa:	2300      	movs	r3, #0
   b64fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6500:	e7a9      	b.n	b6456 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6502:	9805      	ldr	r0, [sp, #20]
   b6504:	9a08      	ldr	r2, [sp, #32]
   b6506:	4402      	add	r2, r0
   b6508:	fb02 1105 	mla	r1, r2, r5, r1
   b650c:	9a04      	ldr	r2, [sp, #16]
   b650e:	e9cd 4200 	strd	r4, r2, [sp]
   b6512:	69db      	ldr	r3, [r3, #28]
   b6514:	ee18 2a10 	vmov	r2, s16
   b6518:	461e      	mov	r6, r3
   b651a:	b209      	sxth	r1, r1
   b651c:	462b      	mov	r3, r5
   b651e:	4658      	mov	r0, fp
   b6520:	47b0      	blx	r6
   b6522:	e7e0      	b.n	b64e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6524:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b6526:	3701      	adds	r7, #1
   b6528:	4498      	add	r8, r3
   b652a:	fa5f f888 	uxtb.w	r8, r8
   b652e:	b2ff      	uxtb	r7, r7
   b6530:	e79f      	b.n	b6472 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b6532:	b011      	add	sp, #68	; 0x44
   b6534:	ecbd 8b02 	vpop	{d8}
   b6538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b653c:	000bbfbb 	.word	0x000bbfbb

000b6540 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b6540:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b6542:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6544:	b085      	sub	sp, #20
   b6546:	4604      	mov	r4, r0
   b6548:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b654a:	2a00      	cmp	r2, #0
   b654c:	d134      	bne.n	b65b8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b654e:	290a      	cmp	r1, #10
   b6550:	d108      	bne.n	b6564 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b6552:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6554:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6556:	7e42      	ldrb	r2, [r0, #25]
   b6558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b655c:	8263      	strh	r3, [r4, #18]
}
   b655e:	2001      	movs	r0, #1
   b6560:	b005      	add	sp, #20
   b6562:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6564:	290d      	cmp	r1, #13
   b6566:	d0fa      	beq.n	b655e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6568:	7ee1      	ldrb	r1, [r4, #27]
   b656a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b656c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b656e:	b171      	cbz	r1, b658e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6570:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6574:	2106      	movs	r1, #6
   b6576:	fb11 6100 	smlabb	r1, r1, r0, r6
   b657a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b657e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6580:	bfc1      	itttt	gt
   b6582:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6586:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6588:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b658c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b658e:	8ae2      	ldrh	r2, [r4, #22]
   b6590:	9201      	str	r2, [sp, #4]
   b6592:	8aa2      	ldrh	r2, [r4, #20]
   b6594:	9200      	str	r2, [sp, #0]
   b6596:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b659a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b659e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b65a2:	4620      	mov	r0, r4
   b65a4:	f7ff fe5e 	bl	b6264 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b65a8:	7e23      	ldrb	r3, [r4, #24]
   b65aa:	8a22      	ldrh	r2, [r4, #16]
   b65ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b65b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b65b4:	8223      	strh	r3, [r4, #16]
   b65b6:	e7d2      	b.n	b655e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b65b8:	290a      	cmp	r1, #10
   b65ba:	d107      	bne.n	b65cc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b65bc:	2300      	movs	r3, #0
   b65be:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b65c0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b65c2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b65c4:	8a43      	ldrh	r3, [r0, #18]
   b65c6:	fb01 3302 	mla	r3, r1, r2, r3
   b65ca:	e7c7      	b.n	b655c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b65cc:	290d      	cmp	r1, #13
   b65ce:	d0c6      	beq.n	b655e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b65d0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b65d2:	42a9      	cmp	r1, r5
   b65d4:	d3c3      	bcc.n	b655e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b65d6:	7a51      	ldrb	r1, [r2, #9]
   b65d8:	4299      	cmp	r1, r3
   b65da:	d3c0      	bcc.n	b655e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b65dc:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b65de:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b65e0:	b2ed      	uxtb	r5, r5
   b65e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b65e6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b65e8:	b328      	cbz	r0, b6636 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b65ea:	78e9      	ldrb	r1, [r5, #3]
   b65ec:	b319      	cbz	r1, b6636 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b65ee:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b65f0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b65f2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b65f4:	b191      	cbz	r1, b661c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b65f6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b65fa:	4408      	add	r0, r1
   b65fc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6600:	fb06 1100 	mla	r1, r6, r0, r1
   b6604:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6608:	4281      	cmp	r1, r0
   b660a:	dd07      	ble.n	b661c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b660c:	2000      	movs	r0, #0
   b660e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6610:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6614:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6616:	fb02 1207 	mla	r2, r2, r7, r1
   b661a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b661c:	8ae2      	ldrh	r2, [r4, #22]
   b661e:	9201      	str	r2, [sp, #4]
   b6620:	8aa2      	ldrh	r2, [r4, #20]
   b6622:	9200      	str	r2, [sp, #0]
   b6624:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6628:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b662c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6630:	4620      	mov	r0, r4
   b6632:	f7ff fe17 	bl	b6264 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6636:	7929      	ldrb	r1, [r5, #4]
   b6638:	7e22      	ldrb	r2, [r4, #24]
   b663a:	8a23      	ldrh	r3, [r4, #16]
   b663c:	fb01 3302 	mla	r3, r1, r2, r3
   b6640:	e7b8      	b.n	b65b4 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6642 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6642:	2901      	cmp	r1, #1
   b6644:	bf38      	it	cc
   b6646:	2101      	movcc	r1, #1
   b6648:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b664a:	7641      	strb	r1, [r0, #25]
}
   b664c:	4770      	bx	lr

000b664e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b664e:	4770      	bx	lr

000b6650 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6650:	b510      	push	{r4, lr}
  }
   b6652:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6654:	4604      	mov	r4, r0
  }
   b6656:	f7fe fa70 	bl	b4b3a <_ZdlPvj>
   b665a:	4620      	mov	r0, r4
   b665c:	bd10      	pop	{r4, pc}

000b665e <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b665e:	b40e      	push	{r1, r2, r3}
   b6660:	b503      	push	{r0, r1, lr}
   b6662:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b6664:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6666:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b666a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b666c:	f002 faea 	bl	b8c44 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b6670:	b002      	add	sp, #8
   b6672:	f85d eb04 	ldr.w	lr, [sp], #4
   b6676:	b003      	add	sp, #12
   b6678:	4770      	bx	lr
	...

000b667c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b667c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b667e:	4604      	mov	r4, r0
   b6680:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6682:	7922      	ldrb	r2, [r4, #4]
   b6684:	68a3      	ldr	r3, [r4, #8]
   b6686:	b132      	cbz	r2, b6696 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6688:	b9a3      	cbnz	r3, b66b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b668a:	490b      	ldr	r1, [pc, #44]	; (b66b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b668c:	b002      	add	sp, #8
   b668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6692:	f002 b9c1 	b.w	b8a18 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6696:	4a09      	ldr	r2, [pc, #36]	; (b66bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6698:	7b26      	ldrb	r6, [r4, #12]
   b669a:	4d09      	ldr	r5, [pc, #36]	; (b66c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b669c:	4909      	ldr	r1, [pc, #36]	; (b66c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b669e:	7b64      	ldrb	r4, [r4, #13]
   b66a0:	2e01      	cmp	r6, #1
   b66a2:	bf18      	it	ne
   b66a4:	4629      	movne	r1, r5
   b66a6:	e9cd 1400 	strd	r1, r4, [sp]
   b66aa:	4907      	ldr	r1, [pc, #28]	; (b66c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b66ac:	f7ff ffd7 	bl	b665e <_ZN5Print6printfEPKcz>
  }
   b66b0:	b002      	add	sp, #8
   b66b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b66b4:	4a05      	ldr	r2, [pc, #20]	; (b66cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b66b6:	e7ef      	b.n	b6698 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b66b8:	000bc525 	.word	0x000bc525
   b66bc:	000bbed7 	.word	0x000bbed7
   b66c0:	000bc521 	.word	0x000bc521
   b66c4:	000bc51d 	.word	0x000bc51d
   b66c8:	000bc53b 	.word	0x000bc53b
   b66cc:	000bc514 	.word	0x000bc514

000b66d0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b66d0:	b510      	push	{r4, lr}
   b66d2:	4b04      	ldr	r3, [pc, #16]	; (b66e4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b66d4:	6003      	str	r3, [r0, #0]
   b66d6:	4604      	mov	r4, r0
  if(buffer) {
   b66d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b66da:	b108      	cbz	r0, b66e0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b66dc:	f001 ff14 	bl	b8508 <free>
    buffer = NULL;
  }
}
   b66e0:	4620      	mov	r0, r4
   b66e2:	bd10      	pop	{r4, pc}
   b66e4:	000bca14 	.word	0x000bca14

000b66e8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b66e8:	b510      	push	{r4, lr}
   b66ea:	4604      	mov	r4, r0
}
   b66ec:	f7ff fff0 	bl	b66d0 <_ZN16Adafruit_SSD1306D1Ev>
   b66f0:	4620      	mov	r0, r4
   b66f2:	2150      	movs	r1, #80	; 0x50
   b66f4:	f7fe fa21 	bl	b4b3a <_ZdlPvj>
   b66f8:	4620      	mov	r0, r4
   b66fa:	bd10      	pop	{r4, pc}

000b66fc <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b66fc:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b66fe:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6700:	db4b      	blt.n	b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6702:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6706:	428c      	cmp	r4, r1
   b6708:	dd47      	ble.n	b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b670a:	2a00      	cmp	r2, #0
   b670c:	db45      	blt.n	b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b670e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6712:	4294      	cmp	r4, r2
   b6714:	dd41      	ble.n	b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6716:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6718:	2c02      	cmp	r4, #2
   b671a:	d01f      	beq.n	b675c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b671c:	2c03      	cmp	r4, #3
   b671e:	d026      	beq.n	b676e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6720:	2c01      	cmp	r4, #1
   b6722:	d104      	bne.n	b672e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6724:	8904      	ldrh	r4, [r0, #8]
   b6726:	43d2      	mvns	r2, r2
   b6728:	4414      	add	r4, r2
      break;
   b672a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b672c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b672e:	2b01      	cmp	r3, #1
   b6730:	d023      	beq.n	b677a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6732:	2b02      	cmp	r3, #2
   b6734:	d032      	beq.n	b679c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6736:	bb83      	cbnz	r3, b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6738:	2a00      	cmp	r2, #0
   b673a:	4613      	mov	r3, r2
   b673c:	8904      	ldrh	r4, [r0, #8]
   b673e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6740:	bfb8      	it	lt
   b6742:	1dd3      	addlt	r3, r2, #7
   b6744:	10db      	asrs	r3, r3, #3
   b6746:	fb13 1104 	smlabb	r1, r3, r4, r1
   b674a:	f002 0207 	and.w	r2, r2, #7
   b674e:	2301      	movs	r3, #1
   b6750:	4093      	lsls	r3, r2
   b6752:	5c42      	ldrb	r2, [r0, r1]
   b6754:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6758:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b675a:	e01e      	b.n	b679a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b675c:	8904      	ldrh	r4, [r0, #8]
   b675e:	3c01      	subs	r4, #1
   b6760:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6762:	8944      	ldrh	r4, [r0, #10]
   b6764:	43d2      	mvns	r2, r2
   b6766:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6768:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b676a:	b212      	sxth	r2, r2
      break;
   b676c:	e7df      	b.n	b672e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b676e:	8944      	ldrh	r4, [r0, #10]
   b6770:	3c01      	subs	r4, #1
   b6772:	1a64      	subs	r4, r4, r1
      break;
   b6774:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6776:	b222      	sxth	r2, r4
      break;
   b6778:	e7d9      	b.n	b672e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b677a:	2a00      	cmp	r2, #0
   b677c:	8904      	ldrh	r4, [r0, #8]
   b677e:	4613      	mov	r3, r2
   b6780:	bfb8      	it	lt
   b6782:	1dd3      	addlt	r3, r2, #7
   b6784:	10db      	asrs	r3, r3, #3
   b6786:	fb13 1104 	smlabb	r1, r3, r4, r1
   b678a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b678c:	f002 0007 	and.w	r0, r2, #7
   b6790:	2201      	movs	r2, #1
   b6792:	4082      	lsls	r2, r0
   b6794:	5c58      	ldrb	r0, [r3, r1]
   b6796:	4302      	orrs	r2, r0
   b6798:	545a      	strb	r2, [r3, r1]
}
   b679a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b679c:	2a00      	cmp	r2, #0
   b679e:	4613      	mov	r3, r2
   b67a0:	8904      	ldrh	r4, [r0, #8]
   b67a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b67a4:	bfb8      	it	lt
   b67a6:	1dd3      	addlt	r3, r2, #7
   b67a8:	10db      	asrs	r3, r3, #3
   b67aa:	fb13 1104 	smlabb	r1, r3, r4, r1
   b67ae:	f002 0207 	and.w	r2, r2, #7
   b67b2:	2301      	movs	r3, #1
   b67b4:	fa03 f202 	lsl.w	r2, r3, r2
   b67b8:	5c43      	ldrb	r3, [r0, r1]
   b67ba:	405a      	eors	r2, r3
   b67bc:	e7cc      	b.n	b6758 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b67c0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b67c0:	b570      	push	{r4, r5, r6, lr}
   b67c2:	4604      	mov	r4, r0
   b67c4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b67c6:	2600      	movs	r6, #0
   b67c8:	f7ff fce2 	bl	b6190 <_ZN12Adafruit_GFXC1Ess>
   b67cc:	4b11      	ldr	r3, [pc, #68]	; (b6814 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b67ce:	6023      	str	r3, [r4, #0]
   b67d0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b67d2:	b915      	cbnz	r5, b67da <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b67d4:	f003 f95a 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b67d8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b67da:	23ff      	movs	r3, #255	; 0xff
   b67dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b67e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b67e4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b67e8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b67ec:	4b0a      	ldr	r3, [pc, #40]	; (b6818 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b67ee:	63a3      	str	r3, [r4, #56]	; 0x38
   b67f0:	2301      	movs	r3, #1
   b67f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b67f6:	9b05      	ldr	r3, [sp, #20]
   b67f8:	64a3      	str	r3, [r4, #72]	; 0x48
   b67fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b67fe:	9b06      	ldr	r3, [sp, #24]
   b6800:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6802:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6806:	6426      	str	r6, [r4, #64]	; 0x40
   b6808:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b680c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b680e:	4620      	mov	r0, r4
   b6810:	bd70      	pop	{r4, r5, r6, pc}
   b6812:	bf00      	nop
   b6814:	000bca14 	.word	0x000bca14
   b6818:	000bc560 	.word	0x000bc560

000b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b681e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6820:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6822:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6824:	b190      	cbz	r0, b684c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6826:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b682a:	f001 ff7b 	bl	b8724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b682e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6830:	6803      	ldr	r3, [r0, #0]
   b6832:	2100      	movs	r1, #0
   b6834:	689b      	ldr	r3, [r3, #8]
   b6836:	4798      	blx	r3
    WIRE_WRITE(c);
   b6838:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b683a:	6803      	ldr	r3, [r0, #0]
   b683c:	4629      	mov	r1, r5
   b683e:	689b      	ldr	r3, [r3, #8]
   b6840:	4798      	blx	r3
    wire->endTransmission();
   b6842:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6848:	f001 bf73 	b.w	b8732 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b684c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6850:	4601      	mov	r1, r0
   b6852:	b298      	uxth	r0, r3
   b6854:	f003 f895 	bl	b9982 <digitalWrite>
  if(spi) {
   b6858:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b685a:	b120      	cbz	r0, b6866 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b685c:	4629      	mov	r1, r5
}
   b685e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6862:	f002 bad3 	b.w	b8e0c <_ZN8SPIClass8transferEh>
   b6866:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6868:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b686a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b686e:	ea05 0107 	and.w	r1, r5, r7
   b6872:	b280      	uxth	r0, r0
   b6874:	f003 f885 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6878:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b687c:	2101      	movs	r1, #1
   b687e:	b280      	uxth	r0, r0
   b6880:	f003 f87f 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6884:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6888:	2100      	movs	r1, #0
   b688a:	b280      	uxth	r0, r0
   b688c:	f003 f879 	bl	b9982 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6890:	3e01      	subs	r6, #1
   b6892:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6896:	d1e8      	bne.n	b686a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b689a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b689a:	b538      	push	{r3, r4, r5, lr}
   b689c:	4604      	mov	r4, r0
  TRANSACTION_START
   b689e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b68a0:	460d      	mov	r5, r1
  TRANSACTION_START
   b68a2:	b180      	cbz	r0, b68c6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b68a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b68a6:	f001 ff03 	bl	b86b0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b68aa:	2d00      	cmp	r5, #0
   b68ac:	4620      	mov	r0, r4
   b68ae:	bf14      	ite	ne
   b68b0:	21a7      	movne	r1, #167	; 0xa7
   b68b2:	21a6      	moveq	r1, #166	; 0xa6
   b68b4:	f7ff ffb2 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b68b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b68ba:	b188      	cbz	r0, b68e0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b68bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b68be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b68c2:	f001 bef5 	b.w	b86b0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b68c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b68c8:	b118      	cbz	r0, b68d2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b68ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b68ce:	f002 fa2f 	bl	b8d30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b68d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b68d6:	2100      	movs	r1, #0
   b68d8:	b280      	uxth	r0, r0
   b68da:	f003 f852 	bl	b9982 <digitalWrite>
   b68de:	e7e4      	b.n	b68aa <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b68e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b68e4:	2101      	movs	r1, #1
   b68e6:	b280      	uxth	r0, r0
   b68e8:	f003 f84b 	bl	b9982 <digitalWrite>
   b68ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b68ee:	b118      	cbz	r0, b68f8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b68f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b68f4:	f002 ba02 	b.w	b8cfc <_ZN8SPIClass14endTransactionEv>
}
   b68f8:	bd38      	pop	{r3, r4, r5, pc}

000b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b68fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b68fe:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6900:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6902:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6904:	188f      	adds	r7, r1, r2
   b6906:	b340      	cbz	r0, b695a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6908:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b690c:	f001 ff0a 	bl	b8724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6910:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6912:	6803      	ldr	r3, [r0, #0]
   b6914:	2100      	movs	r1, #0
   b6916:	689b      	ldr	r3, [r3, #8]
   b6918:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b691a:	2601      	movs	r6, #1
    while(n--) {
   b691c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b691e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6920:	d017      	beq.n	b6952 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6922:	2e1f      	cmp	r6, #31
   b6924:	d90c      	bls.n	b6940 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6926:	f001 ff04 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b692a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b692e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6930:	f001 fef8 	bl	b8724 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6934:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6936:	6803      	ldr	r3, [r0, #0]
   b6938:	2100      	movs	r1, #0
   b693a:	689b      	ldr	r3, [r3, #8]
   b693c:	4798      	blx	r3
        bytesOut = 1;
   b693e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6942:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6946:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6948:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b694a:	689b      	ldr	r3, [r3, #8]
   b694c:	4798      	blx	r3
      bytesOut++;
   b694e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6950:	e7e4      	b.n	b691c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6952:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6956:	f001 beec 	b.w	b8732 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b695a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b695e:	4601      	mov	r1, r0
   b6960:	b298      	uxth	r0, r3
   b6962:	f003 f80e 	bl	b9982 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6966:	42bd      	cmp	r5, r7
   b6968:	d022      	beq.n	b69b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b696a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b696c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6970:	b118      	cbz	r0, b697a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6972:	4649      	mov	r1, r9
   b6974:	f002 fa4a 	bl	b8e0c <_ZN8SPIClass8transferEh>
   b6978:	e7f5      	b.n	b6966 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b697a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b697c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6980:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6984:	ea09 0108 	and.w	r1, r9, r8
   b6988:	b280      	uxth	r0, r0
   b698a:	f002 fffa 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b698e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6992:	2101      	movs	r1, #1
   b6994:	b280      	uxth	r0, r0
   b6996:	f002 fff4 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b699a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b699e:	2100      	movs	r1, #0
   b69a0:	b280      	uxth	r0, r0
   b69a2:	f002 ffee 	bl	b9982 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b69a6:	3e01      	subs	r6, #1
   b69a8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b69ac:	d1e8      	bne.n	b6980 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b69ae:	e7da      	b.n	b6966 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b69b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b69b4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b69b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b69b8:	1dda      	adds	r2, r3, #7
   b69ba:	bf48      	it	mi
   b69bc:	f103 020e 	addmi.w	r2, r3, #14
   b69c0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b69c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b69c6:	10d2      	asrs	r2, r2, #3
   b69c8:	435a      	muls	r2, r3
   b69ca:	2100      	movs	r1, #0
   b69cc:	f003 b9f5 	b.w	b9dba <memset>

000b69d0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b69d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b69d4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b69d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b69d8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b69dc:	4604      	mov	r4, r0
   b69de:	460f      	mov	r7, r1
   b69e0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b69e2:	b1c3      	cbz	r3, b6a16 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b69e4:	4620      	mov	r0, r4
   b69e6:	f7ff ffe5 	bl	b69b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b69ea:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b69ee:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b69f2:	2820      	cmp	r0, #32
   b69f4:	dc21      	bgt.n	b6a3a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b69f6:	2320      	movs	r3, #32
   b69f8:	2201      	movs	r2, #1
   b69fa:	3820      	subs	r0, #32
   b69fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6a00:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b6a04:	2373      	movs	r3, #115	; 0x73
   b6a06:	3973      	subs	r1, #115	; 0x73
   b6a08:	9300      	str	r3, [sp, #0]
   b6a0a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6a0e:	4b89      	ldr	r3, [pc, #548]	; (b6c34 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6a10:	f340 024f 	sbfx	r2, r0, #1, #16
   b6a14:	e021      	b.n	b6a5a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6a16:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6a1a:	1dd8      	adds	r0, r3, #7
   b6a1c:	bf48      	it	mi
   b6a1e:	f103 000e 	addmi.w	r0, r3, #14
   b6a22:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6a26:	10c0      	asrs	r0, r0, #3
   b6a28:	4358      	muls	r0, r3
   b6a2a:	f001 fd65 	bl	b84f8 <malloc>
   b6a2e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6a30:	2800      	cmp	r0, #0
   b6a32:	d1d7      	bne.n	b69e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6a34:	b004      	add	sp, #16
   b6a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b6a3a:	3840      	subs	r0, #64	; 0x40
   b6a3c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6a40:	fa02 f280 	sxtah	r2, r2, r0
   b6a44:	2340      	movs	r3, #64	; 0x40
   b6a46:	2001      	movs	r0, #1
   b6a48:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6a4c:	2352      	movs	r3, #82	; 0x52
   b6a4e:	3952      	subs	r1, #82	; 0x52
   b6a50:	9300      	str	r3, [sp, #0]
   b6a52:	4b79      	ldr	r3, [pc, #484]	; (b6c38 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6a54:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6a58:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	f341 014f 	sbfx	r1, r1, #1, #16
   b6a60:	f7ff fbac 	bl	b61bc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6a64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6a66:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6a6a:	2800      	cmp	r0, #0
   b6a6c:	d078      	beq.n	b6b60 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6a6e:	2d00      	cmp	r5, #0
   b6a70:	d174      	bne.n	b6b5c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b6a72:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6a76:	2b20      	cmp	r3, #32
   b6a78:	bf0c      	ite	eq
   b6a7a:	253c      	moveq	r5, #60	; 0x3c
   b6a7c:	253d      	movne	r5, #61	; 0x3d
   b6a7e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6a82:	f1b8 0f00 	cmp.w	r8, #0
   b6a86:	d001      	beq.n	b6a8c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6a88:	f001 fe16 	bl	b86b8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6a8c:	b1fe      	cbz	r6, b6ace <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b6a8e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6a92:	2800      	cmp	r0, #0
   b6a94:	db1b      	blt.n	b6ace <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b6a96:	2101      	movs	r1, #1
   b6a98:	b280      	uxth	r0, r0
   b6a9a:	f002 ff61 	bl	b9960 <pinMode>
    digitalWrite(rstPin, HIGH);
   b6a9e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6aa2:	2101      	movs	r1, #1
   b6aa4:	b280      	uxth	r0, r0
   b6aa6:	f002 ff6c 	bl	b9982 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6aaa:	2001      	movs	r0, #1
   b6aac:	f001 fd6c 	bl	b8588 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6ab0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ab4:	2100      	movs	r1, #0
   b6ab6:	b280      	uxth	r0, r0
   b6ab8:	f002 ff63 	bl	b9982 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6abc:	200a      	movs	r0, #10
   b6abe:	f001 fd63 	bl	b8588 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b6ac2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ac6:	2101      	movs	r1, #1
   b6ac8:	b280      	uxth	r0, r0
   b6aca:	f002 ff5a 	bl	b9982 <digitalWrite>
  TRANSACTION_START
   b6ace:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ad0:	2800      	cmp	r0, #0
   b6ad2:	d074      	beq.n	b6bbe <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6ad4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6ad6:	f001 fdeb 	bl	b86b0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6ada:	2204      	movs	r2, #4
   b6adc:	4957      	ldr	r1, [pc, #348]	; (b6c3c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b6ade:	4620      	mov	r0, r4
   b6ae0:	f7ff ff0b 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6ae4:	8961      	ldrh	r1, [r4, #10]
   b6ae6:	3901      	subs	r1, #1
   b6ae8:	b2c9      	uxtb	r1, r1
   b6aea:	4620      	mov	r0, r4
   b6aec:	f7ff fe96 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6af0:	4953      	ldr	r1, [pc, #332]	; (b6c40 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b6af2:	2204      	movs	r2, #4
   b6af4:	4620      	mov	r0, r4
   b6af6:	f7ff ff00 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6afa:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6afe:	2b01      	cmp	r3, #1
   b6b00:	bf0c      	ite	eq
   b6b02:	2110      	moveq	r1, #16
   b6b04:	2114      	movne	r1, #20
   b6b06:	4620      	mov	r0, r4
   b6b08:	f7ff fe88 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6b0c:	2204      	movs	r2, #4
   b6b0e:	494d      	ldr	r1, [pc, #308]	; (b6c44 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6b10:	4620      	mov	r0, r4
   b6b12:	f7ff fef2 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6b16:	68a3      	ldr	r3, [r4, #8]
   b6b18:	4a4b      	ldr	r2, [pc, #300]	; (b6c48 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6b1a:	4293      	cmp	r3, r2
   b6b1c:	d15c      	bne.n	b6bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6b1e:	494b      	ldr	r1, [pc, #300]	; (b6c4c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6b20:	2204      	movs	r2, #4
   b6b22:	4620      	mov	r0, r4
   b6b24:	f7ff fee9 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6b28:	21d9      	movs	r1, #217	; 0xd9
   b6b2a:	4620      	mov	r0, r4
   b6b2c:	f7ff fe76 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6b30:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6b34:	2b01      	cmp	r3, #1
   b6b36:	bf0c      	ite	eq
   b6b38:	2122      	moveq	r1, #34	; 0x22
   b6b3a:	21f1      	movne	r1, #241	; 0xf1
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	f7ff fe6d 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6b42:	4620      	mov	r0, r4
   b6b44:	4942      	ldr	r1, [pc, #264]	; (b6c50 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b6b46:	2206      	movs	r2, #6
   b6b48:	f7ff fed7 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6b4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b4e:	2800      	cmp	r0, #0
   b6b50:	d063      	beq.n	b6c1a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b6b52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6b54:	f001 fdac 	bl	b86b0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6b58:	2001      	movs	r0, #1
   b6b5a:	e76b      	b.n	b6a34 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6b5c:	b26d      	sxtb	r5, r5
   b6b5e:	e78e      	b.n	b6a7e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6b60:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6b64:	2101      	movs	r1, #1
   b6b66:	b280      	uxth	r0, r0
   b6b68:	f002 fefa 	bl	b9960 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6b6c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6b70:	2101      	movs	r1, #1
   b6b72:	b280      	uxth	r0, r0
   b6b74:	f002 fef4 	bl	b9960 <pinMode>
    SSD1306_DESELECT
   b6b78:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6b7c:	2101      	movs	r1, #1
   b6b7e:	b280      	uxth	r0, r0
   b6b80:	f002 feff 	bl	b9982 <digitalWrite>
    if(spi) { // Hardware SPI
   b6b84:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6b86:	b13d      	cbz	r5, b6b98 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6b88:	f1b8 0f00 	cmp.w	r8, #0
   b6b8c:	f43f af7e 	beq.w	b6a8c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6b90:	4628      	mov	r0, r5
   b6b92:	f002 f89f 	bl	b8cd4 <_ZN8SPIClass5beginEv>
   b6b96:	e779      	b.n	b6a8c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6b98:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6b9c:	2101      	movs	r1, #1
   b6b9e:	b280      	uxth	r0, r0
   b6ba0:	f002 fede 	bl	b9960 <pinMode>
      pinMode(clkPin , OUTPUT);
   b6ba4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ba8:	2101      	movs	r1, #1
   b6baa:	b280      	uxth	r0, r0
   b6bac:	f002 fed8 	bl	b9960 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6bb0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6bb4:	4629      	mov	r1, r5
   b6bb6:	b280      	uxth	r0, r0
   b6bb8:	f002 fee3 	bl	b9982 <digitalWrite>
   b6bbc:	e766      	b.n	b6a8c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b6bbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6bc0:	b118      	cbz	r0, b6bca <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b6bc2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6bc6:	f002 f8b3 	bl	b8d30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6bca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6bce:	2100      	movs	r1, #0
   b6bd0:	b280      	uxth	r0, r0
   b6bd2:	f002 fed6 	bl	b9982 <digitalWrite>
   b6bd6:	e780      	b.n	b6ada <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6bd8:	4a1e      	ldr	r2, [pc, #120]	; (b6c54 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6bda:	4293      	cmp	r3, r2
   b6bdc:	d10e      	bne.n	b6bfc <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6bde:	491e      	ldr	r1, [pc, #120]	; (b6c58 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b6be0:	2203      	movs	r2, #3
   b6be2:	4620      	mov	r0, r4
   b6be4:	f7ff fe89 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6be8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6bec:	2b01      	cmp	r3, #1
   b6bee:	bf0c      	ite	eq
   b6bf0:	219f      	moveq	r1, #159	; 0x9f
   b6bf2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	f7ff fe11 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6bfa:	e795      	b.n	b6b28 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6bfc:	4a17      	ldr	r2, [pc, #92]	; (b6c5c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6bfe:	4293      	cmp	r3, r2
   b6c00:	d192      	bne.n	b6b28 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b6c02:	4917      	ldr	r1, [pc, #92]	; (b6c60 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b6c04:	2203      	movs	r2, #3
   b6c06:	4620      	mov	r0, r4
   b6c08:	f7ff fe77 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6c0c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6c10:	2b01      	cmp	r3, #1
   b6c12:	bf0c      	ite	eq
   b6c14:	2110      	moveq	r1, #16
   b6c16:	21af      	movne	r1, #175	; 0xaf
   b6c18:	e7ec      	b.n	b6bf4 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6c1a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6c1e:	2101      	movs	r1, #1
   b6c20:	b280      	uxth	r0, r0
   b6c22:	f002 feae 	bl	b9982 <digitalWrite>
   b6c26:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	d095      	beq.n	b6b58 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6c2c:	f002 f866 	bl	b8cfc <_ZN8SPIClass14endTransactionEv>
   b6c30:	e792      	b.n	b6b58 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6c32:	bf00      	nop
   b6c34:	000bc82c 	.word	0x000bc82c
   b6c38:	000bc56c 	.word	0x000bc56c
   b6c3c:	000bca74 	.word	0x000bca74
   b6c40:	000bca78 	.word	0x000bca78
   b6c44:	000bca7c 	.word	0x000bca7c
   b6c48:	00200080 	.word	0x00200080
   b6c4c:	000bca86 	.word	0x000bca86
   b6c50:	000bca80 	.word	0x000bca80
   b6c54:	00400080 	.word	0x00400080
   b6c58:	000bca8a 	.word	0x000bca8a
   b6c5c:	00100060 	.word	0x00100060
   b6c60:	000bca8d 	.word	0x000bca8d

000b6c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6c64:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6c66:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6c68:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6c6c:	db3d      	blt.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6c6e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6c72:	4294      	cmp	r4, r2
   b6c74:	dd39      	ble.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b6c76:	2900      	cmp	r1, #0
      w += x;
   b6c78:	bfbe      	ittt	lt
   b6c7a:	185b      	addlt	r3, r3, r1
   b6c7c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6c7e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6c80:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6c84:	18ce      	adds	r6, r1, r3
   b6c86:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6c88:	bfc4      	itt	gt
   b6c8a:	1a63      	subgt	r3, r4, r1
   b6c8c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6c8e:	2b00      	cmp	r3, #0
   b6c90:	dd2b      	ble.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6c92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6c94:	10d6      	asrs	r6, r2, #3
   b6c96:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6c9a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6c9c:	f002 0007 	and.w	r0, r2, #7
   b6ca0:	2201      	movs	r2, #1
   b6ca2:	4082      	lsls	r2, r0
      switch(color) {
   b6ca4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b6ca6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6ca8:	d016      	beq.n	b6cd8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6caa:	2d02      	cmp	r5, #2
   b6cac:	d00b      	beq.n	b6cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6cae:	b9e5      	cbnz	r5, b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6cb0:	43d2      	mvns	r2, r2
   b6cb2:	b2d2      	uxtb	r2, r2
   b6cb4:	440b      	add	r3, r1
   b6cb6:	4299      	cmp	r1, r3
   b6cb8:	d017      	beq.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6cba:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6cbe:	4010      	ands	r0, r2
   b6cc0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6cc4:	e7f7      	b.n	b6cb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b6cc6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6cc8:	4299      	cmp	r1, r3
   b6cca:	d00e      	beq.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6ccc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6cd0:	4050      	eors	r0, r2
   b6cd2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6cd6:	e7f7      	b.n	b6cc8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6cd8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6cda:	4299      	cmp	r1, r3
   b6cdc:	d005      	beq.n	b6cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6cde:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6ce2:	4310      	orrs	r0, r2
   b6ce4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6ce8:	e7f7      	b.n	b6cda <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6cea:	bd70      	pop	{r4, r5, r6, pc}

000b6cec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6cee:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6cf0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6cf4:	db76      	blt.n	b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b6cf6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6cfa:	42b1      	cmp	r1, r6
   b6cfc:	da72      	bge.n	b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6cfe:	2a00      	cmp	r2, #0
      __h += __y;
   b6d00:	bfbe      	ittt	lt
   b6d02:	189b      	addlt	r3, r3, r2
   b6d04:	b21b      	sxthlt	r3, r3
      __y = 0;
   b6d06:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6d08:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6d0c:	18d7      	adds	r7, r2, r3
   b6d0e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6d10:	bfc4      	itt	gt
   b6d12:	1aa3      	subgt	r3, r4, r2
   b6d14:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b6d16:	2b00      	cmp	r3, #0
   b6d18:	dd64      	ble.n	b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6d1a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6d1e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6d20:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b6d24:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6d28:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6d2a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6d2e:	d023      	beq.n	b6d78 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6d30:	f1c2 0208 	rsb	r2, r2, #8
   b6d34:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6d36:	492d      	ldr	r1, [pc, #180]	; (b6dec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6d38:	4293      	cmp	r3, r2
   b6d3a:	bf3c      	itt	cc
   b6d3c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6d40:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6d44:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6d46:	bf3c      	itt	cc
   b6d48:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6d4c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6d50:	2d01      	cmp	r5, #1
   b6d52:	d007      	beq.n	b6d64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6d54:	2d02      	cmp	r5, #2
   b6d56:	d02e      	beq.n	b6db6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6d58:	b94d      	cbnz	r5, b6d6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6d5a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6d5e:	ea2c 0101 	bic.w	r1, ip, r1
   b6d62:	e003      	b.n	b6d6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b6d64:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6d68:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6d6c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6d6e:	4293      	cmp	r3, r2
   b6d70:	d338      	bcc.n	b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6d72:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b6d76:	440c      	add	r4, r1
        h -= mod;
   b6d78:	1a9a      	subs	r2, r3, r2
   b6d7a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6d7c:	2a07      	cmp	r2, #7
   b6d7e:	d90e      	bls.n	b6d9e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6d80:	2d02      	cmp	r5, #2
   b6d82:	d11d      	bne.n	b6dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6d84:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b6d86:	7821      	ldrb	r1, [r4, #0]
   b6d88:	43c9      	mvns	r1, r1
   b6d8a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6d8c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6d8e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b6d92:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6d94:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6d96:	440c      	add	r4, r1
            } while(h >= 8);
   b6d98:	d8f5      	bhi.n	b6d86 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6d9a:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6d9e:	b30a      	cbz	r2, b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6da0:	4b13      	ldr	r3, [pc, #76]	; (b6df0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b6da2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6da4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6da6:	d01a      	beq.n	b6dde <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6da8:	2d02      	cmp	r5, #2
   b6daa:	d01c      	beq.n	b6de6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6dac:	b9d5      	cbnz	r5, b6de4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6dae:	7822      	ldrb	r2, [r4, #0]
   b6db0:	ea22 0303 	bic.w	r3, r2, r3
   b6db4:	e015      	b.n	b6de2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b6db6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6dba:	ea81 010c 	eor.w	r1, r1, ip
   b6dbe:	e7d5      	b.n	b6d6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6dc0:	1e29      	subs	r1, r5, #0
   b6dc2:	bf18      	it	ne
   b6dc4:	2101      	movne	r1, #1
   b6dc6:	4249      	negs	r1, r1
   b6dc8:	b2c9      	uxtb	r1, r1
   b6dca:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6dcc:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6dce:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6dd0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6dd4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6dd6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6dd8:	4434      	add	r4, r6
            } while(h >= 8);
   b6dda:	d8f7      	bhi.n	b6dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6ddc:	e7dd      	b.n	b6d9a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6dde:	7822      	ldrb	r2, [r4, #0]
   b6de0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b6de2:	7023      	strb	r3, [r4, #0]
}
   b6de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6de6:	7822      	ldrb	r2, [r4, #0]
   b6de8:	4053      	eors	r3, r2
   b6dea:	e7fa      	b.n	b6de2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6dec:	000bca64 	.word	0x000bca64
   b6df0:	000bca6c 	.word	0x000bca6c

000b6df4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6df4:	b470      	push	{r4, r5, r6}
   b6df6:	4614      	mov	r4, r2
  switch(rotation) {
   b6df8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6dfa:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6dfe:	2a02      	cmp	r2, #2
   b6e00:	d00d      	beq.n	b6e1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b6e02:	2a03      	cmp	r2, #3
   b6e04:	d018      	beq.n	b6e38 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6e06:	2a01      	cmp	r2, #1
   b6e08:	d111      	bne.n	b6e2e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6e0a:	8902      	ldrh	r2, [r0, #8]
   b6e0c:	43e4      	mvns	r4, r4
   b6e0e:	4414      	add	r4, r2
   b6e10:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6e12:	9603      	str	r6, [sp, #12]
   b6e14:	460a      	mov	r2, r1
   b6e16:	4621      	mov	r1, r4
}
   b6e18:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6e1a:	f7ff bf67 	b.w	b6cec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6e1e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6e20:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b6e22:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6e24:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6e26:	4414      	add	r4, r2
    x -= (w-1);
   b6e28:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6e2a:	b224      	sxth	r4, r4
    x -= (w-1);
   b6e2c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6e2e:	9603      	str	r6, [sp, #12]
   b6e30:	4622      	mov	r2, r4
}
   b6e32:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6e34:	f7ff bf16 	b.w	b6c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6e38:	8945      	ldrh	r5, [r0, #10]
   b6e3a:	4419      	add	r1, r3
   b6e3c:	1a69      	subs	r1, r5, r1
   b6e3e:	b209      	sxth	r1, r1
    break;
   b6e40:	e7e7      	b.n	b6e12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6e42 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6e42:	b430      	push	{r4, r5}
   b6e44:	4614      	mov	r4, r2
  switch(rotation) {
   b6e46:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6e48:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6e4c:	2a02      	cmp	r2, #2
   b6e4e:	d00d      	beq.n	b6e6c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6e50:	2a03      	cmp	r2, #3
   b6e52:	d018      	beq.n	b6e86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6e54:	2a01      	cmp	r2, #1
   b6e56:	d111      	bne.n	b6e7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6e58:	18e2      	adds	r2, r4, r3
   b6e5a:	8904      	ldrh	r4, [r0, #8]
   b6e5c:	1aa4      	subs	r4, r4, r2
   b6e5e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6e60:	9502      	str	r5, [sp, #8]
   b6e62:	460a      	mov	r2, r1
   b6e64:	4621      	mov	r1, r4
}
   b6e66:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6e68:	f7ff befc 	b.w	b6c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6e6c:	8902      	ldrh	r2, [r0, #8]
   b6e6e:	43c9      	mvns	r1, r1
   b6e70:	4411      	add	r1, r2
    y -= (h-1);
   b6e72:	18e2      	adds	r2, r4, r3
   b6e74:	8944      	ldrh	r4, [r0, #10]
   b6e76:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6e78:	b209      	sxth	r1, r1
    y -= (h-1);
   b6e7a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6e7c:	9502      	str	r5, [sp, #8]
   b6e7e:	4622      	mov	r2, r4
}
   b6e80:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6e82:	f7ff bf33 	b.w	b6cec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6e86:	8942      	ldrh	r2, [r0, #10]
   b6e88:	43c9      	mvns	r1, r1
   b6e8a:	4411      	add	r1, r2
   b6e8c:	b209      	sxth	r1, r1
    break;
   b6e8e:	e7e7      	b.n	b6e60 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6e90 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e94:	4604      	mov	r4, r0
  TRANSACTION_START
   b6e96:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6e98:	2800      	cmp	r0, #0
   b6e9a:	d042      	beq.n	b6f22 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6e9e:	f001 fc07 	bl	b86b0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6ea2:	4947      	ldr	r1, [pc, #284]	; (b6fc0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6ea4:	2205      	movs	r2, #5
   b6ea6:	4620      	mov	r0, r4
   b6ea8:	f7ff fd27 	bl	b68fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6eac:	8921      	ldrh	r1, [r4, #8]
   b6eae:	3901      	subs	r1, #1
   b6eb0:	4620      	mov	r0, r4
   b6eb2:	b2c9      	uxtb	r1, r1
   b6eb4:	f7ff fcb2 	bl	b681c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6eb8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6ebc:	1dde      	adds	r6, r3, #7
   b6ebe:	bf48      	it	mi
   b6ec0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6ec4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6ec8:	8923      	ldrh	r3, [r4, #8]
   b6eca:	10f6      	asrs	r6, r6, #3
   b6ecc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6ed0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6ed4:	2800      	cmp	r0, #0
   b6ed6:	d03a      	beq.n	b6f4e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6ed8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6edc:	f001 fc22 	bl	b8724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6ee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ee2:	6803      	ldr	r3, [r0, #0]
   b6ee4:	2140      	movs	r1, #64	; 0x40
   b6ee6:	689b      	ldr	r3, [r3, #8]
   b6ee8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6eea:	2701      	movs	r7, #1
    while(count--) {
   b6eec:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6eee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6ef0:	d024      	beq.n	b6f3c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b6ef2:	2f1f      	cmp	r7, #31
   b6ef4:	d90c      	bls.n	b6f10 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6ef6:	f001 fc1c 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6efa:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6efe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f00:	f001 fc10 	bl	b8724 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6f04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f06:	6803      	ldr	r3, [r0, #0]
   b6f08:	2140      	movs	r1, #64	; 0x40
   b6f0a:	689b      	ldr	r3, [r3, #8]
   b6f0c:	4798      	blx	r3
        bytesOut = 1;
   b6f0e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f12:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6f16:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6f18:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6f1a:	689b      	ldr	r3, [r3, #8]
   b6f1c:	4798      	blx	r3
      bytesOut++;
   b6f1e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6f20:	e7e4      	b.n	b6eec <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6f24:	b118      	cbz	r0, b6f2e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6f26:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6f2a:	f001 ff01 	bl	b8d30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6f2e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f32:	2100      	movs	r1, #0
   b6f34:	b280      	uxth	r0, r0
   b6f36:	f002 fd24 	bl	b9982 <digitalWrite>
   b6f3a:	e7b2      	b.n	b6ea2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6f3c:	f001 fbf9 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6f40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f42:	b378      	cbz	r0, b6fa4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6f44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6f46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6f4a:	f001 bbb1 	b.w	b86b0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6f4e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6f52:	2101      	movs	r1, #1
   b6f54:	b280      	uxth	r0, r0
   b6f56:	f002 fd14 	bl	b9982 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6f5a:	42ae      	cmp	r6, r5
   b6f5c:	d0f0      	beq.n	b6f40 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6f60:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6f64:	b118      	cbz	r0, b6f6e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6f66:	4649      	mov	r1, r9
   b6f68:	f001 ff50 	bl	b8e0c <_ZN8SPIClass8transferEh>
   b6f6c:	e7f5      	b.n	b6f5a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6f6e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f70:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6f74:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6f78:	ea09 0108 	and.w	r1, r9, r8
   b6f7c:	b280      	uxth	r0, r0
   b6f7e:	f002 fd00 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6f82:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f86:	2101      	movs	r1, #1
   b6f88:	b280      	uxth	r0, r0
   b6f8a:	f002 fcfa 	bl	b9982 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6f8e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f92:	2100      	movs	r1, #0
   b6f94:	b280      	uxth	r0, r0
   b6f96:	f002 fcf4 	bl	b9982 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f9a:	3f01      	subs	r7, #1
   b6f9c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6fa0:	d1e8      	bne.n	b6f74 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6fa2:	e7da      	b.n	b6f5a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6fa4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6fa8:	2101      	movs	r1, #1
   b6faa:	b280      	uxth	r0, r0
   b6fac:	f002 fce9 	bl	b9982 <digitalWrite>
   b6fb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6fb2:	b118      	cbz	r0, b6fbc <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6fb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6fb8:	f001 bea0 	b.w	b8cfc <_ZN8SPIClass14endTransactionEv>
}
   b6fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6fc0:	000bca90 	.word	0x000bca90

000b6fc4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6fc4:	2100      	movs	r1, #0
   b6fc6:	220a      	movs	r2, #10
   b6fc8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6fcc:	4770      	bx	lr

000b6fce <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6fce:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6fd0:	b510      	push	{r4, lr}
   b6fd2:	4604      	mov	r4, r0
    this->pin = pin;
   b6fd4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6fd6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6fd8:	b288      	uxth	r0, r1
   b6fda:	f002 fceb 	bl	b99b4 <digitalRead>
   b6fde:	b108      	cbz	r0, b6fe4 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6fe0:	2303      	movs	r3, #3
   b6fe2:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6fe4:	f001 f814 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6fe8:	6020      	str	r0, [r4, #0]
#endif
}
   b6fea:	bd10      	pop	{r4, pc}

000b6fec <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6fec:	b538      	push	{r3, r4, r5, lr}
   b6fee:	460c      	mov	r4, r1
   b6ff0:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6ff2:	4611      	mov	r1, r2
   b6ff4:	b2a0      	uxth	r0, r4
   b6ff6:	f002 fcb3 	bl	b9960 <pinMode>
  
  this->attach(pin);
   b6ffa:	4621      	mov	r1, r4
   b6ffc:	4628      	mov	r0, r5
}
   b6ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b7002:	f7ff bfe4 	b.w	b6fce <_ZN8Debounce6attachEi>

000b7006 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b7006:	b538      	push	{r3, r4, r5, lr}
   b7008:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b700a:	79c0      	ldrb	r0, [r0, #7]
   b700c:	f002 fcd2 	bl	b99b4 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b7010:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b7012:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b7014:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b7018:	bf18      	it	ne
   b701a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b701c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b7020:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b7022:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b7024:	d00a      	beq.n	b703c <_ZN8Debounce6updateEv+0x36>
   b7026:	f000 fff3 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b702a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b702c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b702e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b7032:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b7034:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b7036:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b703a:	bd38      	pop	{r3, r4, r5, pc}
   b703c:	f000 ffe8 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b7040:	6823      	ldr	r3, [r4, #0]
   b7042:	1ac0      	subs	r0, r0, r3
   b7044:	88a3      	ldrh	r3, [r4, #4]
   b7046:	4298      	cmp	r0, r3
   b7048:	d3f4      	bcc.n	b7034 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b704a:	79a3      	ldrb	r3, [r4, #6]
   b704c:	f003 0301 	and.w	r3, r3, #1
   b7050:	42ab      	cmp	r3, r5
   b7052:	d0ef      	beq.n	b7034 <_ZN8Debounce6updateEv+0x2e>
   b7054:	f000 ffdc 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b7058:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b705a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b705c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b7060:	f043 0308 	orr.w	r3, r3, #8
   b7064:	e7e5      	b.n	b7032 <_ZN8Debounce6updateEv+0x2c>

000b7066 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
   b7066:	4770      	bx	lr

000b7068 <_ZN9LIS3DHI2CD0Ev>:
LIS3DHI2C::~LIS3DHI2C() {
   b7068:	b510      	push	{r4, lr}
}
   b706a:	2114      	movs	r1, #20
LIS3DHI2C::~LIS3DHI2C() {
   b706c:	4604      	mov	r4, r0
}
   b706e:	f7fd fd64 	bl	b4b3a <_ZdlPvj>
   b7072:	4620      	mov	r0, r4
   b7074:	bd10      	pop	{r4, pc}

000b7076 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b7076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7078:	460e      	mov	r6, r1

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
   b707a:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b707c:	4607      	mov	r7, r0
	wire.beginTransmission(getI2CAddr());
   b707e:	f041 0118 	orr.w	r1, r1, #24
   b7082:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b7084:	461d      	mov	r5, r3
   b7086:	4614      	mov	r4, r2
	wire.beginTransmission(getI2CAddr());
   b7088:	f001 fb48 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   b708c:	68f8      	ldr	r0, [r7, #12]
	if (numBytes > 1) {
   b708e:	2d01      	cmp	r5, #1
	wire.write(addr);
   b7090:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   b7092:	bf88      	it	hi
   b7094:	f046 0680 	orrhi.w	r6, r6, #128	; 0x80
	wire.write(addr);
   b7098:	689b      	ldr	r3, [r3, #8]
   b709a:	4631      	mov	r1, r6
   b709c:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   b709e:	4425      	add	r5, r4
   b70a0:	42ac      	cmp	r4, r5
		wire.write(buf[ii]);
   b70a2:	68f8      	ldr	r0, [r7, #12]
	for(size_t ii = 0; ii < numBytes; ii++) {
   b70a4:	d005      	beq.n	b70b2 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
   b70a6:	6803      	ldr	r3, [r0, #0]
   b70a8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b70ac:	689b      	ldr	r3, [r3, #8]
   b70ae:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   b70b0:	e7f6      	b.n	b70a0 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
	uint8_t res = wire.endTransmission();
   b70b2:	f001 fb3e 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
}
   b70b6:	fab0 f080 	clz	r0, r0
   b70ba:	0940      	lsrs	r0, r0, #5
   b70bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70be <_ZN9LIS3DHI2C8readDataEhPhj>:
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b70be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b70c0:	460f      	mov	r7, r1
	uint8_t addr = (0b0011000 | sad0);
   b70c2:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b70c4:	4604      	mov	r4, r0
	wire.beginTransmission(getI2CAddr());
   b70c6:	f041 0118 	orr.w	r1, r1, #24
   b70ca:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b70cc:	461e      	mov	r6, r3
   b70ce:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
   b70d0:	f001 fb24 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   b70d4:	68e0      	ldr	r0, [r4, #12]
	if (numBytes > 1) {
   b70d6:	2e01      	cmp	r6, #1
	wire.write(addr);
   b70d8:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   b70da:	bf88      	it	hi
   b70dc:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	wire.write(addr);
   b70e0:	689b      	ldr	r3, [r3, #8]
   b70e2:	4639      	mov	r1, r7
   b70e4:	4798      	blx	r3
	uint8_t res = wire.endTransmission();
   b70e6:	68e0      	ldr	r0, [r4, #12]
   b70e8:	f001 fb23 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
   b70ec:	b9c0      	cbnz	r0, b7120 <_ZN9LIS3DHI2C8readDataEhPhj+0x62>
	uint8_t addr = (0b0011000 | sad0);
   b70ee:	7c21      	ldrb	r1, [r4, #16]
	wire.requestFrom(getI2CAddr(), numBytes);
   b70f0:	68e0      	ldr	r0, [r4, #12]
   b70f2:	4632      	mov	r2, r6
   b70f4:	f041 0118 	orr.w	r1, r1, #24
   b70f8:	f001 fb0d 	bl	b8716 <_ZN7TwoWire11requestFromEhj>
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b70fc:	442e      	add	r6, r5
   b70fe:	42b5      	cmp	r5, r6
   b7100:	d101      	bne.n	b7106 <_ZN9LIS3DHI2C8readDataEhPhj+0x48>
	return true;
   b7102:	2001      	movs	r0, #1
}
   b7104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b7106:	68e0      	ldr	r0, [r4, #12]
   b7108:	6803      	ldr	r3, [r0, #0]
   b710a:	691b      	ldr	r3, [r3, #16]
   b710c:	4798      	blx	r3
   b710e:	2800      	cmp	r0, #0
   b7110:	d0f7      	beq.n	b7102 <_ZN9LIS3DHI2C8readDataEhPhj+0x44>
		buf[ii] = wire.read();
   b7112:	68e0      	ldr	r0, [r4, #12]
   b7114:	6803      	ldr	r3, [r0, #0]
   b7116:	695b      	ldr	r3, [r3, #20]
   b7118:	4798      	blx	r3
   b711a:	f805 0b01 	strb.w	r0, [r5], #1
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b711e:	e7ee      	b.n	b70fe <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
		return false;
   b7120:	2000      	movs	r0, #0
   b7122:	e7ef      	b.n	b7104 <_ZN9LIS3DHI2C8readDataEhPhj+0x46>

000b7124 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b7124:	2200      	movs	r2, #0
   b7126:	7002      	strb	r2, [r0, #0]
   b7128:	7042      	strb	r2, [r0, #1]
   b712a:	7082      	strb	r2, [r0, #2]
   b712c:	70c2      	strb	r2, [r0, #3]
   b712e:	7102      	strb	r2, [r0, #4]
   b7130:	7142      	strb	r2, [r0, #5]
   b7132:	7182      	strb	r2, [r0, #6]
   b7134:	71c2      	strb	r2, [r0, #7]
   b7136:	7202      	strb	r2, [r0, #8]
   b7138:	7242      	strb	r2, [r0, #9]
   b713a:	7282      	strb	r2, [r0, #10]
}
   b713c:	4770      	bx	lr

000b713e <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b713e:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b7140:	f041 0107 	orr.w	r1, r1, #7
   b7144:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b7146:	7102      	strb	r2, [r0, #4]
   b7148:	7082      	strb	r2, [r0, #2]
   b714a:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b714c:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b714e:	7242      	strb	r2, [r0, #9]
}
   b7150:	4770      	bx	lr

000b7152 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b7152:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b7154:	6803      	ldr	r3, [r0, #0]
   b7156:	aa01      	add	r2, sp, #4
   b7158:	68dc      	ldr	r4, [r3, #12]
   b715a:	2301      	movs	r3, #1
   b715c:	47a0      	blx	r4
}
   b715e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b7162:	b002      	add	sp, #8
   b7164:	bd10      	pop	{r4, pc}

000b7166 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b7166:	b538      	push	{r3, r4, r5, lr}
   b7168:	4605      	mov	r5, r0
   b716a:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b716c:	210f      	movs	r1, #15
   b716e:	4628      	mov	r0, r5
   b7170:	f7ff ffef 	bl	b7152 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b7174:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b7176:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b717a:	d004      	beq.n	b7186 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b717c:	f001 fa04 	bl	b8588 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b7180:	3c01      	subs	r4, #1
   b7182:	d1f3      	bne.n	b716c <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b7184:	4620      	mov	r0, r4
}
   b7186:	bd38      	pop	{r3, r4, r5, pc}

000b7188 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b7188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b718a:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b718c:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b718e:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b7190:	f7ff ffdf 	bl	b7152 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b7194:	f000 0008 	and.w	r0, r0, #8
   b7198:	2800      	cmp	r0, #0
   b719a:	bf14      	ite	ne
   b719c:	2601      	movne	r6, #1
   b719e:	2600      	moveq	r6, #0
	if (hasData) {
   b71a0:	d00f      	beq.n	b71c2 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b71a2:	682b      	ldr	r3, [r5, #0]
   b71a4:	466a      	mov	r2, sp
   b71a6:	68df      	ldr	r7, [r3, #12]
   b71a8:	2128      	movs	r1, #40	; 0x28
   b71aa:	2306      	movs	r3, #6
   b71ac:	4628      	mov	r0, r5
   b71ae:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b71b0:	f8bd 3000 	ldrh.w	r3, [sp]
   b71b4:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b71b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b71ba:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b71bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b71c0:	80a3      	strh	r3, [r4, #4]
}
   b71c2:	4630      	mov	r0, r6
   b71c4:	b003      	add	sp, #12
   b71c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b71c8 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b71c8:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b71ca:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b71cc:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b71d0:	691c      	ldr	r4, [r3, #16]
   b71d2:	aa01      	add	r2, sp, #4
   b71d4:	2301      	movs	r3, #1
   b71d6:	47a0      	blx	r4
}
   b71d8:	b002      	add	sp, #8
   b71da:	bd10      	pop	{r4, pc}

000b71dc <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b71dc:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b71de:	6803      	ldr	r3, [r0, #0]
   b71e0:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b71e2:	4604      	mov	r4, r0
   b71e4:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b71e6:	4798      	blx	r3
   b71e8:	4606      	mov	r6, r0
   b71ea:	b930      	cbnz	r0, b71fa <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b71ec:	f002 fa7a 	bl	b96e4 <_Z16_fetch_usbserialv>
   b71f0:	4927      	ldr	r1, [pc, #156]	; (b7290 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b71f2:	f001 fc24 	bl	b8a3e <_ZN5Print7printlnEPKc>
}
   b71f6:	4630      	mov	r0, r6
   b71f8:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b71fa:	782a      	ldrb	r2, [r5, #0]
   b71fc:	2120      	movs	r1, #32
   b71fe:	4620      	mov	r0, r4
   b7200:	f7ff ffe2 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b7204:	786a      	ldrb	r2, [r5, #1]
   b7206:	2121      	movs	r1, #33	; 0x21
   b7208:	4620      	mov	r0, r4
   b720a:	f7ff ffdd 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b720e:	78aa      	ldrb	r2, [r5, #2]
   b7210:	2122      	movs	r1, #34	; 0x22
   b7212:	4620      	mov	r0, r4
   b7214:	f7ff ffd8 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b7218:	78ea      	ldrb	r2, [r5, #3]
   b721a:	2123      	movs	r1, #35	; 0x23
   b721c:	4620      	mov	r0, r4
   b721e:	f7ff ffd3 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b7222:	792a      	ldrb	r2, [r5, #4]
   b7224:	2124      	movs	r1, #36	; 0x24
   b7226:	4620      	mov	r0, r4
   b7228:	f7ff ffce 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b722c:	796a      	ldrb	r2, [r5, #5]
   b722e:	2125      	movs	r1, #37	; 0x25
   b7230:	4620      	mov	r0, r4
   b7232:	f7ff ffc9 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b7236:	79ab      	ldrb	r3, [r5, #6]
   b7238:	b11b      	cbz	r3, b7242 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b723a:	2126      	movs	r1, #38	; 0x26
   b723c:	4620      	mov	r0, r4
   b723e:	f7ff ff88 	bl	b7152 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b7242:	7aaa      	ldrb	r2, [r5, #10]
   b7244:	212e      	movs	r1, #46	; 0x2e
   b7246:	4620      	mov	r0, r4
   b7248:	f7ff ffbe 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b724c:	78ab      	ldrb	r3, [r5, #2]
   b724e:	065b      	lsls	r3, r3, #25
   b7250:	d5d1      	bpl.n	b71f6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b7252:	79ea      	ldrb	r2, [r5, #7]
   b7254:	2132      	movs	r1, #50	; 0x32
   b7256:	4620      	mov	r0, r4
   b7258:	f7ff ffb6 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b725c:	7a2a      	ldrb	r2, [r5, #8]
   b725e:	2133      	movs	r1, #51	; 0x33
   b7260:	4620      	mov	r0, r4
   b7262:	f7ff ffb1 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b7266:	6863      	ldr	r3, [r4, #4]
   b7268:	2b00      	cmp	r3, #0
   b726a:	db0a      	blt.n	b7282 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b726c:	7a6a      	ldrb	r2, [r5, #9]
   b726e:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b7270:	4620      	mov	r0, r4
   b7272:	2130      	movs	r1, #48	; 0x30
   b7274:	f7ff ffa8 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b7278:	2131      	movs	r1, #49	; 0x31
   b727a:	4620      	mov	r0, r4
   b727c:	f7ff ff69 	bl	b7152 <_ZN6LIS3DH13readRegister8Eh>
   b7280:	e7b9      	b.n	b71f6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b7282:	2200      	movs	r2, #0
   b7284:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b7286:	2130      	movs	r1, #48	; 0x30
   b7288:	4620      	mov	r0, r4
   b728a:	f7ff ff9d 	bl	b71c8 <_ZN6LIS3DH14writeRegister8Ehh>
   b728e:	e7b2      	b.n	b71f6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b7290:	000bca95 	.word	0x000bca95

000b7294 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   b7294:	b510      	push	{r4, lr}
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b7296:	6043      	str	r3, [r0, #4]
   b7298:	2300      	movs	r3, #0
   b729a:	7203      	strb	r3, [r0, #8]
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   b729c:	4b02      	ldr	r3, [pc, #8]	; (b72a8 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x14>)
   b729e:	6003      	str	r3, [r0, #0]
   b72a0:	60c1      	str	r1, [r0, #12]
   b72a2:	7402      	strb	r2, [r0, #16]
}
   b72a4:	bd10      	pop	{r4, pc}
   b72a6:	bf00      	nop
   b72a8:	000bcab0 	.word	0x000bcab0

000b72ac <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b72ac:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b72b0:	b510      	push	{r4, lr}
   b72b2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b72b4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b72b6:	b113      	cbz	r3, b72be <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b72b8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b72ba:	f000 fe79 	bl	b7fb0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b72be:	4620      	mov	r0, r4
   b72c0:	bd10      	pop	{r4, pc}

000b72c2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b72c2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b72c4:	6803      	ldr	r3, [r0, #0]
   b72c6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b72ca:	4604      	mov	r4, r0
            if (mqtt->thread)
   b72cc:	b112      	cbz	r2, b72d4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b72ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b72d0:	f000 fe76 	bl	b7fc0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b72d4:	4620      	mov	r0, r4
   b72d6:	bd10      	pop	{r4, pc}

000b72d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b72d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72da:	461f      	mov	r7, r3
   b72dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b72e0:	4604      	mov	r4, r0
   b72e2:	460d      	mov	r5, r1
   b72e4:	4616      	mov	r6, r2
    if (thread) {
   b72e6:	b12b      	cbz	r3, b72f4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b72e8:	2301      	movs	r3, #1
   b72ea:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b72ee:	3058      	adds	r0, #88	; 0x58
   b72f0:	f000 fe4e 	bl	b7f90 <os_mutex_create>
    }
    this->callback = callback;
   b72f4:	9b08      	ldr	r3, [sp, #32]
   b72f6:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b72f8:	2300      	movs	r3, #0
   b72fa:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b72fc:	b106      	cbz	r6, b7300 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b72fe:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b7300:	b125      	cbz	r5, b730c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b7302:	4629      	mov	r1, r5
   b7304:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b7308:	f001 fe0f 	bl	b8f2a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b730c:	9b06      	ldr	r3, [sp, #24]
   b730e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b7310:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b7312:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b7314:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b7318:	2bff      	cmp	r3, #255	; 0xff
   b731a:	bfb8      	it	lt
   b731c:	23ff      	movlt	r3, #255	; 0xff
   b731e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b7322:	b108      	cbz	r0, b7328 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b7324:	f7fd fc07 	bl	b4b36 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b7328:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b732c:	f7fd fc01 	bl	b4b32 <_Znaj>
   b7330:	61e0      	str	r0, [r4, #28]
}
   b7332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7334 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b7334:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7338:	4604      	mov	r4, r0
            bool thread) {
   b733a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b733c:	4617      	mov	r7, r2
   b733e:	4698      	mov	r8, r3
   b7340:	460e      	mov	r6, r1
            bool thread) {
   b7342:	f002 f905 	bl	b9550 <_ZN9TCPClientC1Ev>
   b7346:	490d      	ldr	r1, [pc, #52]	; (b737c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b7348:	61e5      	str	r5, [r4, #28]
   b734a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b734e:	f001 fdd8 	bl	b8f02 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b7352:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b7356:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b7358:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b735c:	22ff      	movs	r2, #255	; 0xff
   b735e:	230f      	movs	r3, #15
   b7360:	e9cd 3200 	strd	r3, r2, [sp]
   b7364:	4620      	mov	r0, r4
            bool thread) {
   b7366:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b736a:	463b      	mov	r3, r7
   b736c:	462a      	mov	r2, r5
   b736e:	4631      	mov	r1, r6
   b7370:	f7ff ffb2 	bl	b72d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b7374:	4620      	mov	r0, r4
   b7376:	b004      	add	sp, #16
   b7378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b737c:	000bbed7 	.word	0x000bbed7

000b7380 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b7380:	b510      	push	{r4, lr}
   b7382:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b7384:	4620      	mov	r0, r4
   b7386:	f002 f83f 	bl	b9408 <_ZN9TCPClient9availableEv>
   b738a:	2800      	cmp	r0, #0
   b738c:	d0fa      	beq.n	b7384 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b738e:	4620      	mov	r0, r4
   b7390:	f001 fe24 	bl	b8fdc <_ZN9TCPClient4readEv>
}
   b7394:	b2c0      	uxtb	r0, r0
   b7396:	bd10      	pop	{r4, pc}

000b7398 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b7398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b739c:	4605      	mov	r5, r0
   b739e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b73a0:	f7ff ffee 	bl	b7380 <_ZN4MQTT8readByteEv>
   b73a4:	69eb      	ldr	r3, [r5, #28]
   b73a6:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b73a8:	69eb      	ldr	r3, [r5, #28]
   b73aa:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b73ae:	f04f 0901 	mov.w	r9, #1
   b73b2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b73b6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b73b8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b73ba:	4628      	mov	r0, r5
   b73bc:	f7ff ffe0 	bl	b7380 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b73c0:	4626      	mov	r6, r4
   b73c2:	69eb      	ldr	r3, [r5, #28]
   b73c4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b73c6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b73ca:	fb13 f309 	smulbb	r3, r3, r9
   b73ce:	441f      	add	r7, r3
        buffer[len++] = digit;
   b73d0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b73d2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b73d4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b73d6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b73d8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b73dc:	d4ed      	bmi.n	b73ba <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b73de:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b73e0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b73e4:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b73e8:	d11e      	bne.n	b7428 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b73ea:	4628      	mov	r0, r5
   b73ec:	f7ff ffc8 	bl	b7380 <_ZN4MQTT8readByteEv>
   b73f0:	69eb      	ldr	r3, [r5, #28]
   b73f2:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b73f4:	4628      	mov	r0, r5
   b73f6:	f7ff ffc3 	bl	b7380 <_ZN4MQTT8readByteEv>
   b73fa:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b73fc:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b73fe:	b2b6      	uxth	r6, r6
   b7400:	69eb      	ldr	r3, [r5, #28]
   b7402:	b2a4      	uxth	r4, r4
   b7404:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b7406:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b7408:	b2b6      	uxth	r6, r6
   b740a:	42be      	cmp	r6, r7
   b740c:	d20e      	bcs.n	b742c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b740e:	4628      	mov	r0, r5
   b7410:	f7ff ffb6 	bl	b7380 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b7414:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b7418:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b741a:	bf84      	itt	hi
   b741c:	69eb      	ldrhi	r3, [r5, #28]
   b741e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b7420:	3401      	adds	r4, #1
   b7422:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b7424:	3601      	adds	r6, #1
   b7426:	e7ef      	b.n	b7408 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b7428:	2600      	movs	r6, #0
   b742a:	e7ed      	b.n	b7408 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b742c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b7430:	42a3      	cmp	r3, r4
   b7432:	bf2c      	ite	cs
   b7434:	4620      	movcs	r0, r4
   b7436:	2000      	movcc	r0, #0
   b7438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b743c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b743c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7440:	4615      	mov	r5, r2
   b7442:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b7444:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b7446:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b7448:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b744a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b744c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b744e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b7452:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b7456:	f103 0401 	add.w	r4, r3, #1
   b745a:	4403      	add	r3, r0
            digit |= 0x80;
   b745c:	bf88      	it	hi
   b745e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b7462:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b7466:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b746a:	b2e4      	uxtb	r4, r4
   b746c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b7470:	d81e      	bhi.n	b74b0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b7472:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b7476:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b747a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b747c:	4622      	mov	r2, r4
   b747e:	a901      	add	r1, sp, #4
   b7480:	4428      	add	r0, r5
    buf[4-llen] = header;
   b7482:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b7486:	f002 fc8a 	bl	b9d9e <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b748a:	1c72      	adds	r2, r6, #1
   b748c:	4422      	add	r2, r4
   b748e:	4641      	mov	r1, r8
   b7490:	4638      	mov	r0, r7
   b7492:	f001 fd8e 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
   b7496:	4605      	mov	r5, r0
   b7498:	f000 fdba 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b749c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b749e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b74a0:	4432      	add	r2, r6
   b74a2:	b2a8      	uxth	r0, r5
}
   b74a4:	1a13      	subs	r3, r2, r0
   b74a6:	4258      	negs	r0, r3
   b74a8:	4158      	adcs	r0, r3
   b74aa:	b002      	add	sp, #8
   b74ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b74b0:	4623      	mov	r3, r4
   b74b2:	e7ca      	b.n	b744a <_ZN4MQTT5writeEhPht+0xe>

000b74b4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b74b4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b74b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74b8:	4605      	mov	r5, r0
    pos += 2;
   b74ba:	b298      	uxth	r0, r3
   b74bc:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b74be:	5cce      	ldrb	r6, [r1, r3]
   b74c0:	b29c      	uxth	r4, r3
   b74c2:	b156      	cbz	r6, b74da <_ZN4MQTT11writeStringEPKcPht+0x26>
   b74c4:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b74c8:	4584      	cmp	ip, r0
   b74ca:	f103 0701 	add.w	r7, r3, #1
   b74ce:	d904      	bls.n	b74da <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b74d0:	1c44      	adds	r4, r0, #1
   b74d2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b74d4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b74d6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b74d8:	e7f1      	b.n	b74be <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b74da:	b299      	uxth	r1, r3
   b74dc:	1a41      	subs	r1, r0, r1
   b74de:	440a      	add	r2, r1
   b74e0:	0a21      	lsrs	r1, r4, #8
   b74e2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b74e6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b74ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74ec <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b74ec:	b538      	push	{r3, r4, r5, lr}
   b74ee:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b74f0:	f001 feac 	bl	b924c <_ZN9TCPClient9connectedEv>
   b74f4:	2800      	cmp	r0, #0
   b74f6:	bf14      	ite	ne
   b74f8:	2501      	movne	r5, #1
   b74fa:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b74fc:	d102      	bne.n	b7504 <_ZN4MQTT11isConnectedEv+0x18>
   b74fe:	4620      	mov	r0, r4
   b7500:	f001 ffdc 	bl	b94bc <_ZN9TCPClient4stopEv>
    return rc;
}
   b7504:	4628      	mov	r0, r5
   b7506:	bd38      	pop	{r3, r4, r5, pc}

000b7508 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b7508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b750c:	b088      	sub	sp, #32
   b750e:	4604      	mov	r4, r0
   b7510:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b7514:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7518:	4689      	mov	r9, r1
   b751a:	4617      	mov	r7, r2
   b751c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b751e:	f7ff ffe5 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b7522:	4605      	mov	r5, r0
   b7524:	2800      	cmp	r0, #0
   b7526:	f040 80cd 	bne.w	b76c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b752a:	4621      	mov	r1, r4
   b752c:	a801      	add	r0, sp, #4
   b752e:	f7ff febd 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b7532:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7534:	2900      	cmp	r1, #0
   b7536:	f040 8088 	bne.w	b764a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b753a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b753e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b7540:	462b      	mov	r3, r5
   b7542:	4620      	mov	r0, r4
   b7544:	f001 fe04 	bl	b9150 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b7548:	2800      	cmp	r0, #0
   b754a:	d07a      	beq.n	b7642 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b754c:	2301      	movs	r3, #1
   b754e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b7550:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b7554:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b7556:	2b04      	cmp	r3, #4
   b7558:	4b5b      	ldr	r3, [pc, #364]	; (b76c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b755a:	f040 8081 	bne.w	b7660 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b755e:	6818      	ldr	r0, [r3, #0]
   b7560:	8899      	ldrh	r1, [r3, #4]
   b7562:	799b      	ldrb	r3, [r3, #6]
   b7564:	f8ad 100c 	strh.w	r1, [sp, #12]
   b7568:	f88d 300e 	strb.w	r3, [sp, #14]
   b756c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b756e:	f8c2 0005 	str.w	r0, [r2, #5]
   b7572:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b7576:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b757a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b757e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b7580:	230c      	movs	r3, #12
            if (willTopic) {
   b7582:	f1b8 0f00 	cmp.w	r8, #0
   b7586:	f000 8081 	beq.w	b768c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b758a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b758e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b7592:	0140      	lsls	r0, r0, #5
   b7594:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b7598:	f040 0006 	orr.w	r0, r0, #6
   b759c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b759e:	f1ba 0f00 	cmp.w	sl, #0
   b75a2:	d101      	bne.n	b75a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b75a4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b75a8:	b11f      	cbz	r7, b75b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b75aa:	2e00      	cmp	r6, #0
   b75ac:	d170      	bne.n	b7690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b75ae:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b75b2:	69e2      	ldr	r2, [r4, #28]
   b75b4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b75b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b75b8:	69e1      	ldr	r1, [r4, #28]
   b75ba:	1c58      	adds	r0, r3, #1
   b75bc:	1212      	asrs	r2, r2, #8
   b75be:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b75c0:	1c9a      	adds	r2, r3, #2
   b75c2:	69e1      	ldr	r1, [r4, #28]
   b75c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b75c6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b75c8:	3303      	adds	r3, #3
   b75ca:	69e2      	ldr	r2, [r4, #28]
   b75cc:	4649      	mov	r1, r9
   b75ce:	4620      	mov	r0, r4
   b75d0:	f7ff ff70 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
   b75d4:	4603      	mov	r3, r0
            if (willTopic) {
   b75d6:	f1b8 0f00 	cmp.w	r8, #0
   b75da:	d00b      	beq.n	b75f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b75dc:	69e2      	ldr	r2, [r4, #28]
   b75de:	4641      	mov	r1, r8
   b75e0:	4620      	mov	r0, r4
   b75e2:	f7ff ff67 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b75e6:	69e2      	ldr	r2, [r4, #28]
   b75e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b75ea:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b75ec:	4620      	mov	r0, r4
   b75ee:	f7ff ff61 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
   b75f2:	4603      	mov	r3, r0
            if(user != NULL) {
   b75f4:	b167      	cbz	r7, b7610 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b75f6:	69e2      	ldr	r2, [r4, #28]
   b75f8:	4639      	mov	r1, r7
   b75fa:	4620      	mov	r0, r4
   b75fc:	f7ff ff5a 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
   b7600:	4603      	mov	r3, r0
                if(pass != NULL) {
   b7602:	b12e      	cbz	r6, b7610 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b7604:	69e2      	ldr	r2, [r4, #28]
   b7606:	4631      	mov	r1, r6
   b7608:	4620      	mov	r0, r4
   b760a:	f7ff ff53 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
   b760e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b7610:	3b05      	subs	r3, #5
   b7612:	69e2      	ldr	r2, [r4, #28]
   b7614:	b29b      	uxth	r3, r3
   b7616:	2110      	movs	r1, #16
   b7618:	4620      	mov	r0, r4
   b761a:	f7ff ff0f 	bl	b743c <_ZN4MQTT5writeEhPht>
   b761e:	f000 fcf7 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b7622:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b7626:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b762a:	4620      	mov	r0, r4
   b762c:	f001 feec 	bl	b9408 <_ZN9TCPClient9availableEv>
   b7630:	bb88      	cbnz	r0, b7696 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b7632:	f000 fced 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b7636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b7638:	1ac0      	subs	r0, r0, r3
   b763a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b763c:	4373      	muls	r3, r6
   b763e:	4298      	cmp	r0, r3
   b7640:	d9f3      	bls.n	b762a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b7642:	4620      	mov	r0, r4
   b7644:	f001 ff3a 	bl	b94bc <_ZN9TCPClient4stopEv>
   b7648:	e035      	b.n	b76b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b764a:	a802      	add	r0, sp, #8
   b764c:	f001 f8f2 	bl	b8834 <_ZN9IPAddressC1EPKh>
   b7650:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b7654:	462b      	mov	r3, r5
   b7656:	a902      	add	r1, sp, #8
   b7658:	4620      	mov	r0, r4
   b765a:	f001 fe59 	bl	b9310 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b765e:	e773      	b.n	b7548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b7660:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b7664:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b7668:	7bdb      	ldrb	r3, [r3, #15]
   b766a:	f10d 0c08 	add.w	ip, sp, #8
   b766e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b7672:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b7676:	ab02      	add	r3, sp, #8
   b7678:	cb03      	ldmia	r3!, {r0, r1}
   b767a:	f8c2 0005 	str.w	r0, [r2, #5]
   b767e:	f8c2 1009 	str.w	r1, [r2, #9]
   b7682:	f89c 3000 	ldrb.w	r3, [ip]
   b7686:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b7688:	230e      	movs	r3, #14
   b768a:	e77a      	b.n	b7582 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b768c:	2002      	movs	r0, #2
   b768e:	e786      	b.n	b759e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b7690:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b7694:	e78d      	b.n	b75b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b7696:	a902      	add	r1, sp, #8
   b7698:	4620      	mov	r0, r4
   b769a:	f7ff fe7d 	bl	b7398 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b769e:	2804      	cmp	r0, #4
   b76a0:	d1cf      	bne.n	b7642 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b76a2:	69e3      	ldr	r3, [r4, #28]
   b76a4:	78de      	ldrb	r6, [r3, #3]
   b76a6:	2e00      	cmp	r6, #0
   b76a8:	d1cb      	bne.n	b7642 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b76aa:	f000 fcb1 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b76ae:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b76b0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b76b2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b76b6:	a801      	add	r0, sp, #4
   b76b8:	f7ff fe03 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b76bc:	4628      	mov	r0, r5
   b76be:	b008      	add	sp, #32
   b76c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b76c4:	2500      	movs	r5, #0
   b76c6:	e7f9      	b.n	b76bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b76c8:	000bbd8c 	.word	0x000bbd8c

000b76cc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b76cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b76ce:	2301      	movs	r3, #1
   b76d0:	2204      	movs	r2, #4
   b76d2:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b76d6:	2300      	movs	r3, #0
   b76d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b76dc:	e9cd 3300 	strd	r3, r3, [sp]
   b76e0:	461a      	mov	r2, r3
   b76e2:	f7ff ff11 	bl	b7508 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b76e6:	b007      	add	sp, #28
   b76e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b76ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b76ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76f0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b76f4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b76f8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b76fc:	4604      	mov	r4, r0
   b76fe:	468b      	mov	fp, r1
   b7700:	4616      	mov	r6, r2
   b7702:	461f      	mov	r7, r3
    if (isConnected()) {
   b7704:	f7ff fef2 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b7708:	4682      	mov	sl, r0
   b770a:	2800      	cmp	r0, #0
   b770c:	d051      	beq.n	b77b2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b770e:	4621      	mov	r1, r4
   b7710:	a801      	add	r0, sp, #4
   b7712:	f7ff fdcb 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b7716:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b771a:	69e0      	ldr	r0, [r4, #28]
   b771c:	2100      	movs	r1, #0
   b771e:	f002 fb4c 	bl	b9dba <memset>
        length = writeString(topic, buffer, length);
   b7722:	2305      	movs	r3, #5
   b7724:	69e2      	ldr	r2, [r4, #28]
   b7726:	4659      	mov	r1, fp
   b7728:	4620      	mov	r0, r4
   b772a:	f7ff fec3 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b772e:	1e6b      	subs	r3, r5, #1
   b7730:	2b01      	cmp	r3, #1
   b7732:	d815      	bhi.n	b7760 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b7734:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b7736:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b7738:	3101      	adds	r1, #1
   b773a:	b289      	uxth	r1, r1
   b773c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b773e:	0a09      	lsrs	r1, r1, #8
   b7740:	5419      	strb	r1, [r3, r0]
   b7742:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b7744:	69e3      	ldr	r3, [r4, #28]
   b7746:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b7748:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b774a:	3002      	adds	r0, #2
   b774c:	5499      	strb	r1, [r3, r2]
   b774e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b7750:	f1b8 0f00 	cmp.w	r8, #0
   b7754:	d004      	beq.n	b7760 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b7756:	8c23      	ldrh	r3, [r4, #32]
   b7758:	1c5a      	adds	r2, r3, #1
   b775a:	8422      	strh	r2, [r4, #32]
   b775c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b7760:	2100      	movs	r1, #0
   b7762:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b7764:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b7766:	69e2      	ldr	r2, [r4, #28]
   b7768:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b776a:	d90a      	bls.n	b7782 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b776c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b7770:	459c      	cmp	ip, r3
   b7772:	d906      	bls.n	b7782 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b7774:	f816 c001 	ldrb.w	ip, [r6, r1]
   b7778:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b777c:	3101      	adds	r1, #1
   b777e:	b289      	uxth	r1, r1
   b7780:	e7ef      	b.n	b7762 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b7782:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b7786:	2900      	cmp	r1, #0
   b7788:	bf0c      	ite	eq
   b778a:	2130      	moveq	r1, #48	; 0x30
   b778c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b778e:	f1b9 0f00 	cmp.w	r9, #0
   b7792:	d001      	beq.n	b7798 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b7794:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b7798:	2d02      	cmp	r5, #2
   b779a:	d10e      	bne.n	b77ba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b779c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b77a0:	3b05      	subs	r3, #5
   b77a2:	b29b      	uxth	r3, r3
   b77a4:	4620      	mov	r0, r4
   b77a6:	f7ff fe49 	bl	b743c <_ZN4MQTT5writeEhPht>
   b77aa:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b77ac:	a801      	add	r0, sp, #4
   b77ae:	f7ff fd88 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b77b2:	4650      	mov	r0, sl
   b77b4:	b003      	add	sp, #12
   b77b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b77ba:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b77bc:	bf08      	it	eq
   b77be:	f041 0102 	orreq.w	r1, r1, #2
   b77c2:	e7ed      	b.n	b77a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b77c4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b77c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b77c6:	9c08      	ldr	r4, [sp, #32]
   b77c8:	9403      	str	r4, [sp, #12]
   b77ca:	2400      	movs	r4, #0
   b77cc:	9402      	str	r4, [sp, #8]
   b77ce:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b77d2:	9401      	str	r4, [sp, #4]
   b77d4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b77d8:	9400      	str	r4, [sp, #0]
   b77da:	f7ff ff87 	bl	b76ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b77de:	b004      	add	sp, #16
   b77e0:	bd10      	pop	{r4, pc}

000b77e2 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b77e2:	b530      	push	{r4, r5, lr}
   b77e4:	b087      	sub	sp, #28
   b77e6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b77e8:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b77ea:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b77ec:	9204      	str	r2, [sp, #16]
   b77ee:	f7fd f943 	bl	b4a78 <strlen>
   b77f2:	2500      	movs	r5, #0
   b77f4:	4603      	mov	r3, r0
   b77f6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b77fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b77fe:	9500      	str	r5, [sp, #0]
   b7800:	4620      	mov	r0, r4
   b7802:	f7ff ffdf 	bl	b77c4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b7806:	b007      	add	sp, #28
   b7808:	bd30      	pop	{r4, r5, pc}

000b780a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b780a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b780c:	4604      	mov	r4, r0
   b780e:	460e      	mov	r6, r1
    if (isConnected()) {
   b7810:	f7ff fe6c 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b7814:	4605      	mov	r5, r0
   b7816:	b1c8      	cbz	r0, b784c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b7818:	4621      	mov	r1, r4
   b781a:	a801      	add	r0, sp, #4
   b781c:	f7ff fd46 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b7820:	69e3      	ldr	r3, [r4, #28]
   b7822:	2262      	movs	r2, #98	; 0x62
   b7824:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b7826:	69e3      	ldr	r3, [r4, #28]
   b7828:	2202      	movs	r2, #2
   b782a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b782c:	69e3      	ldr	r3, [r4, #28]
   b782e:	0a32      	lsrs	r2, r6, #8
   b7830:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b7832:	69e3      	ldr	r3, [r4, #28]
   b7834:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b7836:	69e1      	ldr	r1, [r4, #28]
   b7838:	2204      	movs	r2, #4
   b783a:	4620      	mov	r0, r4
   b783c:	f001 fbb9 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
   b7840:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b7842:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b7844:	bf18      	it	ne
   b7846:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b7848:	f7ff fd3b 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b784c:	4628      	mov	r0, r5
   b784e:	b002      	add	sp, #8
   b7850:	bd70      	pop	{r4, r5, r6, pc}

000b7852 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b7852:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7854:	4604      	mov	r4, r0
   b7856:	460e      	mov	r6, r1
    if (isConnected()) {
   b7858:	f7ff fe48 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b785c:	4605      	mov	r5, r0
   b785e:	b1c8      	cbz	r0, b7894 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b7860:	4621      	mov	r1, r4
   b7862:	a801      	add	r0, sp, #4
   b7864:	f7ff fd22 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b7868:	69e3      	ldr	r3, [r4, #28]
   b786a:	2272      	movs	r2, #114	; 0x72
   b786c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b786e:	69e3      	ldr	r3, [r4, #28]
   b7870:	2202      	movs	r2, #2
   b7872:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b7874:	69e3      	ldr	r3, [r4, #28]
   b7876:	0a32      	lsrs	r2, r6, #8
   b7878:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b787a:	69e3      	ldr	r3, [r4, #28]
   b787c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b787e:	69e1      	ldr	r1, [r4, #28]
   b7880:	2204      	movs	r2, #4
   b7882:	4620      	mov	r0, r4
   b7884:	f001 fb95 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
   b7888:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b788a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b788c:	bf18      	it	ne
   b788e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b7890:	f7ff fd17 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b7894:	4628      	mov	r0, r5
   b7896:	b002      	add	sp, #8
   b7898:	bd70      	pop	{r4, r5, r6, pc}

000b789a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b789a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b789e:	ed2d 8b02 	vpush	{d8}
   b78a2:	b087      	sub	sp, #28
   b78a4:	af00      	add	r7, sp, #0
   b78a6:	4604      	mov	r4, r0
    if (isConnected()) {
   b78a8:	f7ff fe20 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b78ac:	4681      	mov	r9, r0
   b78ae:	b1f8      	cbz	r0, b78f0 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b78b0:	4621      	mov	r1, r4
   b78b2:	f107 0014 	add.w	r0, r7, #20
   b78b6:	f7ff fcf9 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
   b78ba:	f000 fba9 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b78be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b78c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b78c4:	4353      	muls	r3, r2
   b78c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b78c8:	1a82      	subs	r2, r0, r2
   b78ca:	429a      	cmp	r2, r3
   b78cc:	4606      	mov	r6, r0
   b78ce:	d803      	bhi.n	b78d8 <_ZN4MQTT4loopEv+0x3e>
   b78d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b78d2:	1a82      	subs	r2, r0, r2
   b78d4:	4293      	cmp	r3, r2
   b78d6:	d221      	bcs.n	b791c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b78d8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b78dc:	b17b      	cbz	r3, b78fe <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b78de:	4620      	mov	r0, r4
   b78e0:	f001 fdec 	bl	b94bc <_ZN9TCPClient4stopEv>
                return false;
   b78e4:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b78e8:	f107 0014 	add.w	r0, r7, #20
   b78ec:	f7ff fce9 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b78f0:	4648      	mov	r0, r9
   b78f2:	371c      	adds	r7, #28
   b78f4:	46bd      	mov	sp, r7
   b78f6:	ecbd 8b02 	vpop	{d8}
   b78fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b78fe:	69e2      	ldr	r2, [r4, #28]
   b7900:	21c0      	movs	r1, #192	; 0xc0
   b7902:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b7904:	69e2      	ldr	r2, [r4, #28]
   b7906:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b7908:	69e1      	ldr	r1, [r4, #28]
   b790a:	2202      	movs	r2, #2
   b790c:	4620      	mov	r0, r4
   b790e:	f001 fb50 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b7912:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b7916:	2301      	movs	r3, #1
   b7918:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b791c:	4620      	mov	r0, r4
   b791e:	f001 fd73 	bl	b9408 <_ZN9TCPClient9availableEv>
   b7922:	2800      	cmp	r0, #0
   b7924:	d0e0      	beq.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b7926:	f107 0113 	add.w	r1, r7, #19
   b792a:	4620      	mov	r0, r4
   b792c:	f7ff fd34 	bl	b7398 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b7930:	4683      	mov	fp, r0
   b7932:	2800      	cmp	r0, #0
   b7934:	d0d8      	beq.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b7936:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b7938:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b793a:	7819      	ldrb	r1, [r3, #0]
   b793c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b7940:	2a30      	cmp	r2, #48	; 0x30
   b7942:	d17f      	bne.n	b7a44 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b7944:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b7948:	f1ba 0f00 	cmp.w	sl, #0
   b794c:	d0cc      	beq.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b794e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b7952:	466a      	mov	r2, sp
   b7954:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b7958:	eb03 020c 	add.w	r2, r3, ip
   b795c:	7851      	ldrb	r1, [r2, #1]
   b795e:	7895      	ldrb	r5, [r2, #2]
   b7960:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b7964:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b7966:	f105 0208 	add.w	r2, r5, #8
   b796a:	4669      	mov	r1, sp
   b796c:	08d2      	lsrs	r2, r2, #3
   b796e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b7972:	4695      	mov	sp, r2
   b7974:	f10c 0203 	add.w	r2, ip, #3
   b7978:	60fa      	str	r2, [r7, #12]
   b797a:	eb03 0e02 	add.w	lr, r3, r2
   b797e:	eb0d 0205 	add.w	r2, sp, r5
   b7982:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b7984:	f8c7 d008 	str.w	sp, [r7, #8]
   b7988:	607a      	str	r2, [r7, #4]
   b798a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b798e:	428a      	cmp	r2, r1
   b7990:	d006      	beq.n	b79a0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b7992:	460a      	mov	r2, r1
   b7994:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b7998:	f802 8b01 	strb.w	r8, [r2], #1
   b799c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b799e:	e7f4      	b.n	b798a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b79a0:	2200      	movs	r2, #0
   b79a2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b79a4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79a8:	68f9      	ldr	r1, [r7, #12]
   b79aa:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b79ae:	ebab 020c 	sub.w	r2, fp, ip
   b79b2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b79b4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b79b8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79bc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b79be:	d125      	bne.n	b7a0c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79c0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b79c4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b79c6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79c8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b79cc:	f10c 0105 	add.w	r1, ip, #5
   b79d0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b79d2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79d4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b79d8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b79da:	69e3      	ldr	r3, [r4, #28]
   b79dc:	2240      	movs	r2, #64	; 0x40
   b79de:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b79e0:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b79e2:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b79e6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b79ea:	69e3      	ldr	r3, [r4, #28]
   b79ec:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b79f0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b79f2:	69e3      	ldr	r3, [r4, #28]
   b79f4:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b79f8:	69e1      	ldr	r1, [r4, #28]
   b79fa:	2204      	movs	r2, #4
   b79fc:	4620      	mov	r0, r4
   b79fe:	f001 fad8 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b7a02:	6266      	str	r6, [r4, #36]	; 0x24
   b7a04:	ee18 3a10 	vmov	r3, s16
   b7a08:	469d      	mov	sp, r3
   b7a0a:	e76d      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b7a0c:	f1b8 0f04 	cmp.w	r8, #4
   b7a10:	d115      	bne.n	b7a3e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b7a12:	f813 e001 	ldrb.w	lr, [r3, r1]
   b7a16:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b7a18:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b7a1a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b7a1e:	f10c 0105 	add.w	r1, ip, #5
   b7a22:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b7a24:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b7a26:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b7a2a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b7a2c:	69e3      	ldr	r3, [r4, #28]
   b7a2e:	2250      	movs	r2, #80	; 0x50
   b7a30:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b7a32:	69e3      	ldr	r3, [r4, #28]
   b7a34:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b7a36:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b7a3a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b7a3c:	e7d5      	b.n	b79ea <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b7a3e:	4419      	add	r1, r3
   b7a40:	47d0      	blx	sl
   b7a42:	e7df      	b.n	b7a04 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b7a44:	2a50      	cmp	r2, #80	; 0x50
   b7a46:	d108      	bne.n	b7a5a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b7a48:	789a      	ldrb	r2, [r3, #2]
   b7a4a:	78d9      	ldrb	r1, [r3, #3]
   b7a4c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b7a50:	b289      	uxth	r1, r1
   b7a52:	4620      	mov	r0, r4
   b7a54:	f7ff fed9 	bl	b780a <_ZN4MQTT14publishReleaseEt>
   b7a58:	e746      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b7a5a:	2a40      	cmp	r2, #64	; 0x40
   b7a5c:	d112      	bne.n	b7a84 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b7a5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b7a60:	2a00      	cmp	r2, #0
   b7a62:	f43f af41 	beq.w	b78e8 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b7a66:	f1bb 0f04 	cmp.w	fp, #4
   b7a6a:	f47f af3d 	bne.w	b78e8 <_ZN4MQTT4loopEv+0x4e>
   b7a6e:	f011 0f06 	tst.w	r1, #6
   b7a72:	f47f af39 	bne.w	b78e8 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b7a76:	7899      	ldrb	r1, [r3, #2]
   b7a78:	78d8      	ldrb	r0, [r3, #3]
   b7a7a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b7a7e:	b280      	uxth	r0, r0
   b7a80:	4790      	blx	r2
   b7a82:	e731      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b7a84:	2a60      	cmp	r2, #96	; 0x60
   b7a86:	d108      	bne.n	b7a9a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b7a88:	789a      	ldrb	r2, [r3, #2]
   b7a8a:	78d9      	ldrb	r1, [r3, #3]
   b7a8c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b7a90:	b289      	uxth	r1, r1
   b7a92:	4620      	mov	r0, r4
   b7a94:	f7ff fedd 	bl	b7852 <_ZN4MQTT15publishCompleteEt>
   b7a98:	e726      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b7a9a:	2a70      	cmp	r2, #112	; 0x70
   b7a9c:	d0df      	beq.n	b7a5e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b7a9e:	2a90      	cmp	r2, #144	; 0x90
   b7aa0:	f43f af22 	beq.w	b78e8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b7aa4:	2ac0      	cmp	r2, #192	; 0xc0
   b7aa6:	d10a      	bne.n	b7abe <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b7aa8:	22d0      	movs	r2, #208	; 0xd0
   b7aaa:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b7aac:	69e3      	ldr	r3, [r4, #28]
   b7aae:	2200      	movs	r2, #0
   b7ab0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b7ab2:	69e1      	ldr	r1, [r4, #28]
   b7ab4:	2202      	movs	r2, #2
   b7ab6:	4620      	mov	r0, r4
   b7ab8:	f001 fa7b 	bl	b8fb2 <_ZN9TCPClient5writeEPKhj>
   b7abc:	e714      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b7abe:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b7ac0:	bf04      	itt	eq
   b7ac2:	2300      	moveq	r3, #0
   b7ac4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b7ac8:	e70e      	b.n	b78e8 <_ZN4MQTT4loopEv+0x4e>

000b7aca <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b7aca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7acc:	4604      	mov	r4, r0
   b7ace:	460f      	mov	r7, r1
   b7ad0:	4616      	mov	r6, r2
    if (isConnected()) {
   b7ad2:	f7ff fd0b 	bl	b74ec <_ZN4MQTT11isConnectedEv>
   b7ad6:	4605      	mov	r5, r0
   b7ad8:	b310      	cbz	r0, b7b20 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b7ada:	4621      	mov	r1, r4
   b7adc:	a801      	add	r0, sp, #4
   b7ade:	f7ff fbe5 	bl	b72ac <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b7ae2:	8c23      	ldrh	r3, [r4, #32]
   b7ae4:	3301      	adds	r3, #1
   b7ae6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b7ae8:	b1eb      	cbz	r3, b7b26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b7aea:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b7aec:	8c23      	ldrh	r3, [r4, #32]
   b7aee:	69e2      	ldr	r2, [r4, #28]
   b7af0:	0a1b      	lsrs	r3, r3, #8
   b7af2:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b7af4:	69e3      	ldr	r3, [r4, #28]
   b7af6:	8c22      	ldrh	r2, [r4, #32]
   b7af8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b7afa:	69e2      	ldr	r2, [r4, #28]
   b7afc:	2307      	movs	r3, #7
   b7afe:	4639      	mov	r1, r7
   b7b00:	4620      	mov	r0, r4
   b7b02:	f7ff fcd7 	bl	b74b4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b7b06:	69e3      	ldr	r3, [r4, #28]
   b7b08:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b7b0a:	3804      	subs	r0, #4
   b7b0c:	b283      	uxth	r3, r0
   b7b0e:	69e2      	ldr	r2, [r4, #28]
   b7b10:	2182      	movs	r1, #130	; 0x82
   b7b12:	4620      	mov	r0, r4
   b7b14:	f7ff fc92 	bl	b743c <_ZN4MQTT5writeEhPht>
   b7b18:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b7b1a:	a801      	add	r0, sp, #4
   b7b1c:	f7ff fbd1 	bl	b72c2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b7b20:	4628      	mov	r0, r5
   b7b22:	b003      	add	sp, #12
   b7b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b7b26:	2301      	movs	r3, #1
   b7b28:	e7df      	b.n	b7aea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b7b2a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b7b2a:	2200      	movs	r2, #0
   b7b2c:	f7ff bfcd 	b.w	b7aca <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b7b30 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b7b30:	6803      	ldr	r3, [r0, #0]
   b7b32:	b2c9      	uxtb	r1, r1
   b7b34:	689b      	ldr	r3, [r3, #8]
   b7b36:	4718      	bx	r3

000b7b38 <_ZN5AHT2011isConnectedEv>:
}

//Ping the AHT20's I2C address
//If we get a response, we are correctly communicating with the AHT20
bool AHT20::isConnected()
{
   b7b38:	b510      	push	{r4, lr}
   b7b3a:	4604      	mov	r4, r0
    _i2cPort->beginTransmission(_deviceAddress);
   b7b3c:	7901      	ldrb	r1, [r0, #4]
   b7b3e:	6800      	ldr	r0, [r0, #0]
   b7b40:	f000 fdec 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() == 0)
   b7b44:	6820      	ldr	r0, [r4, #0]
   b7b46:	f000 fdf4 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
   b7b4a:	b168      	cbz	r0, b7b68 <_ZN5AHT2011isConnectedEv+0x30>
        return true;

    //If IC failed to respond, give it 20ms more for Power On Startup
    //Datasheet pg 7
    delay(20);
   b7b4c:	2014      	movs	r0, #20
   b7b4e:	f000 fd1b 	bl	b8588 <delay>

    _i2cPort->beginTransmission(_deviceAddress);
   b7b52:	7921      	ldrb	r1, [r4, #4]
   b7b54:	6820      	ldr	r0, [r4, #0]
   b7b56:	f000 fde1 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() == 0)
   b7b5a:	6820      	ldr	r0, [r4, #0]
   b7b5c:	f000 fde9 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
   b7b60:	fab0 f080 	clz	r0, r0
   b7b64:	0940      	lsrs	r0, r0, #5
        return true;

    return false;
}
   b7b66:	bd10      	pop	{r4, pc}
        return true;
   b7b68:	2001      	movs	r0, #1
   b7b6a:	e7fc      	b.n	b7b66 <_ZN5AHT2011isConnectedEv+0x2e>

000b7b6c <_ZN5AHT209getStatusEv>:

/*------------------------ Measurement Helpers ---------------------------*/

uint8_t AHT20::getStatus()
{
   b7b6c:	b510      	push	{r4, lr}
   b7b6e:	4604      	mov	r4, r0
    _i2cPort->requestFrom(_deviceAddress, (uint8_t)1);
   b7b70:	7901      	ldrb	r1, [r0, #4]
   b7b72:	6800      	ldr	r0, [r0, #0]
   b7b74:	2201      	movs	r2, #1
   b7b76:	f000 fdce 	bl	b8716 <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
   b7b7a:	6820      	ldr	r0, [r4, #0]
   b7b7c:	6803      	ldr	r3, [r0, #0]
   b7b7e:	691b      	ldr	r3, [r3, #16]
   b7b80:	4798      	blx	r3
   b7b82:	b120      	cbz	r0, b7b8e <_ZN5AHT209getStatusEv+0x22>
   b7b84:	6820      	ldr	r0, [r4, #0]
        return (_i2cPort->read());
   b7b86:	6803      	ldr	r3, [r0, #0]
   b7b88:	695b      	ldr	r3, [r3, #20]
   b7b8a:	4798      	blx	r3
   b7b8c:	b2c0      	uxtb	r0, r0
    return (0);
}
   b7b8e:	bd10      	pop	{r4, pc}

000b7b90 <_ZN5AHT2012isCalibratedEv>:

//Returns the state of the cal bit in the status byte
bool AHT20::isCalibrated()
{
   b7b90:	b508      	push	{r3, lr}
    return (getStatus() & (1 << 3));
   b7b92:	f7ff ffeb 	bl	b7b6c <_ZN5AHT209getStatusEv>
}
   b7b96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b7b9a:	bd08      	pop	{r3, pc}

000b7b9c <_ZN5AHT206isBusyEv>:

//Returns the state of the busy bit in the status byte
bool AHT20::isBusy()
{
   b7b9c:	b508      	push	{r3, lr}
    return (getStatus() & (1 << 7));
   b7b9e:	f7ff ffe5 	bl	b7b6c <_ZN5AHT209getStatusEv>
}
   b7ba2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   b7ba6:	bd08      	pop	{r3, pc}

000b7ba8 <_ZN5AHT2010initializeEv>:

bool AHT20::initialize()
{
   b7ba8:	b510      	push	{r4, lr}
   b7baa:	4604      	mov	r4, r0
    _i2cPort->beginTransmission(_deviceAddress);
   b7bac:	7901      	ldrb	r1, [r0, #4]
   b7bae:	6800      	ldr	r0, [r0, #0]
   b7bb0:	f000 fdb4 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(sfe_aht20_reg_initialize);
   b7bb4:	6820      	ldr	r0, [r4, #0]
   b7bb6:	21be      	movs	r1, #190	; 0xbe
   b7bb8:	f7ff ffba 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    _i2cPort->write(0x80);
   b7bbc:	6820      	ldr	r0, [r4, #0]
   b7bbe:	2180      	movs	r1, #128	; 0x80
   b7bc0:	f7ff ffb6 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    _i2cPort->write(0x00);
   b7bc4:	6820      	ldr	r0, [r4, #0]
   b7bc6:	2100      	movs	r1, #0
   b7bc8:	f7ff ffb2 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    if (_i2cPort->endTransmission() == 0)
   b7bcc:	6820      	ldr	r0, [r4, #0]
   b7bce:	f000 fdb0 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
        return true;
    return false;
}
   b7bd2:	fab0 f080 	clz	r0, r0
   b7bd6:	0940      	lsrs	r0, r0, #5
   b7bd8:	bd10      	pop	{r4, pc}

000b7bda <_ZN5AHT2018triggerMeasurementEv>:

bool AHT20::triggerMeasurement()
{
   b7bda:	b510      	push	{r4, lr}
   b7bdc:	4604      	mov	r4, r0
    _i2cPort->beginTransmission(_deviceAddress);
   b7bde:	7901      	ldrb	r1, [r0, #4]
   b7be0:	6800      	ldr	r0, [r0, #0]
   b7be2:	f000 fd9b 	bl	b871c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(sfe_aht20_reg_measure);
   b7be6:	6820      	ldr	r0, [r4, #0]
   b7be8:	21ac      	movs	r1, #172	; 0xac
   b7bea:	f7ff ffa1 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    _i2cPort->write(0x33);
   b7bee:	6820      	ldr	r0, [r4, #0]
   b7bf0:	2133      	movs	r1, #51	; 0x33
   b7bf2:	f7ff ff9d 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    _i2cPort->write(0x00);
   b7bf6:	6820      	ldr	r0, [r4, #0]
   b7bf8:	2100      	movs	r1, #0
   b7bfa:	f7ff ff99 	bl	b7b30 <_ZN7TwoWire5writeEi.isra.0>
    if (_i2cPort->endTransmission() == 0)
   b7bfe:	6820      	ldr	r0, [r4, #0]
   b7c00:	f000 fd97 	bl	b8732 <_ZN7TwoWire15endTransmissionEv>
        return true;
    return false;
}
   b7c04:	fab0 f080 	clz	r0, r0
   b7c08:	0940      	lsrs	r0, r0, #5
   b7c0a:	bd10      	pop	{r4, pc}

000b7c0c <_ZN5AHT205beginER7TwoWire>:
{
   b7c0c:	b538      	push	{r3, r4, r5, lr}
    _deviceAddress = AHT20_DEFAULT_ADDRESS; //We had hoped the AHT20 would support two addresses but it doesn't seem to
   b7c0e:	2338      	movs	r3, #56	; 0x38
    _i2cPort = &wirePort; //Grab the port the user wants to communicate on
   b7c10:	6001      	str	r1, [r0, #0]
    _deviceAddress = AHT20_DEFAULT_ADDRESS; //We had hoped the AHT20 would support two addresses but it doesn't seem to
   b7c12:	7103      	strb	r3, [r0, #4]
{
   b7c14:	4604      	mov	r4, r0
    if (isConnected() == false)
   b7c16:	f7ff ff8f 	bl	b7b38 <_ZN5AHT2011isConnectedEv>
   b7c1a:	b908      	cbnz	r0, b7c20 <_ZN5AHT205beginER7TwoWire+0x14>
        return false;
   b7c1c:	2000      	movs	r0, #0
}
   b7c1e:	bd38      	pop	{r3, r4, r5, pc}
    delay(40);
   b7c20:	2028      	movs	r0, #40	; 0x28
   b7c22:	f000 fcb1 	bl	b8588 <delay>
    if (isCalibrated() == false)
   b7c26:	4620      	mov	r0, r4
   b7c28:	f7ff ffb2 	bl	b7b90 <_ZN5AHT2012isCalibratedEv>
   b7c2c:	b158      	cbz	r0, b7c46 <_ZN5AHT205beginER7TwoWire+0x3a>
    if (isCalibrated() == false)
   b7c2e:	4620      	mov	r0, r4
   b7c30:	f7ff ffae 	bl	b7b90 <_ZN5AHT2012isCalibratedEv>
   b7c34:	2800      	cmp	r0, #0
   b7c36:	d0f1      	beq.n	b7c1c <_ZN5AHT205beginER7TwoWire+0x10>
    sensorQueried.temperature = true;
   b7c38:	7c23      	ldrb	r3, [r4, #16]
   b7c3a:	f023 0303 	bic.w	r3, r3, #3
   b7c3e:	f043 0303 	orr.w	r3, r3, #3
   b7c42:	7423      	strb	r3, [r4, #16]
    return true;
   b7c44:	e7eb      	b.n	b7c1e <_ZN5AHT205beginER7TwoWire+0x12>
        initialize();
   b7c46:	4620      	mov	r0, r4
   b7c48:	f7ff ffae 	bl	b7ba8 <_ZN5AHT2010initializeEv>
        triggerMeasurement();
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	f7ff ffc4 	bl	b7bda <_ZN5AHT2018triggerMeasurementEv>
        delay(75); //Wait for measurement to complete
   b7c52:	204b      	movs	r0, #75	; 0x4b
   b7c54:	f000 fc98 	bl	b8588 <delay>
   b7c58:	2566      	movs	r5, #102	; 0x66
        while (isBusy())
   b7c5a:	4620      	mov	r0, r4
   b7c5c:	f7ff ff9e 	bl	b7b9c <_ZN5AHT206isBusyEv>
   b7c60:	b138      	cbz	r0, b7c72 <_ZN5AHT205beginER7TwoWire+0x66>
            delay(1);
   b7c62:	2001      	movs	r0, #1
            if (counter++ > 100)
   b7c64:	3d01      	subs	r5, #1
            delay(1);
   b7c66:	f000 fc8f 	bl	b8588 <delay>
            if (counter++ > 100)
   b7c6a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7c6e:	d1f4      	bne.n	b7c5a <_ZN5AHT205beginER7TwoWire+0x4e>
   b7c70:	e7d4      	b.n	b7c1c <_ZN5AHT205beginER7TwoWire+0x10>
        if (isCalibrated() == false)
   b7c72:	4620      	mov	r0, r4
   b7c74:	f7ff ff8c 	bl	b7b90 <_ZN5AHT2012isCalibratedEv>
   b7c78:	2800      	cmp	r0, #0
   b7c7a:	d1d8      	bne.n	b7c2e <_ZN5AHT205beginER7TwoWire+0x22>
   b7c7c:	e7ce      	b.n	b7c1c <_ZN5AHT205beginER7TwoWire+0x10>

000b7c7e <_ZN5AHT208readDataEv>:

//Loads the
void AHT20::readData()
{
   b7c7e:	b538      	push	{r3, r4, r5, lr}
    //Clear previous data
    sensorData.temperature = 0;
   b7c80:	2300      	movs	r3, #0
    sensorData.humidity = 0;
   b7c82:	e9c0 3302 	strd	r3, r3, [r0, #8]

    if (_i2cPort->requestFrom(_deviceAddress, (uint8_t)6) > 0)
   b7c86:	7901      	ldrb	r1, [r0, #4]
{
   b7c88:	4604      	mov	r4, r0
    if (_i2cPort->requestFrom(_deviceAddress, (uint8_t)6) > 0)
   b7c8a:	2206      	movs	r2, #6
   b7c8c:	6800      	ldr	r0, [r0, #0]
   b7c8e:	f000 fd42 	bl	b8716 <_ZN7TwoWire11requestFromEhj>
   b7c92:	2800      	cmp	r0, #0
   b7c94:	d030      	beq.n	b7cf8 <_ZN5AHT208readDataEv+0x7a>
    {
        uint8_t state = _i2cPort->read();
   b7c96:	6820      	ldr	r0, [r4, #0]
   b7c98:	6803      	ldr	r3, [r0, #0]
   b7c9a:	695b      	ldr	r3, [r3, #20]
   b7c9c:	4798      	blx	r3

        uint32_t incoming = 0;
        incoming |= (uint32_t)_i2cPort->read() << (8 * 2);
   b7c9e:	6820      	ldr	r0, [r4, #0]
   b7ca0:	6803      	ldr	r3, [r0, #0]
   b7ca2:	695b      	ldr	r3, [r3, #20]
   b7ca4:	4798      	blx	r3
   b7ca6:	4605      	mov	r5, r0
        incoming |= (uint32_t)_i2cPort->read() << (8 * 1);
   b7ca8:	6820      	ldr	r0, [r4, #0]
   b7caa:	6803      	ldr	r3, [r0, #0]
   b7cac:	695b      	ldr	r3, [r3, #20]
   b7cae:	4798      	blx	r3
   b7cb0:	0202      	lsls	r2, r0, #8
        uint8_t midByte = _i2cPort->read();
   b7cb2:	6820      	ldr	r0, [r4, #0]
   b7cb4:	6803      	ldr	r3, [r0, #0]
   b7cb6:	695b      	ldr	r3, [r3, #20]
        incoming |= (uint32_t)_i2cPort->read() << (8 * 1);
   b7cb8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
        uint8_t midByte = _i2cPort->read();
   b7cbc:	4798      	blx	r3

        incoming |= midByte;
   b7cbe:	b2c3      	uxtb	r3, r0
        sensorData.humidity = incoming >> 4;

        sensorData.temperature = (uint32_t)midByte << (8 * 2);
   b7cc0:	0400      	lsls	r0, r0, #16
   b7cc2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
        incoming |= midByte;
   b7cc6:	432b      	orrs	r3, r5
        sensorData.temperature = (uint32_t)midByte << (8 * 2);
   b7cc8:	60e0      	str	r0, [r4, #12]
        sensorData.humidity = incoming >> 4;
   b7cca:	091b      	lsrs	r3, r3, #4
        sensorData.temperature |= (uint32_t)_i2cPort->read() << (8 * 1);
   b7ccc:	6820      	ldr	r0, [r4, #0]
        sensorData.humidity = incoming >> 4;
   b7cce:	60a3      	str	r3, [r4, #8]
        sensorData.temperature |= (uint32_t)_i2cPort->read() << (8 * 1);
   b7cd0:	6803      	ldr	r3, [r0, #0]
   b7cd2:	695b      	ldr	r3, [r3, #20]
   b7cd4:	4798      	blx	r3
   b7cd6:	68e3      	ldr	r3, [r4, #12]
   b7cd8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b7cdc:	60e0      	str	r0, [r4, #12]
        sensorData.temperature |= (uint32_t)_i2cPort->read() << (8 * 0);
   b7cde:	6820      	ldr	r0, [r4, #0]
   b7ce0:	6803      	ldr	r3, [r0, #0]
   b7ce2:	695b      	ldr	r3, [r3, #20]
   b7ce4:	4798      	blx	r3
   b7ce6:	68e3      	ldr	r3, [r4, #12]
   b7ce8:	4318      	orrs	r0, r3

        //Need to get rid of data in bits > 20
        sensorData.temperature = sensorData.temperature & ~(0xFFF00000);

        //Mark data as fresh
        sensorQueried.temperature = false;
   b7cea:	7c23      	ldrb	r3, [r4, #16]
        sensorData.temperature = sensorData.temperature & ~(0xFFF00000);
   b7cec:	f3c0 0013 	ubfx	r0, r0, #0, #20
        sensorQueried.temperature = false;
   b7cf0:	f023 0303 	bic.w	r3, r3, #3
        sensorData.temperature = sensorData.temperature & ~(0xFFF00000);
   b7cf4:	60e0      	str	r0, [r4, #12]
        sensorQueried.temperature = false;
   b7cf6:	7423      	strb	r3, [r4, #16]
        sensorQueried.humidity = false;
    }
}
   b7cf8:	bd38      	pop	{r3, r4, r5, pc}

000b7cfa <_ZN5AHT209availableEv>:
//Triggers a measurement if one has not been previously started, then returns false
//If measurement has been started, checks to see if complete.
//If not complete, returns false
//If complete, readData(), mark measurement as not started, return true
bool AHT20::available()
{
   b7cfa:	b570      	push	{r4, r5, r6, lr}
    if (measurementStarted == false)
   b7cfc:	7946      	ldrb	r6, [r0, #5]
{
   b7cfe:	4604      	mov	r4, r0
    if (measurementStarted == false)
   b7d00:	b92e      	cbnz	r6, b7d0e <_ZN5AHT209availableEv+0x14>
    {
        triggerMeasurement();
   b7d02:	f7ff ff6a 	bl	b7bda <_ZN5AHT2018triggerMeasurementEv>
        measurementStarted = true;
   b7d06:	2301      	movs	r3, #1
   b7d08:	7163      	strb	r3, [r4, #5]
    }

    readData();
    measurementStarted = false;
    return (true);
}
   b7d0a:	4630      	mov	r0, r6
   b7d0c:	bd70      	pop	{r4, r5, r6, pc}
    if (isBusy() == true)
   b7d0e:	f7ff ff45 	bl	b7b9c <_ZN5AHT206isBusyEv>
   b7d12:	4605      	mov	r5, r0
   b7d14:	b920      	cbnz	r0, b7d20 <_ZN5AHT209availableEv+0x26>
    readData();
   b7d16:	4620      	mov	r0, r4
   b7d18:	f7ff ffb1 	bl	b7c7e <_ZN5AHT208readDataEv>
    measurementStarted = false;
   b7d1c:	7165      	strb	r5, [r4, #5]
    return (true);
   b7d1e:	e7f4      	b.n	b7d0a <_ZN5AHT209availableEv+0x10>
        return (false);
   b7d20:	2600      	movs	r6, #0
   b7d22:	e7f2      	b.n	b7d0a <_ZN5AHT209availableEv+0x10>

000b7d24 <_ZN5AHT2014getTemperatureEv>:
}

/*------------------------- Make Measurements ----------------------------*/

float AHT20::getTemperature()
{
   b7d24:	b538      	push	{r3, r4, r5, lr}
    if (sensorQueried.temperature == true)
   b7d26:	7c03      	ldrb	r3, [r0, #16]
   b7d28:	07db      	lsls	r3, r3, #31
{
   b7d2a:	4604      	mov	r4, r0
    if (sensorQueried.temperature == true)
   b7d2c:	d516      	bpl.n	b7d5c <_ZN5AHT2014getTemperatureEv+0x38>
    {
        //We've got old data so trigger new measurement
        triggerMeasurement();
   b7d2e:	f7ff ff54 	bl	b7bda <_ZN5AHT2018triggerMeasurementEv>

        delay(75); //Wait for measurement to complete
   b7d32:	204b      	movs	r0, #75	; 0x4b
   b7d34:	f000 fc28 	bl	b8588 <delay>
   b7d38:	2566      	movs	r5, #102	; 0x66

        uint8_t counter = 0;
        while (isBusy())
   b7d3a:	4620      	mov	r0, r4
   b7d3c:	f7ff ff2e 	bl	b7b9c <_ZN5AHT206isBusyEv>
   b7d40:	b148      	cbz	r0, b7d56 <_ZN5AHT2014getTemperatureEv+0x32>
        {
            delay(1);
   b7d42:	2001      	movs	r0, #1
            if (counter++ > 100)
   b7d44:	3d01      	subs	r5, #1
            delay(1);
   b7d46:	f000 fc1f 	bl	b8588 <delay>
            if (counter++ > 100)
   b7d4a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7d4e:	d1f4      	bne.n	b7d3a <_ZN5AHT2014getTemperatureEv+0x16>
                return (false); //Give up after 100ms
   b7d50:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b7d7c <_ZN5AHT2014getTemperatureEv+0x58>
   b7d54:	e010      	b.n	b7d78 <_ZN5AHT2014getTemperatureEv+0x54>
        }

        readData();
   b7d56:	4620      	mov	r0, r4
   b7d58:	f7ff ff91 	bl	b7c7e <_ZN5AHT208readDataEv>
    }

    //From datasheet pg 8
    float tempCelsius = ((float)sensorData.temperature / 1048576) * 200 - 50;
   b7d5c:	edd4 7a03 	vldr	s15, [r4, #12]
   b7d60:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7d80 <_ZN5AHT2014getTemperatureEv+0x5c>
   b7d64:	ed9f 0a07 	vldr	s0, [pc, #28]	; b7d84 <_ZN5AHT2014getTemperatureEv+0x60>

    //Mark data as old
    sensorQueried.temperature = true;
   b7d68:	7c23      	ldrb	r3, [r4, #16]
    float tempCelsius = ((float)sensorData.temperature / 1048576) * 200 - 50;
   b7d6a:	eefb 7ac6 	vcvt.f32.u32	s15, s15, #20
    sensorQueried.temperature = true;
   b7d6e:	f043 0301 	orr.w	r3, r3, #1
    float tempCelsius = ((float)sensorData.temperature / 1048576) * 200 - 50;
   b7d72:	eea7 0a87 	vfma.f32	s0, s15, s14
    sensorQueried.temperature = true;
   b7d76:	7423      	strb	r3, [r4, #16]

    return tempCelsius;
}
   b7d78:	bd38      	pop	{r3, r4, r5, pc}
   b7d7a:	bf00      	nop
   b7d7c:	00000000 	.word	0x00000000
   b7d80:	43480000 	.word	0x43480000
   b7d84:	c2480000 	.word	0xc2480000

000b7d88 <_ZN5AHT2011getHumidityEv>:

float AHT20::getHumidity()
{
   b7d88:	b538      	push	{r3, r4, r5, lr}
    if (sensorQueried.humidity == true)
   b7d8a:	7c03      	ldrb	r3, [r0, #16]
   b7d8c:	079b      	lsls	r3, r3, #30
{
   b7d8e:	4604      	mov	r4, r0
    if (sensorQueried.humidity == true)
   b7d90:	d516      	bpl.n	b7dc0 <_ZN5AHT2011getHumidityEv+0x38>
    {
        //We've got old data so trigger new measurement
        triggerMeasurement();
   b7d92:	f7ff ff22 	bl	b7bda <_ZN5AHT2018triggerMeasurementEv>

        delay(75); //Wait for measurement to complete
   b7d96:	204b      	movs	r0, #75	; 0x4b
   b7d98:	f000 fbf6 	bl	b8588 <delay>
   b7d9c:	2566      	movs	r5, #102	; 0x66

        uint8_t counter = 0;
        while (isBusy())
   b7d9e:	4620      	mov	r0, r4
   b7da0:	f7ff fefc 	bl	b7b9c <_ZN5AHT206isBusyEv>
   b7da4:	b148      	cbz	r0, b7dba <_ZN5AHT2011getHumidityEv+0x32>
        {
            delay(1);
   b7da6:	2001      	movs	r0, #1
            if (counter++ > 100)
   b7da8:	3d01      	subs	r5, #1
            delay(1);
   b7daa:	f000 fbed 	bl	b8588 <delay>
            if (counter++ > 100)
   b7dae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7db2:	d1f4      	bne.n	b7d9e <_ZN5AHT2011getHumidityEv+0x16>
                return (false); //Give up after 100ms
   b7db4:	ed9f 0a09 	vldr	s0, [pc, #36]	; b7ddc <_ZN5AHT2011getHumidityEv+0x54>
   b7db8:	e00e      	b.n	b7dd8 <_ZN5AHT2011getHumidityEv+0x50>
        }

        readData();
   b7dba:	4620      	mov	r0, r4
   b7dbc:	f7ff ff5f 	bl	b7c7e <_ZN5AHT208readDataEv>
    }

    //From datasheet pg 8
    float relHumidity = ((float)sensorData.humidity / 1048576) * 100;
   b7dc0:	ed94 0a02 	vldr	s0, [r4, #8]

    //Mark data as old
    sensorQueried.humidity = true;
   b7dc4:	7c23      	ldrb	r3, [r4, #16]
    float relHumidity = ((float)sensorData.humidity / 1048576) * 100;
   b7dc6:	eddf 7a06 	vldr	s15, [pc, #24]	; b7de0 <_ZN5AHT2011getHumidityEv+0x58>
   b7dca:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
    sensorQueried.humidity = true;
   b7dce:	f043 0302 	orr.w	r3, r3, #2
    float relHumidity = ((float)sensorData.humidity / 1048576) * 100;
   b7dd2:	ee20 0a27 	vmul.f32	s0, s0, s15
    sensorQueried.humidity = true;
   b7dd6:	7423      	strb	r3, [r4, #16]

    return relHumidity;
   b7dd8:	bd38      	pop	{r3, r4, r5, pc}
   b7dda:	bf00      	nop
   b7ddc:	00000000 	.word	0x00000000
   b7de0:	42c80000 	.word	0x42c80000

000b7de4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b7de4:	f000 bbd0 	b.w	b8588 <delay>

000b7de8 <_Z11BlynkMillisv>:
   b7de8:	f000 b912 	b.w	b8010 <HAL_Timer_Get_Milli_Seconds>

000b7dec <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b7dec:	4770      	bx	lr

000b7dee <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b7dee:	4770      	bx	lr

000b7df0 <BlynkNoOpCbk>:
{}
   b7df0:	4770      	bx	lr
	...

000b7df4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b7df4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b7df6:	bf5a      	itte	pl
   b7df8:	4b02      	ldrpl	r3, [pc, #8]	; (b7e04 <GetReadHandler+0x10>)
   b7dfa:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b7dfe:	2000      	movmi	r0, #0
#endif
}
   b7e00:	4770      	bx	lr
   b7e02:	bf00      	nop
   b7e04:	000bcac4 	.word	0x000bcac4

000b7e08 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b7e08:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b7e0a:	bf5a      	itte	pl
   b7e0c:	4b02      	ldrpl	r3, [pc, #8]	; (b7e18 <GetWriteHandler+0x10>)
   b7e0e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b7e12:	2000      	movmi	r0, #0
#endif
}
   b7e14:	4770      	bx	lr
   b7e16:	bf00      	nop
   b7e18:	000bccc4 	.word	0x000bccc4

000b7e1c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b7e1c:	b510      	push	{r4, lr}
   b7e1e:	4b06      	ldr	r3, [pc, #24]	; (b7e38 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b7e20:	6003      	str	r3, [r0, #0]
   b7e22:	4604      	mov	r4, r0
	if (mutex) {
   b7e24:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7e26:	b108      	cbz	r0, b7e2c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b7e28:	f000 f8ba 	bl	b7fa0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	f7fe fc4f 	bl	b66d0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b7e32:	4620      	mov	r0, r4
   b7e34:	bd10      	pop	{r4, pc}
   b7e36:	bf00      	nop
   b7e38:	000bcecc 	.word	0x000bcecc

000b7e3c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b7e3c:	b510      	push	{r4, lr}
   b7e3e:	4604      	mov	r4, r0
}
   b7e40:	f7ff ffec 	bl	b7e1c <_ZN16OledWingAdafruitD1Ev>
   b7e44:	4620      	mov	r0, r4
   b7e46:	2170      	movs	r1, #112	; 0x70
   b7e48:	f7fc fe77 	bl	b4b3a <_ZdlPvj>
   b7e4c:	4620      	mov	r0, r4
   b7e4e:	bd10      	pop	{r4, pc}

000b7e50 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b7e50:	b530      	push	{r4, r5, lr}
   b7e52:	b085      	sub	sp, #20
   b7e54:	4604      	mov	r4, r0
   b7e56:	460d      	mov	r5, r1
   b7e58:	f001 fe18 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b7e5c:	4a10      	ldr	r2, [pc, #64]	; (b7ea0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b7e5e:	4911      	ldr	r1, [pc, #68]	; (b7ea4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b7e60:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b7e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7e68:	2180      	movs	r1, #128	; 0x80
   b7e6a:	4603      	mov	r3, r0
   b7e6c:	9200      	str	r2, [sp, #0]
   b7e6e:	4620      	mov	r0, r4
   b7e70:	2220      	movs	r2, #32
   b7e72:	f7fe fca5 	bl	b67c0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b7e76:	4b0c      	ldr	r3, [pc, #48]	; (b7ea8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b7e78:	6023      	str	r3, [r4, #0]
   b7e7a:	2300      	movs	r3, #0
   b7e7c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b7e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b7e84:	f7ff f89e 	bl	b6fc4 <_ZN8DebounceC1Ev>
   b7e88:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b7e8c:	f7ff f89a 	bl	b6fc4 <_ZN8DebounceC1Ev>
   b7e90:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b7e94:	f7ff f896 	bl	b6fc4 <_ZN8DebounceC1Ev>
}
   b7e98:	4620      	mov	r0, r4
   b7e9a:	b005      	add	sp, #20
   b7e9c:	bd30      	pop	{r4, r5, pc}
   b7e9e:	bf00      	nop
   b7ea0:	00061a80 	.word	0x00061a80
   b7ea4:	000186a0 	.word	0x000186a0
   b7ea8:	000bcecc 	.word	0x000bcecc

000b7eac <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b7eac:	b513      	push	{r0, r1, r4, lr}
   b7eae:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b7eb0:	3050      	adds	r0, #80	; 0x50
   b7eb2:	f000 f86d 	bl	b7f90 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b7eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7eb8:	07d9      	lsls	r1, r3, #31
   b7eba:	d505      	bpl.n	b7ec8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b7ebc:	2202      	movs	r2, #2
   b7ebe:	2104      	movs	r1, #4
   b7ec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b7ec4:	f7ff f892 	bl	b6fec <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b7ec8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7eca:	079a      	lsls	r2, r3, #30
   b7ecc:	d505      	bpl.n	b7eda <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b7ece:	2200      	movs	r2, #0
   b7ed0:	2103      	movs	r1, #3
   b7ed2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b7ed6:	f7ff f889 	bl	b6fec <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b7eda:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7edc:	075b      	lsls	r3, r3, #29
   b7ede:	d505      	bpl.n	b7eec <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b7ee0:	2202      	movs	r2, #2
   b7ee2:	4611      	mov	r1, r2
   b7ee4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b7ee8:	f7ff f880 	bl	b6fec <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b7eec:	2301      	movs	r3, #1
   b7eee:	9300      	str	r3, [sp, #0]
   b7ef0:	223c      	movs	r2, #60	; 0x3c
   b7ef2:	2102      	movs	r1, #2
   b7ef4:	4620      	mov	r0, r4
   b7ef6:	f7fe fd6b 	bl	b69d0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b7efa:	b002      	add	sp, #8
   b7efc:	bd10      	pop	{r4, pc}

000b7efe <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b7efe:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b7f00:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b7f02:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b7f04:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b7f06:	d502      	bpl.n	b7f0e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b7f08:	3058      	adds	r0, #88	; 0x58
   b7f0a:	f7ff f87c 	bl	b7006 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b7f0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7f10:	079a      	lsls	r2, r3, #30
   b7f12:	d503      	bpl.n	b7f1c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b7f14:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b7f18:	f7ff f875 	bl	b7006 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b7f1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7f1e:	075b      	lsls	r3, r3, #29
   b7f20:	d505      	bpl.n	b7f2e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b7f22:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b7f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b7f2a:	f7ff b86c 	b.w	b7006 <_ZN8Debounce6updateEv>
}
   b7f2e:	bd10      	pop	{r4, pc}

000b7f30 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7f30:	b508      	push	{r3, lr}
   b7f32:	4b02      	ldr	r3, [pc, #8]	; (b7f3c <os_thread_yield+0xc>)
   b7f34:	681b      	ldr	r3, [r3, #0]
   b7f36:	68db      	ldr	r3, [r3, #12]
   b7f38:	9301      	str	r3, [sp, #4]
   b7f3a:	bd08      	pop	{r3, pc}
   b7f3c:	00030248 	.word	0x00030248

000b7f40 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b7f40:	b508      	push	{r3, lr}
   b7f42:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <os_thread_scheduling+0xc>)
   b7f44:	681b      	ldr	r3, [r3, #0]
   b7f46:	69db      	ldr	r3, [r3, #28]
   b7f48:	9301      	str	r3, [sp, #4]
   b7f4a:	bd08      	pop	{r3, pc}
   b7f4c:	00030248 	.word	0x00030248

000b7f50 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b7f50:	b508      	push	{r3, lr}
   b7f52:	4b02      	ldr	r3, [pc, #8]	; (b7f5c <os_timer_create+0xc>)
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	6a1b      	ldr	r3, [r3, #32]
   b7f58:	9301      	str	r3, [sp, #4]
   b7f5a:	bd08      	pop	{r3, pc}
   b7f5c:	00030248 	.word	0x00030248

000b7f60 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b7f60:	b508      	push	{r3, lr}
   b7f62:	4b02      	ldr	r3, [pc, #8]	; (b7f6c <os_timer_destroy+0xc>)
   b7f64:	681b      	ldr	r3, [r3, #0]
   b7f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f68:	9301      	str	r3, [sp, #4]
   b7f6a:	bd08      	pop	{r3, pc}
   b7f6c:	00030248 	.word	0x00030248

000b7f70 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b7f70:	b508      	push	{r3, lr}
   b7f72:	4b02      	ldr	r3, [pc, #8]	; (b7f7c <os_timer_get_id+0xc>)
   b7f74:	681b      	ldr	r3, [r3, #0]
   b7f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7f78:	9301      	str	r3, [sp, #4]
   b7f7a:	bd08      	pop	{r3, pc}
   b7f7c:	00030248 	.word	0x00030248

000b7f80 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b7f80:	b508      	push	{r3, lr}
   b7f82:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <os_timer_change+0xc>)
   b7f84:	681b      	ldr	r3, [r3, #0]
   b7f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f88:	9301      	str	r3, [sp, #4]
   b7f8a:	bd08      	pop	{r3, pc}
   b7f8c:	00030248 	.word	0x00030248

000b7f90 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b7f90:	b508      	push	{r3, lr}
   b7f92:	4b02      	ldr	r3, [pc, #8]	; (b7f9c <os_mutex_create+0xc>)
   b7f94:	681b      	ldr	r3, [r3, #0]
   b7f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7f98:	9301      	str	r3, [sp, #4]
   b7f9a:	bd08      	pop	{r3, pc}
   b7f9c:	00030248 	.word	0x00030248

000b7fa0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b7fa0:	b508      	push	{r3, lr}
   b7fa2:	4b02      	ldr	r3, [pc, #8]	; (b7fac <os_mutex_destroy+0xc>)
   b7fa4:	681b      	ldr	r3, [r3, #0]
   b7fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7fa8:	9301      	str	r3, [sp, #4]
   b7faa:	bd08      	pop	{r3, pc}
   b7fac:	00030248 	.word	0x00030248

000b7fb0 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b7fb0:	b508      	push	{r3, lr}
   b7fb2:	4b02      	ldr	r3, [pc, #8]	; (b7fbc <os_mutex_lock+0xc>)
   b7fb4:	681b      	ldr	r3, [r3, #0]
   b7fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7fb8:	9301      	str	r3, [sp, #4]
   b7fba:	bd08      	pop	{r3, pc}
   b7fbc:	00030248 	.word	0x00030248

000b7fc0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b7fc0:	b508      	push	{r3, lr}
   b7fc2:	4b02      	ldr	r3, [pc, #8]	; (b7fcc <os_mutex_unlock+0xc>)
   b7fc4:	681b      	ldr	r3, [r3, #0]
   b7fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7fc8:	9301      	str	r3, [sp, #4]
   b7fca:	bd08      	pop	{r3, pc}
   b7fcc:	00030248 	.word	0x00030248

000b7fd0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7fd0:	b508      	push	{r3, lr}
   b7fd2:	4b02      	ldr	r3, [pc, #8]	; (b7fdc <os_mutex_recursive_create+0xc>)
   b7fd4:	681b      	ldr	r3, [r3, #0]
   b7fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7fd8:	9301      	str	r3, [sp, #4]
   b7fda:	bd08      	pop	{r3, pc}
   b7fdc:	00030248 	.word	0x00030248

000b7fe0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7fe0:	b508      	push	{r3, lr}
   b7fe2:	4b02      	ldr	r3, [pc, #8]	; (b7fec <os_timer_set_id+0xc>)
   b7fe4:	681b      	ldr	r3, [r3, #0]
   b7fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7fe8:	9301      	str	r3, [sp, #4]
   b7fea:	bd08      	pop	{r3, pc}
   b7fec:	00030248 	.word	0x00030248

000b7ff0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7ff0:	b508      	push	{r3, lr}
   b7ff2:	4b02      	ldr	r3, [pc, #8]	; (b7ffc <HAL_RNG_GetRandomNumber+0xc>)
   b7ff4:	681b      	ldr	r3, [r3, #0]
   b7ff6:	685b      	ldr	r3, [r3, #4]
   b7ff8:	9301      	str	r3, [sp, #4]
   b7ffa:	bd08      	pop	{r3, pc}
   b7ffc:	00030218 	.word	0x00030218

000b8000 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8000:	b508      	push	{r3, lr}
   b8002:	4b02      	ldr	r3, [pc, #8]	; (b800c <HAL_Delay_Microseconds+0xc>)
   b8004:	681b      	ldr	r3, [r3, #0]
   b8006:	68db      	ldr	r3, [r3, #12]
   b8008:	9301      	str	r3, [sp, #4]
   b800a:	bd08      	pop	{r3, pc}
   b800c:	00030218 	.word	0x00030218

000b8010 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8010:	b508      	push	{r3, lr}
   b8012:	4b02      	ldr	r3, [pc, #8]	; (b801c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8014:	681b      	ldr	r3, [r3, #0]
   b8016:	695b      	ldr	r3, [r3, #20]
   b8018:	9301      	str	r3, [sp, #4]
   b801a:	bd08      	pop	{r3, pc}
   b801c:	00030218 	.word	0x00030218

000b8020 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b8020:	b508      	push	{r3, lr}
   b8022:	4b02      	ldr	r3, [pc, #8]	; (b802c <hal_pin_validate_function+0xc>)
   b8024:	681b      	ldr	r3, [r3, #0]
   b8026:	685b      	ldr	r3, [r3, #4]
   b8028:	9301      	str	r3, [sp, #4]
   b802a:	bd08      	pop	{r3, pc}
   b802c:	0003022c 	.word	0x0003022c

000b8030 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b8030:	b508      	push	{r3, lr}
   b8032:	4b02      	ldr	r3, [pc, #8]	; (b803c <hal_gpio_mode+0xc>)
   b8034:	681b      	ldr	r3, [r3, #0]
   b8036:	689b      	ldr	r3, [r3, #8]
   b8038:	9301      	str	r3, [sp, #4]
   b803a:	bd08      	pop	{r3, pc}
   b803c:	0003022c 	.word	0x0003022c

000b8040 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b8040:	b508      	push	{r3, lr}
   b8042:	4b02      	ldr	r3, [pc, #8]	; (b804c <hal_gpio_get_mode+0xc>)
   b8044:	681b      	ldr	r3, [r3, #0]
   b8046:	68db      	ldr	r3, [r3, #12]
   b8048:	9301      	str	r3, [sp, #4]
   b804a:	bd08      	pop	{r3, pc}
   b804c:	0003022c 	.word	0x0003022c

000b8050 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b8050:	b508      	push	{r3, lr}
   b8052:	4b02      	ldr	r3, [pc, #8]	; (b805c <hal_gpio_write+0xc>)
   b8054:	681b      	ldr	r3, [r3, #0]
   b8056:	691b      	ldr	r3, [r3, #16]
   b8058:	9301      	str	r3, [sp, #4]
   b805a:	bd08      	pop	{r3, pc}
   b805c:	0003022c 	.word	0x0003022c

000b8060 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b8060:	b508      	push	{r3, lr}
   b8062:	4b02      	ldr	r3, [pc, #8]	; (b806c <hal_gpio_read+0xc>)
   b8064:	681b      	ldr	r3, [r3, #0]
   b8066:	695b      	ldr	r3, [r3, #20]
   b8068:	9301      	str	r3, [sp, #4]
   b806a:	bd08      	pop	{r3, pc}
   b806c:	0003022c 	.word	0x0003022c

000b8070 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b8070:	b508      	push	{r3, lr}
   b8072:	4b02      	ldr	r3, [pc, #8]	; (b807c <HAL_DAC_Write+0xc>)
   b8074:	681b      	ldr	r3, [r3, #0]
   b8076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8078:	9301      	str	r3, [sp, #4]
   b807a:	bd08      	pop	{r3, pc}
   b807c:	0003022c 	.word	0x0003022c

000b8080 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8080:	b508      	push	{r3, lr}
   b8082:	4b02      	ldr	r3, [pc, #8]	; (b808c <hal_adc_read+0xc>)
   b8084:	681b      	ldr	r3, [r3, #0]
   b8086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8088:	9301      	str	r3, [sp, #4]
   b808a:	bd08      	pop	{r3, pc}
   b808c:	0003022c 	.word	0x0003022c

000b8090 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b8090:	b508      	push	{r3, lr}
   b8092:	4b02      	ldr	r3, [pc, #8]	; (b809c <hal_pwm_write_ext+0xc>)
   b8094:	681b      	ldr	r3, [r3, #0]
   b8096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8098:	9301      	str	r3, [sp, #4]
   b809a:	bd08      	pop	{r3, pc}
   b809c:	0003022c 	.word	0x0003022c

000b80a0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b80a0:	b508      	push	{r3, lr}
   b80a2:	4b02      	ldr	r3, [pc, #8]	; (b80ac <hal_i2c_set_speed+0xc>)
   b80a4:	681b      	ldr	r3, [r3, #0]
   b80a6:	681b      	ldr	r3, [r3, #0]
   b80a8:	9301      	str	r3, [sp, #4]
   b80aa:	bd08      	pop	{r3, pc}
   b80ac:	00030228 	.word	0x00030228

000b80b0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b80b0:	b508      	push	{r3, lr}
   b80b2:	4b02      	ldr	r3, [pc, #8]	; (b80bc <hal_i2c_begin+0xc>)
   b80b4:	681b      	ldr	r3, [r3, #0]
   b80b6:	68db      	ldr	r3, [r3, #12]
   b80b8:	9301      	str	r3, [sp, #4]
   b80ba:	bd08      	pop	{r3, pc}
   b80bc:	00030228 	.word	0x00030228

000b80c0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b80c0:	b508      	push	{r3, lr}
   b80c2:	4b02      	ldr	r3, [pc, #8]	; (b80cc <hal_i2c_begin_transmission+0xc>)
   b80c4:	681b      	ldr	r3, [r3, #0]
   b80c6:	699b      	ldr	r3, [r3, #24]
   b80c8:	9301      	str	r3, [sp, #4]
   b80ca:	bd08      	pop	{r3, pc}
   b80cc:	00030228 	.word	0x00030228

000b80d0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b80d0:	b508      	push	{r3, lr}
   b80d2:	4b02      	ldr	r3, [pc, #8]	; (b80dc <hal_i2c_end_transmission+0xc>)
   b80d4:	681b      	ldr	r3, [r3, #0]
   b80d6:	69db      	ldr	r3, [r3, #28]
   b80d8:	9301      	str	r3, [sp, #4]
   b80da:	bd08      	pop	{r3, pc}
   b80dc:	00030228 	.word	0x00030228

000b80e0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b80e0:	b508      	push	{r3, lr}
   b80e2:	4b02      	ldr	r3, [pc, #8]	; (b80ec <hal_i2c_write+0xc>)
   b80e4:	681b      	ldr	r3, [r3, #0]
   b80e6:	6a1b      	ldr	r3, [r3, #32]
   b80e8:	9301      	str	r3, [sp, #4]
   b80ea:	bd08      	pop	{r3, pc}
   b80ec:	00030228 	.word	0x00030228

000b80f0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b80f0:	b508      	push	{r3, lr}
   b80f2:	4b02      	ldr	r3, [pc, #8]	; (b80fc <hal_i2c_available+0xc>)
   b80f4:	681b      	ldr	r3, [r3, #0]
   b80f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b80f8:	9301      	str	r3, [sp, #4]
   b80fa:	bd08      	pop	{r3, pc}
   b80fc:	00030228 	.word	0x00030228

000b8100 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8100:	b508      	push	{r3, lr}
   b8102:	4b02      	ldr	r3, [pc, #8]	; (b810c <hal_i2c_read+0xc>)
   b8104:	681b      	ldr	r3, [r3, #0]
   b8106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8108:	9301      	str	r3, [sp, #4]
   b810a:	bd08      	pop	{r3, pc}
   b810c:	00030228 	.word	0x00030228

000b8110 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8110:	b508      	push	{r3, lr}
   b8112:	4b02      	ldr	r3, [pc, #8]	; (b811c <hal_i2c_peek+0xc>)
   b8114:	681b      	ldr	r3, [r3, #0]
   b8116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8118:	9301      	str	r3, [sp, #4]
   b811a:	bd08      	pop	{r3, pc}
   b811c:	00030228 	.word	0x00030228

000b8120 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8120:	b508      	push	{r3, lr}
   b8122:	4b02      	ldr	r3, [pc, #8]	; (b812c <hal_i2c_flush+0xc>)
   b8124:	681b      	ldr	r3, [r3, #0]
   b8126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8128:	9301      	str	r3, [sp, #4]
   b812a:	bd08      	pop	{r3, pc}
   b812c:	00030228 	.word	0x00030228

000b8130 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8130:	b508      	push	{r3, lr}
   b8132:	4b02      	ldr	r3, [pc, #8]	; (b813c <hal_i2c_is_enabled+0xc>)
   b8134:	681b      	ldr	r3, [r3, #0]
   b8136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8138:	9301      	str	r3, [sp, #4]
   b813a:	bd08      	pop	{r3, pc}
   b813c:	00030228 	.word	0x00030228

000b8140 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8140:	b508      	push	{r3, lr}
   b8142:	4b02      	ldr	r3, [pc, #8]	; (b814c <hal_i2c_init+0xc>)
   b8144:	681b      	ldr	r3, [r3, #0]
   b8146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8148:	9301      	str	r3, [sp, #4]
   b814a:	bd08      	pop	{r3, pc}
   b814c:	00030228 	.word	0x00030228

000b8150 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8150:	b508      	push	{r3, lr}
   b8152:	4b02      	ldr	r3, [pc, #8]	; (b815c <hal_i2c_request_ex+0xc>)
   b8154:	681b      	ldr	r3, [r3, #0]
   b8156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8158:	9301      	str	r3, [sp, #4]
   b815a:	bd08      	pop	{r3, pc}
   b815c:	00030228 	.word	0x00030228

000b8160 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8160:	b508      	push	{r3, lr}
   b8162:	4b02      	ldr	r3, [pc, #8]	; (b816c <if_index_to_name+0xc>)
   b8164:	681b      	ldr	r3, [r3, #0]
   b8166:	695b      	ldr	r3, [r3, #20]
   b8168:	9301      	str	r3, [sp, #4]
   b816a:	bd08      	pop	{r3, pc}
   b816c:	0003026c 	.word	0x0003026c

000b8170 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8170:	b508      	push	{r3, lr}
   b8172:	4b02      	ldr	r3, [pc, #8]	; (b817c <inet_inet_ntop+0xc>)
   b8174:	681b      	ldr	r3, [r3, #0]
   b8176:	695b      	ldr	r3, [r3, #20]
   b8178:	9301      	str	r3, [sp, #4]
   b817a:	bd08      	pop	{r3, pc}
   b817c:	00030264 	.word	0x00030264

000b8180 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b8180:	b508      	push	{r3, lr}
   b8182:	4b02      	ldr	r3, [pc, #8]	; (b818c <inet_htonl+0xc>)
   b8184:	681b      	ldr	r3, [r3, #0]
   b8186:	6a1b      	ldr	r3, [r3, #32]
   b8188:	9301      	str	r3, [sp, #4]
   b818a:	bd08      	pop	{r3, pc}
   b818c:	00030264 	.word	0x00030264

000b8190 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b8190:	b508      	push	{r3, lr}
   b8192:	4b02      	ldr	r3, [pc, #8]	; (b819c <inet_ntohs+0xc>)
   b8194:	681b      	ldr	r3, [r3, #0]
   b8196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8198:	9301      	str	r3, [sp, #4]
   b819a:	bd08      	pop	{r3, pc}
   b819c:	00030264 	.word	0x00030264

000b81a0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b81a0:	b508      	push	{r3, lr}
   b81a2:	4b02      	ldr	r3, [pc, #8]	; (b81ac <inet_htons+0xc>)
   b81a4:	681b      	ldr	r3, [r3, #0]
   b81a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b81a8:	9301      	str	r3, [sp, #4]
   b81aa:	bd08      	pop	{r3, pc}
   b81ac:	00030264 	.word	0x00030264

000b81b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b81b0:	b508      	push	{r3, lr}
   b81b2:	4b02      	ldr	r3, [pc, #8]	; (b81bc <netdb_freeaddrinfo+0xc>)
   b81b4:	681b      	ldr	r3, [r3, #0]
   b81b6:	689b      	ldr	r3, [r3, #8]
   b81b8:	9301      	str	r3, [sp, #4]
   b81ba:	bd08      	pop	{r3, pc}
   b81bc:	00030268 	.word	0x00030268

000b81c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b81c0:	b508      	push	{r3, lr}
   b81c2:	4b02      	ldr	r3, [pc, #8]	; (b81cc <netdb_getaddrinfo+0xc>)
   b81c4:	681b      	ldr	r3, [r3, #0]
   b81c6:	68db      	ldr	r3, [r3, #12]
   b81c8:	9301      	str	r3, [sp, #4]
   b81ca:	bd08      	pop	{r3, pc}
   b81cc:	00030268 	.word	0x00030268

000b81d0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b81d0:	b508      	push	{r3, lr}
   b81d2:	4b02      	ldr	r3, [pc, #8]	; (b81dc <sock_setsockopt+0xc>)
   b81d4:	681b      	ldr	r3, [r3, #0]
   b81d6:	699b      	ldr	r3, [r3, #24]
   b81d8:	9301      	str	r3, [sp, #4]
   b81da:	bd08      	pop	{r3, pc}
   b81dc:	00030238 	.word	0x00030238

000b81e0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b81e0:	b508      	push	{r3, lr}
   b81e2:	4b02      	ldr	r3, [pc, #8]	; (b81ec <sock_close+0xc>)
   b81e4:	681b      	ldr	r3, [r3, #0]
   b81e6:	69db      	ldr	r3, [r3, #28]
   b81e8:	9301      	str	r3, [sp, #4]
   b81ea:	bd08      	pop	{r3, pc}
   b81ec:	00030238 	.word	0x00030238

000b81f0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b81f0:	b508      	push	{r3, lr}
   b81f2:	4b02      	ldr	r3, [pc, #8]	; (b81fc <sock_connect+0xc>)
   b81f4:	681b      	ldr	r3, [r3, #0]
   b81f6:	6a1b      	ldr	r3, [r3, #32]
   b81f8:	9301      	str	r3, [sp, #4]
   b81fa:	bd08      	pop	{r3, pc}
   b81fc:	00030238 	.word	0x00030238

000b8200 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b8200:	b508      	push	{r3, lr}
   b8202:	4b02      	ldr	r3, [pc, #8]	; (b820c <sock_recv+0xc>)
   b8204:	681b      	ldr	r3, [r3, #0]
   b8206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8208:	9301      	str	r3, [sp, #4]
   b820a:	bd08      	pop	{r3, pc}
   b820c:	00030238 	.word	0x00030238

000b8210 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b8210:	b508      	push	{r3, lr}
   b8212:	4b02      	ldr	r3, [pc, #8]	; (b821c <sock_send+0xc>)
   b8214:	681b      	ldr	r3, [r3, #0]
   b8216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8218:	9301      	str	r3, [sp, #4]
   b821a:	bd08      	pop	{r3, pc}
   b821c:	00030238 	.word	0x00030238

000b8220 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b8220:	b508      	push	{r3, lr}
   b8222:	4b02      	ldr	r3, [pc, #8]	; (b822c <sock_socket+0xc>)
   b8224:	681b      	ldr	r3, [r3, #0]
   b8226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8228:	9301      	str	r3, [sp, #4]
   b822a:	bd08      	pop	{r3, pc}
   b822c:	00030238 	.word	0x00030238

000b8230 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8230:	b508      	push	{r3, lr}
   b8232:	4b02      	ldr	r3, [pc, #8]	; (b823c <hal_spi_begin+0xc>)
   b8234:	681b      	ldr	r3, [r3, #0]
   b8236:	681b      	ldr	r3, [r3, #0]
   b8238:	9301      	str	r3, [sp, #4]
   b823a:	bd08      	pop	{r3, pc}
   b823c:	00030230 	.word	0x00030230

000b8240 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8240:	b508      	push	{r3, lr}
   b8242:	4b02      	ldr	r3, [pc, #8]	; (b824c <hal_spi_transfer+0xc>)
   b8244:	681b      	ldr	r3, [r3, #0]
   b8246:	695b      	ldr	r3, [r3, #20]
   b8248:	9301      	str	r3, [sp, #4]
   b824a:	bd08      	pop	{r3, pc}
   b824c:	00030230 	.word	0x00030230

000b8250 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8250:	b508      	push	{r3, lr}
   b8252:	4b02      	ldr	r3, [pc, #8]	; (b825c <hal_spi_init+0xc>)
   b8254:	681b      	ldr	r3, [r3, #0]
   b8256:	69db      	ldr	r3, [r3, #28]
   b8258:	9301      	str	r3, [sp, #4]
   b825a:	bd08      	pop	{r3, pc}
   b825c:	00030230 	.word	0x00030230

000b8260 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8260:	b508      	push	{r3, lr}
   b8262:	4b02      	ldr	r3, [pc, #8]	; (b826c <hal_spi_is_enabled+0xc>)
   b8264:	681b      	ldr	r3, [r3, #0]
   b8266:	6a1b      	ldr	r3, [r3, #32]
   b8268:	9301      	str	r3, [sp, #4]
   b826a:	bd08      	pop	{r3, pc}
   b826c:	00030230 	.word	0x00030230

000b8270 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8270:	b508      	push	{r3, lr}
   b8272:	4b02      	ldr	r3, [pc, #8]	; (b827c <hal_spi_info+0xc>)
   b8274:	681b      	ldr	r3, [r3, #0]
   b8276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8278:	9301      	str	r3, [sp, #4]
   b827a:	bd08      	pop	{r3, pc}
   b827c:	00030230 	.word	0x00030230

000b8280 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8280:	b508      	push	{r3, lr}
   b8282:	4b02      	ldr	r3, [pc, #8]	; (b828c <hal_spi_set_settings+0xc>)
   b8284:	681b      	ldr	r3, [r3, #0]
   b8286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8288:	9301      	str	r3, [sp, #4]
   b828a:	bd08      	pop	{r3, pc}
   b828c:	00030230 	.word	0x00030230

000b8290 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8290:	b508      	push	{r3, lr}
   b8292:	4b02      	ldr	r3, [pc, #8]	; (b829c <hal_spi_acquire+0xc>)
   b8294:	681b      	ldr	r3, [r3, #0]
   b8296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8298:	9301      	str	r3, [sp, #4]
   b829a:	bd08      	pop	{r3, pc}
   b829c:	00030230 	.word	0x00030230

000b82a0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b82a0:	b508      	push	{r3, lr}
   b82a2:	4b02      	ldr	r3, [pc, #8]	; (b82ac <hal_spi_release+0xc>)
   b82a4:	681b      	ldr	r3, [r3, #0]
   b82a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b82a8:	9301      	str	r3, [sp, #4]
   b82aa:	bd08      	pop	{r3, pc}
   b82ac:	00030230 	.word	0x00030230

000b82b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b82b0:	b508      	push	{r3, lr}
   b82b2:	4b02      	ldr	r3, [pc, #8]	; (b82bc <hal_usart_write+0xc>)
   b82b4:	681b      	ldr	r3, [r3, #0]
   b82b6:	68db      	ldr	r3, [r3, #12]
   b82b8:	9301      	str	r3, [sp, #4]
   b82ba:	bd08      	pop	{r3, pc}
   b82bc:	0003023c 	.word	0x0003023c

000b82c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b82c0:	b508      	push	{r3, lr}
   b82c2:	4b02      	ldr	r3, [pc, #8]	; (b82cc <hal_usart_available+0xc>)
   b82c4:	681b      	ldr	r3, [r3, #0]
   b82c6:	691b      	ldr	r3, [r3, #16]
   b82c8:	9301      	str	r3, [sp, #4]
   b82ca:	bd08      	pop	{r3, pc}
   b82cc:	0003023c 	.word	0x0003023c

000b82d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b82d0:	b508      	push	{r3, lr}
   b82d2:	4b02      	ldr	r3, [pc, #8]	; (b82dc <hal_usart_read+0xc>)
   b82d4:	681b      	ldr	r3, [r3, #0]
   b82d6:	695b      	ldr	r3, [r3, #20]
   b82d8:	9301      	str	r3, [sp, #4]
   b82da:	bd08      	pop	{r3, pc}
   b82dc:	0003023c 	.word	0x0003023c

000b82e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b82e0:	b508      	push	{r3, lr}
   b82e2:	4b02      	ldr	r3, [pc, #8]	; (b82ec <hal_usart_peek+0xc>)
   b82e4:	681b      	ldr	r3, [r3, #0]
   b82e6:	699b      	ldr	r3, [r3, #24]
   b82e8:	9301      	str	r3, [sp, #4]
   b82ea:	bd08      	pop	{r3, pc}
   b82ec:	0003023c 	.word	0x0003023c

000b82f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b82f0:	b508      	push	{r3, lr}
   b82f2:	4b02      	ldr	r3, [pc, #8]	; (b82fc <hal_usart_flush+0xc>)
   b82f4:	681b      	ldr	r3, [r3, #0]
   b82f6:	69db      	ldr	r3, [r3, #28]
   b82f8:	9301      	str	r3, [sp, #4]
   b82fa:	bd08      	pop	{r3, pc}
   b82fc:	0003023c 	.word	0x0003023c

000b8300 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8300:	b508      	push	{r3, lr}
   b8302:	4b02      	ldr	r3, [pc, #8]	; (b830c <hal_usart_is_enabled+0xc>)
   b8304:	681b      	ldr	r3, [r3, #0]
   b8306:	6a1b      	ldr	r3, [r3, #32]
   b8308:	9301      	str	r3, [sp, #4]
   b830a:	bd08      	pop	{r3, pc}
   b830c:	0003023c 	.word	0x0003023c

000b8310 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8310:	b508      	push	{r3, lr}
   b8312:	4b02      	ldr	r3, [pc, #8]	; (b831c <hal_usart_available_data_for_write+0xc>)
   b8314:	681b      	ldr	r3, [r3, #0]
   b8316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8318:	9301      	str	r3, [sp, #4]
   b831a:	bd08      	pop	{r3, pc}
   b831c:	0003023c 	.word	0x0003023c

000b8320 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8320:	b508      	push	{r3, lr}
   b8322:	4b02      	ldr	r3, [pc, #8]	; (b832c <hal_usart_init_ex+0xc>)
   b8324:	681b      	ldr	r3, [r3, #0]
   b8326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8328:	9301      	str	r3, [sp, #4]
   b832a:	bd08      	pop	{r3, pc}
   b832c:	0003023c 	.word	0x0003023c

000b8330 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8330:	b508      	push	{r3, lr}
   b8332:	4b02      	ldr	r3, [pc, #8]	; (b833c <HAL_USB_USART_Init+0xc>)
   b8334:	681b      	ldr	r3, [r3, #0]
   b8336:	681b      	ldr	r3, [r3, #0]
   b8338:	9301      	str	r3, [sp, #4]
   b833a:	bd08      	pop	{r3, pc}
   b833c:	0003024c 	.word	0x0003024c

000b8340 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8340:	b508      	push	{r3, lr}
   b8342:	4b02      	ldr	r3, [pc, #8]	; (b834c <HAL_USB_USART_Available_Data+0xc>)
   b8344:	681b      	ldr	r3, [r3, #0]
   b8346:	691b      	ldr	r3, [r3, #16]
   b8348:	9301      	str	r3, [sp, #4]
   b834a:	bd08      	pop	{r3, pc}
   b834c:	0003024c 	.word	0x0003024c

000b8350 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8350:	b508      	push	{r3, lr}
   b8352:	4b02      	ldr	r3, [pc, #8]	; (b835c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8354:	681b      	ldr	r3, [r3, #0]
   b8356:	695b      	ldr	r3, [r3, #20]
   b8358:	9301      	str	r3, [sp, #4]
   b835a:	bd08      	pop	{r3, pc}
   b835c:	0003024c 	.word	0x0003024c

000b8360 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8360:	b508      	push	{r3, lr}
   b8362:	4b02      	ldr	r3, [pc, #8]	; (b836c <HAL_USB_USART_Receive_Data+0xc>)
   b8364:	681b      	ldr	r3, [r3, #0]
   b8366:	699b      	ldr	r3, [r3, #24]
   b8368:	9301      	str	r3, [sp, #4]
   b836a:	bd08      	pop	{r3, pc}
   b836c:	0003024c 	.word	0x0003024c

000b8370 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8370:	b508      	push	{r3, lr}
   b8372:	4b02      	ldr	r3, [pc, #8]	; (b837c <HAL_USB_USART_Send_Data+0xc>)
   b8374:	681b      	ldr	r3, [r3, #0]
   b8376:	69db      	ldr	r3, [r3, #28]
   b8378:	9301      	str	r3, [sp, #4]
   b837a:	bd08      	pop	{r3, pc}
   b837c:	0003024c 	.word	0x0003024c

000b8380 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8380:	b508      	push	{r3, lr}
   b8382:	4b02      	ldr	r3, [pc, #8]	; (b838c <HAL_USB_USART_Flush_Data+0xc>)
   b8384:	681b      	ldr	r3, [r3, #0]
   b8386:	6a1b      	ldr	r3, [r3, #32]
   b8388:	9301      	str	r3, [sp, #4]
   b838a:	bd08      	pop	{r3, pc}
   b838c:	0003024c 	.word	0x0003024c

000b8390 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8390:	b508      	push	{r3, lr}
   b8392:	4b02      	ldr	r3, [pc, #8]	; (b839c <panic_+0xc>)
   b8394:	681b      	ldr	r3, [r3, #0]
   b8396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8398:	9301      	str	r3, [sp, #4]
   b839a:	bd08      	pop	{r3, pc}
   b839c:	00030260 	.word	0x00030260

000b83a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b83a0:	b508      	push	{r3, lr}
   b83a2:	4b02      	ldr	r3, [pc, #8]	; (b83ac <log_message+0xc>)
   b83a4:	681b      	ldr	r3, [r3, #0]
   b83a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b83a8:	9301      	str	r3, [sp, #4]
   b83aa:	bd08      	pop	{r3, pc}
   b83ac:	00030260 	.word	0x00030260

000b83b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b83b0:	b508      	push	{r3, lr}
   b83b2:	4b02      	ldr	r3, [pc, #8]	; (b83bc <set_system_mode+0xc>)
   b83b4:	681b      	ldr	r3, [r3, #0]
   b83b6:	685b      	ldr	r3, [r3, #4]
   b83b8:	9301      	str	r3, [sp, #4]
   b83ba:	bd08      	pop	{r3, pc}
   b83bc:	00030220 	.word	0x00030220

000b83c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b83c0:	b508      	push	{r3, lr}
   b83c2:	4b02      	ldr	r3, [pc, #8]	; (b83cc <system_delay_ms+0xc>)
   b83c4:	681b      	ldr	r3, [r3, #0]
   b83c6:	695b      	ldr	r3, [r3, #20]
   b83c8:	9301      	str	r3, [sp, #4]
   b83ca:	bd08      	pop	{r3, pc}
   b83cc:	00030220 	.word	0x00030220

000b83d0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b83d0:	b508      	push	{r3, lr}
   b83d2:	4b02      	ldr	r3, [pc, #8]	; (b83dc <system_thread_set_state+0xc>)
   b83d4:	681b      	ldr	r3, [r3, #0]
   b83d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	bd08      	pop	{r3, pc}
   b83dc:	00030220 	.word	0x00030220

000b83e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b83e0:	b508      	push	{r3, lr}
   b83e2:	4b03      	ldr	r3, [pc, #12]	; (b83f0 <system_ctrl_set_app_request_handler+0x10>)
   b83e4:	681b      	ldr	r3, [r3, #0]
   b83e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b83ea:	9301      	str	r3, [sp, #4]
   b83ec:	bd08      	pop	{r3, pc}
   b83ee:	0000      	.short	0x0000
   b83f0:	00030220 	.word	0x00030220

000b83f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b83f4:	b508      	push	{r3, lr}
   b83f6:	4b03      	ldr	r3, [pc, #12]	; (b8404 <system_ctrl_set_result+0x10>)
   b83f8:	681b      	ldr	r3, [r3, #0]
   b83fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b83fe:	9301      	str	r3, [sp, #4]
   b8400:	bd08      	pop	{r3, pc}
   b8402:	0000      	.short	0x0000
   b8404:	00030220 	.word	0x00030220

000b8408 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b8408:	b508      	push	{r3, lr}
   b840a:	4b02      	ldr	r3, [pc, #8]	; (b8414 <spark_process+0xc>)
   b840c:	681b      	ldr	r3, [r3, #0]
   b840e:	689b      	ldr	r3, [r3, #8]
   b8410:	9301      	str	r3, [sp, #4]
   b8412:	bd08      	pop	{r3, pc}
   b8414:	00030244 	.word	0x00030244

000b8418 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8418:	b508      	push	{r3, lr}
   b841a:	4b02      	ldr	r3, [pc, #8]	; (b8424 <spark_deviceID+0xc>)
   b841c:	681b      	ldr	r3, [r3, #0]
   b841e:	69db      	ldr	r3, [r3, #28]
   b8420:	9301      	str	r3, [sp, #4]
   b8422:	bd08      	pop	{r3, pc}
   b8424:	00030244 	.word	0x00030244

000b8428 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8428:	b508      	push	{r3, lr}
   b842a:	4b02      	ldr	r3, [pc, #8]	; (b8434 <spark_set_random_seed_from_cloud_handler+0xc>)
   b842c:	681b      	ldr	r3, [r3, #0]
   b842e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8430:	9301      	str	r3, [sp, #4]
   b8432:	bd08      	pop	{r3, pc}
   b8434:	00030244 	.word	0x00030244

000b8438 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8438:	b508      	push	{r3, lr}
   b843a:	4b02      	ldr	r3, [pc, #8]	; (b8444 <network_connect+0xc>)
   b843c:	681b      	ldr	r3, [r3, #0]
   b843e:	685b      	ldr	r3, [r3, #4]
   b8440:	9301      	str	r3, [sp, #4]
   b8442:	bd08      	pop	{r3, pc}
   b8444:	00030240 	.word	0x00030240

000b8448 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8448:	b508      	push	{r3, lr}
   b844a:	4b02      	ldr	r3, [pc, #8]	; (b8454 <network_connecting+0xc>)
   b844c:	681b      	ldr	r3, [r3, #0]
   b844e:	689b      	ldr	r3, [r3, #8]
   b8450:	9301      	str	r3, [sp, #4]
   b8452:	bd08      	pop	{r3, pc}
   b8454:	00030240 	.word	0x00030240

000b8458 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8458:	b508      	push	{r3, lr}
   b845a:	4b02      	ldr	r3, [pc, #8]	; (b8464 <network_disconnect+0xc>)
   b845c:	681b      	ldr	r3, [r3, #0]
   b845e:	68db      	ldr	r3, [r3, #12]
   b8460:	9301      	str	r3, [sp, #4]
   b8462:	bd08      	pop	{r3, pc}
   b8464:	00030240 	.word	0x00030240

000b8468 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8468:	b508      	push	{r3, lr}
   b846a:	4b02      	ldr	r3, [pc, #8]	; (b8474 <network_ready+0xc>)
   b846c:	681b      	ldr	r3, [r3, #0]
   b846e:	691b      	ldr	r3, [r3, #16]
   b8470:	9301      	str	r3, [sp, #4]
   b8472:	bd08      	pop	{r3, pc}
   b8474:	00030240 	.word	0x00030240

000b8478 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8478:	b508      	push	{r3, lr}
   b847a:	4b02      	ldr	r3, [pc, #8]	; (b8484 <network_on+0xc>)
   b847c:	681b      	ldr	r3, [r3, #0]
   b847e:	695b      	ldr	r3, [r3, #20]
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	bd08      	pop	{r3, pc}
   b8484:	00030240 	.word	0x00030240

000b8488 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8488:	b508      	push	{r3, lr}
   b848a:	4b02      	ldr	r3, [pc, #8]	; (b8494 <network_off+0xc>)
   b848c:	681b      	ldr	r3, [r3, #0]
   b848e:	699b      	ldr	r3, [r3, #24]
   b8490:	9301      	str	r3, [sp, #4]
   b8492:	bd08      	pop	{r3, pc}
   b8494:	00030240 	.word	0x00030240

000b8498 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8498:	b508      	push	{r3, lr}
   b849a:	4b02      	ldr	r3, [pc, #8]	; (b84a4 <network_listen+0xc>)
   b849c:	681b      	ldr	r3, [r3, #0]
   b849e:	69db      	ldr	r3, [r3, #28]
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	bd08      	pop	{r3, pc}
   b84a4:	00030240 	.word	0x00030240

000b84a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b84a8:	b508      	push	{r3, lr}
   b84aa:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <network_listening+0xc>)
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	6a1b      	ldr	r3, [r3, #32]
   b84b0:	9301      	str	r3, [sp, #4]
   b84b2:	bd08      	pop	{r3, pc}
   b84b4:	00030240 	.word	0x00030240

000b84b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b84b8:	b508      	push	{r3, lr}
   b84ba:	4b02      	ldr	r3, [pc, #8]	; (b84c4 <network_set_listen_timeout+0xc>)
   b84bc:	681b      	ldr	r3, [r3, #0]
   b84be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	bd08      	pop	{r3, pc}
   b84c4:	00030240 	.word	0x00030240

000b84c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b84c8:	b508      	push	{r3, lr}
   b84ca:	4b02      	ldr	r3, [pc, #8]	; (b84d4 <network_get_listen_timeout+0xc>)
   b84cc:	681b      	ldr	r3, [r3, #0]
   b84ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b84d0:	9301      	str	r3, [sp, #4]
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	00030240 	.word	0x00030240

000b84d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b84d8:	b508      	push	{r3, lr}
   b84da:	4b02      	ldr	r3, [pc, #8]	; (b84e4 <network_is_on+0xc>)
   b84dc:	681b      	ldr	r3, [r3, #0]
   b84de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b84e0:	9301      	str	r3, [sp, #4]
   b84e2:	bd08      	pop	{r3, pc}
   b84e4:	00030240 	.word	0x00030240

000b84e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b84e8:	b508      	push	{r3, lr}
   b84ea:	4b02      	ldr	r3, [pc, #8]	; (b84f4 <network_is_off+0xc>)
   b84ec:	681b      	ldr	r3, [r3, #0]
   b84ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b84f0:	9301      	str	r3, [sp, #4]
   b84f2:	bd08      	pop	{r3, pc}
   b84f4:	00030240 	.word	0x00030240

000b84f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b84f8:	b508      	push	{r3, lr}
   b84fa:	4b02      	ldr	r3, [pc, #8]	; (b8504 <malloc+0xc>)
   b84fc:	681b      	ldr	r3, [r3, #0]
   b84fe:	681b      	ldr	r3, [r3, #0]
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	bd08      	pop	{r3, pc}
   b8504:	0003021c 	.word	0x0003021c

000b8508 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8508:	b508      	push	{r3, lr}
   b850a:	4b02      	ldr	r3, [pc, #8]	; (b8514 <free+0xc>)
   b850c:	681b      	ldr	r3, [r3, #0]
   b850e:	685b      	ldr	r3, [r3, #4]
   b8510:	9301      	str	r3, [sp, #4]
   b8512:	bd08      	pop	{r3, pc}
   b8514:	0003021c 	.word	0x0003021c

000b8518 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8518:	b508      	push	{r3, lr}
   b851a:	4b02      	ldr	r3, [pc, #8]	; (b8524 <realloc+0xc>)
   b851c:	681b      	ldr	r3, [r3, #0]
   b851e:	689b      	ldr	r3, [r3, #8]
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	bd08      	pop	{r3, pc}
   b8524:	0003021c 	.word	0x0003021c

000b8528 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8528:	b508      	push	{r3, lr}
   b852a:	4b02      	ldr	r3, [pc, #8]	; (b8534 <snprintf+0xc>)
   b852c:	681b      	ldr	r3, [r3, #0]
   b852e:	69db      	ldr	r3, [r3, #28]
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	bd08      	pop	{r3, pc}
   b8534:	0003021c 	.word	0x0003021c

000b8538 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8538:	b508      	push	{r3, lr}
   b853a:	4b02      	ldr	r3, [pc, #8]	; (b8544 <vsnprintf+0xc>)
   b853c:	681b      	ldr	r3, [r3, #0]
   b853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	bd08      	pop	{r3, pc}
   b8544:	0003021c 	.word	0x0003021c

000b8548 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8548:	b508      	push	{r3, lr}
   b854a:	4b02      	ldr	r3, [pc, #8]	; (b8554 <_malloc_r+0xc>)
   b854c:	681b      	ldr	r3, [r3, #0]
   b854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8550:	9301      	str	r3, [sp, #4]
   b8552:	bd08      	pop	{r3, pc}
   b8554:	0003021c 	.word	0x0003021c

000b8558 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8558:	b508      	push	{r3, lr}
   b855a:	4b02      	ldr	r3, [pc, #8]	; (b8564 <__errno+0xc>)
   b855c:	681b      	ldr	r3, [r3, #0]
   b855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8560:	9301      	str	r3, [sp, #4]
   b8562:	bd08      	pop	{r3, pc}
   b8564:	0003021c 	.word	0x0003021c

000b8568 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8568:	b508      	push	{r3, lr}
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <__assert_func+0xc>)
   b856c:	681b      	ldr	r3, [r3, #0]
   b856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8570:	9301      	str	r3, [sp, #4]
   b8572:	bd08      	pop	{r3, pc}
   b8574:	0003021c 	.word	0x0003021c

000b8578 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8578:	b508      	push	{r3, lr}
   b857a:	4b02      	ldr	r3, [pc, #8]	; (b8584 <newlib_impure_ptr_callback+0xc>)
   b857c:	681b      	ldr	r3, [r3, #0]
   b857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8580:	9301      	str	r3, [sp, #4]
   b8582:	bd08      	pop	{r3, pc}
   b8584:	0003021c 	.word	0x0003021c

000b8588 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8588:	2100      	movs	r1, #0
   b858a:	f7ff bf19 	b.w	b83c0 <system_delay_ms>
	...

000b8590 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8590:	4802      	ldr	r0, [pc, #8]	; (b859c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8592:	2300      	movs	r3, #0
   b8594:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8596:	f7ff bd1b 	b.w	b7fd0 <os_mutex_recursive_create>
   b859a:	bf00      	nop
   b859c:	2003e6c4 	.word	0x2003e6c4

000b85a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b85a0:	2200      	movs	r2, #0
   b85a2:	6840      	ldr	r0, [r0, #4]
   b85a4:	4611      	mov	r1, r2
   b85a6:	f7ff bf7f 	b.w	b84a8 <network_listening>

000b85aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b85aa:	2200      	movs	r2, #0
   b85ac:	6840      	ldr	r0, [r0, #4]
   b85ae:	4611      	mov	r1, r2
   b85b0:	f7ff bf8a 	b.w	b84c8 <network_get_listen_timeout>

000b85b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b85b4:	6840      	ldr	r0, [r0, #4]
   b85b6:	2200      	movs	r2, #0
   b85b8:	f7ff bf7e 	b.w	b84b8 <network_set_listen_timeout>

000b85bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b85bc:	6840      	ldr	r0, [r0, #4]
   b85be:	2200      	movs	r2, #0
   b85c0:	f081 0101 	eor.w	r1, r1, #1
   b85c4:	f7ff bf68 	b.w	b8498 <network_listen>

000b85c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b85c8:	2300      	movs	r3, #0
   b85ca:	6840      	ldr	r0, [r0, #4]
   b85cc:	461a      	mov	r2, r3
   b85ce:	4619      	mov	r1, r3
   b85d0:	f7ff bf5a 	b.w	b8488 <network_off>

000b85d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b85d4:	2300      	movs	r3, #0
   b85d6:	6840      	ldr	r0, [r0, #4]
   b85d8:	461a      	mov	r2, r3
   b85da:	4619      	mov	r1, r3
   b85dc:	f7ff bf4c 	b.w	b8478 <network_on>

000b85e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b85e0:	2200      	movs	r2, #0
   b85e2:	6840      	ldr	r0, [r0, #4]
   b85e4:	4611      	mov	r1, r2
   b85e6:	f7ff bf3f 	b.w	b8468 <network_ready>

000b85ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b85ea:	2200      	movs	r2, #0
   b85ec:	6840      	ldr	r0, [r0, #4]
   b85ee:	4611      	mov	r1, r2
   b85f0:	f7ff bf2a 	b.w	b8448 <network_connecting>

000b85f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b85f4:	6840      	ldr	r0, [r0, #4]
   b85f6:	2200      	movs	r2, #0
   b85f8:	2102      	movs	r1, #2
   b85fa:	f7ff bf2d 	b.w	b8458 <network_disconnect>

000b85fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b85fe:	2300      	movs	r3, #0
   b8600:	6840      	ldr	r0, [r0, #4]
   b8602:	461a      	mov	r2, r3
   b8604:	f7ff bf18 	b.w	b8438 <network_connect>

000b8608 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8608:	4b02      	ldr	r3, [pc, #8]	; (b8614 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b860a:	2203      	movs	r2, #3
   b860c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b860e:	4a02      	ldr	r2, [pc, #8]	; (b8618 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8610:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8612:	4770      	bx	lr
   b8614:	2003e6c8 	.word	0x2003e6c8
   b8618:	000bcf2c 	.word	0x000bcf2c

000b861c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b861c:	4770      	bx	lr

000b861e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b861e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8620:	4606      	mov	r6, r0
   b8622:	4615      	mov	r5, r2
   b8624:	460c      	mov	r4, r1
   b8626:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8628:	42bc      	cmp	r4, r7
   b862a:	d006      	beq.n	b863a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b862c:	6833      	ldr	r3, [r6, #0]
   b862e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8632:	689b      	ldr	r3, [r3, #8]
   b8634:	4630      	mov	r0, r6
   b8636:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8638:	e7f6      	b.n	b8628 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b863a:	4628      	mov	r0, r5
   b863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b863e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b863e:	7c00      	ldrb	r0, [r0, #16]
   b8640:	2200      	movs	r2, #0
   b8642:	f7ff bd4d 	b.w	b80e0 <hal_i2c_write>

000b8646 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8646:	7c00      	ldrb	r0, [r0, #16]
   b8648:	2100      	movs	r1, #0
   b864a:	f7ff bd51 	b.w	b80f0 <hal_i2c_available>

000b864e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b864e:	7c00      	ldrb	r0, [r0, #16]
   b8650:	2100      	movs	r1, #0
   b8652:	f7ff bd55 	b.w	b8100 <hal_i2c_read>

000b8656 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8656:	7c00      	ldrb	r0, [r0, #16]
   b8658:	2100      	movs	r1, #0
   b865a:	f7ff bd59 	b.w	b8110 <hal_i2c_peek>

000b865e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b865e:	7c00      	ldrb	r0, [r0, #16]
   b8660:	2100      	movs	r1, #0
   b8662:	f7ff bd5d 	b.w	b8120 <hal_i2c_flush>

000b8666 <_ZN7TwoWireD0Ev>:
   b8666:	b510      	push	{r4, lr}
   b8668:	2114      	movs	r1, #20
   b866a:	4604      	mov	r4, r0
   b866c:	f7fc fa65 	bl	b4b3a <_ZdlPvj>
   b8670:	4620      	mov	r0, r4
   b8672:	bd10      	pop	{r4, pc}

000b8674 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8674:	b538      	push	{r3, r4, r5, lr}
   b8676:	4604      	mov	r4, r0
   b8678:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b867a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b867e:	2200      	movs	r2, #0
   b8680:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8684:	4b09      	ldr	r3, [pc, #36]	; (b86ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8686:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8688:	4608      	mov	r0, r1
   b868a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b868c:	4629      	mov	r1, r5
   b868e:	f7ff fd57 	bl	b8140 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8692:	30bf      	adds	r0, #191	; 0xbf
   b8694:	d108      	bne.n	b86a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8696:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8698:	07db      	lsls	r3, r3, #31
   b869a:	d505      	bpl.n	b86a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b869c:	6868      	ldr	r0, [r5, #4]
   b869e:	f7ff ff33 	bl	b8508 <free>
    free(conf.tx_buffer);
   b86a2:	68e8      	ldr	r0, [r5, #12]
   b86a4:	f7ff ff30 	bl	b8508 <free>
}
   b86a8:	4620      	mov	r0, r4
   b86aa:	bd38      	pop	{r3, r4, r5, pc}
   b86ac:	000bcf68 	.word	0x000bcf68

000b86b0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b86b0:	7c00      	ldrb	r0, [r0, #16]
   b86b2:	2200      	movs	r2, #0
   b86b4:	f7ff bcf4 	b.w	b80a0 <hal_i2c_set_speed>

000b86b8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b86b8:	2300      	movs	r3, #0
   b86ba:	7c00      	ldrb	r0, [r0, #16]
   b86bc:	461a      	mov	r2, r3
   b86be:	4619      	mov	r1, r3
   b86c0:	f7ff bcf6 	b.w	b80b0 <hal_i2c_begin>

000b86c4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b86c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b86c6:	2200      	movs	r2, #0
   b86c8:	2314      	movs	r3, #20
   b86ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b86ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b86d2:	780b      	ldrb	r3, [r1, #0]
   b86d4:	f88d 3008 	strb.w	r3, [sp, #8]
   b86d8:	684b      	ldr	r3, [r1, #4]
   b86da:	9303      	str	r3, [sp, #12]
   b86dc:	68cb      	ldr	r3, [r1, #12]
   b86de:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b86e0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b86e2:	7a0b      	ldrb	r3, [r1, #8]
   b86e4:	9305      	str	r3, [sp, #20]
   b86e6:	a901      	add	r1, sp, #4
   b86e8:	f7ff fd32 	bl	b8150 <hal_i2c_request_ex>
}
   b86ec:	b007      	add	sp, #28
   b86ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b86f2 <_ZN7TwoWire11requestFromEhjh>:
{
   b86f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b86f4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b86f6:	f88d 1000 	strb.w	r1, [sp]
   b86fa:	f04f 0164 	mov.w	r1, #100	; 0x64
   b86fe:	9103      	str	r1, [sp, #12]
   b8700:	bf18      	it	ne
   b8702:	2301      	movne	r3, #1
   b8704:	4669      	mov	r1, sp
    size_ = size;
   b8706:	9201      	str	r2, [sp, #4]
   b8708:	f88d 3008 	strb.w	r3, [sp, #8]
   b870c:	f7ff ffda 	bl	b86c4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8710:	b005      	add	sp, #20
   b8712:	f85d fb04 	ldr.w	pc, [sp], #4

000b8716 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8716:	2301      	movs	r3, #1
   b8718:	f7ff bfeb 	b.w	b86f2 <_ZN7TwoWire11requestFromEhjh>

000b871c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b871c:	7c00      	ldrb	r0, [r0, #16]
   b871e:	2200      	movs	r2, #0
   b8720:	f7ff bcce 	b.w	b80c0 <hal_i2c_begin_transmission>

000b8724 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8724:	b2c9      	uxtb	r1, r1
   b8726:	f7ff bff9 	b.w	b871c <_ZN7TwoWire17beginTransmissionEh>

000b872a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b872a:	7c00      	ldrb	r0, [r0, #16]
   b872c:	2200      	movs	r2, #0
   b872e:	f7ff bccf 	b.w	b80d0 <hal_i2c_end_transmission>

000b8732 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8732:	2101      	movs	r1, #1
   b8734:	f7ff bff9 	b.w	b872a <_ZN7TwoWire15endTransmissionEh>

000b8738 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8738:	4770      	bx	lr

000b873a <_ZN9IPAddressD0Ev>:
   b873a:	b510      	push	{r4, lr}
   b873c:	2118      	movs	r1, #24
   b873e:	4604      	mov	r4, r0
   b8740:	f7fc f9fb 	bl	b4b3a <_ZdlPvj>
   b8744:	4620      	mov	r0, r4
   b8746:	bd10      	pop	{r4, pc}

000b8748 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8748:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b874a:	7d03      	ldrb	r3, [r0, #20]
   b874c:	2b06      	cmp	r3, #6
{
   b874e:	b08d      	sub	sp, #52	; 0x34
   b8750:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8752:	f100 0704 	add.w	r7, r0, #4
   b8756:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b875a:	d012      	beq.n	b8782 <_ZNK9IPAddress7printToER5Print+0x3a>
   b875c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8760:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8764:	220a      	movs	r2, #10
   b8766:	4630      	mov	r0, r6
   b8768:	f000 f973 	bl	b8a52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b876c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b876e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8770:	d019      	beq.n	b87a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8772:	2c00      	cmp	r4, #0
   b8774:	d0f4      	beq.n	b8760 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8776:	212e      	movs	r1, #46	; 0x2e
   b8778:	4630      	mov	r0, r6
   b877a:	f000 f951 	bl	b8a20 <_ZN5Print5printEc>
   b877e:	4404      	add	r4, r0
   b8780:	e7ee      	b.n	b8760 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8782:	232f      	movs	r3, #47	; 0x2f
   b8784:	466a      	mov	r2, sp
   b8786:	4639      	mov	r1, r7
   b8788:	200a      	movs	r0, #10
		buf[0] = 0;
   b878a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b878e:	f7ff fcef 	bl	b8170 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8792:	4668      	mov	r0, sp
   b8794:	f7fc f970 	bl	b4a78 <strlen>
   b8798:	6833      	ldr	r3, [r6, #0]
   b879a:	4602      	mov	r2, r0
   b879c:	68db      	ldr	r3, [r3, #12]
   b879e:	4669      	mov	r1, sp
   b87a0:	4630      	mov	r0, r6
   b87a2:	4798      	blx	r3
   b87a4:	4604      	mov	r4, r0
    }
    return n;
}
   b87a6:	4620      	mov	r0, r4
   b87a8:	b00d      	add	sp, #52	; 0x34
   b87aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b87ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b87ac:	b510      	push	{r4, lr}
   b87ae:	4b05      	ldr	r3, [pc, #20]	; (b87c4 <_ZN9IPAddressC1Ev+0x18>)
   b87b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b87b2:	2211      	movs	r2, #17
   b87b4:	f840 3b04 	str.w	r3, [r0], #4
   b87b8:	2100      	movs	r1, #0
   b87ba:	f001 fafe 	bl	b9dba <memset>
}
   b87be:	4620      	mov	r0, r4
   b87c0:	bd10      	pop	{r4, pc}
   b87c2:	bf00      	nop
   b87c4:	000bcf90 	.word	0x000bcf90

000b87c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b87c8:	4603      	mov	r3, r0
   b87ca:	4a07      	ldr	r2, [pc, #28]	; (b87e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b87cc:	b510      	push	{r4, lr}
   b87ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b87d2:	f101 0210 	add.w	r2, r1, #16
   b87d6:	f851 4b04 	ldr.w	r4, [r1], #4
   b87da:	f843 4b04 	str.w	r4, [r3], #4
   b87de:	4291      	cmp	r1, r2
   b87e0:	d1f9      	bne.n	b87d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b87e2:	780a      	ldrb	r2, [r1, #0]
   b87e4:	701a      	strb	r2, [r3, #0]
}
   b87e6:	bd10      	pop	{r4, pc}
   b87e8:	000bcf90 	.word	0x000bcf90

000b87ec <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b87ec:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b87ee:	2b04      	cmp	r3, #4
   b87f0:	d104      	bne.n	b87fc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b87f2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b87f4:	3800      	subs	r0, #0
   b87f6:	bf18      	it	ne
   b87f8:	2001      	movne	r0, #1
   b87fa:	4770      	bx	lr
    } else if (version() == 6) {
   b87fc:	2b06      	cmp	r3, #6
   b87fe:	d107      	bne.n	b8810 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8800:	6843      	ldr	r3, [r0, #4]
   b8802:	b93b      	cbnz	r3, b8814 <_ZNK9IPAddresscvbEv+0x28>
   b8804:	6883      	ldr	r3, [r0, #8]
   b8806:	b92b      	cbnz	r3, b8814 <_ZNK9IPAddresscvbEv+0x28>
   b8808:	68c3      	ldr	r3, [r0, #12]
   b880a:	b91b      	cbnz	r3, b8814 <_ZNK9IPAddresscvbEv+0x28>
   b880c:	6900      	ldr	r0, [r0, #16]
   b880e:	e7f1      	b.n	b87f4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8810:	2000      	movs	r0, #0
   b8812:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8814:	2001      	movs	r0, #1
}
   b8816:	4770      	bx	lr

000b8818 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8818:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b881a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b881e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8822:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8826:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b882a:	2304      	movs	r3, #4
   b882c:	6041      	str	r1, [r0, #4]
   b882e:	7503      	strb	r3, [r0, #20]
}
   b8830:	bd10      	pop	{r4, pc}
	...

000b8834 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8834:	b507      	push	{r0, r1, r2, lr}
   b8836:	4b06      	ldr	r3, [pc, #24]	; (b8850 <_ZN9IPAddressC1EPKh+0x1c>)
   b8838:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b883a:	78cb      	ldrb	r3, [r1, #3]
   b883c:	9300      	str	r3, [sp, #0]
   b883e:	788b      	ldrb	r3, [r1, #2]
   b8840:	784a      	ldrb	r2, [r1, #1]
   b8842:	7809      	ldrb	r1, [r1, #0]
   b8844:	f7ff ffe8 	bl	b8818 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8848:	b003      	add	sp, #12
   b884a:	f85d fb04 	ldr.w	pc, [sp], #4
   b884e:	bf00      	nop
   b8850:	000bcf90 	.word	0x000bcf90

000b8854 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8854:	4b01      	ldr	r3, [pc, #4]	; (b885c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8856:	4a02      	ldr	r2, [pc, #8]	; (b8860 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8858:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b885a:	4770      	bx	lr
   b885c:	2003e6d0 	.word	0x2003e6d0
   b8860:	000bcf9c 	.word	0x000bcf9c

000b8864 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8864:	2300      	movs	r3, #0
   b8866:	6840      	ldr	r0, [r0, #4]
   b8868:	461a      	mov	r2, r3
   b886a:	f7ff bde5 	b.w	b8438 <network_connect>

000b886e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b886e:	6840      	ldr	r0, [r0, #4]
   b8870:	2200      	movs	r2, #0
   b8872:	2102      	movs	r1, #2
   b8874:	f7ff bdf0 	b.w	b8458 <network_disconnect>

000b8878 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8878:	2200      	movs	r2, #0
   b887a:	6840      	ldr	r0, [r0, #4]
   b887c:	4611      	mov	r1, r2
   b887e:	f7ff bde3 	b.w	b8448 <network_connecting>

000b8882 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8882:	2200      	movs	r2, #0
   b8884:	6840      	ldr	r0, [r0, #4]
   b8886:	4611      	mov	r1, r2
   b8888:	f7ff bdee 	b.w	b8468 <network_ready>

000b888c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b888c:	2300      	movs	r3, #0
   b888e:	6840      	ldr	r0, [r0, #4]
   b8890:	461a      	mov	r2, r3
   b8892:	4619      	mov	r1, r3
   b8894:	f7ff bdf0 	b.w	b8478 <network_on>

000b8898 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8898:	2300      	movs	r3, #0
   b889a:	6840      	ldr	r0, [r0, #4]
   b889c:	461a      	mov	r2, r3
   b889e:	4619      	mov	r1, r3
   b88a0:	f7ff bdf2 	b.w	b8488 <network_off>

000b88a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b88a4:	6840      	ldr	r0, [r0, #4]
   b88a6:	2100      	movs	r1, #0
   b88a8:	f7ff be16 	b.w	b84d8 <network_is_on>

000b88ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b88ac:	6840      	ldr	r0, [r0, #4]
   b88ae:	2100      	movs	r1, #0
   b88b0:	f7ff be1a 	b.w	b84e8 <network_is_off>

000b88b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b88b4:	6840      	ldr	r0, [r0, #4]
   b88b6:	2200      	movs	r2, #0
   b88b8:	f081 0101 	eor.w	r1, r1, #1
   b88bc:	f7ff bdec 	b.w	b8498 <network_listen>

000b88c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b88c0:	6840      	ldr	r0, [r0, #4]
   b88c2:	2200      	movs	r2, #0
   b88c4:	f7ff bdf8 	b.w	b84b8 <network_set_listen_timeout>

000b88c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b88c8:	2200      	movs	r2, #0
   b88ca:	6840      	ldr	r0, [r0, #4]
   b88cc:	4611      	mov	r1, r2
   b88ce:	f7ff bdfb 	b.w	b84c8 <network_get_listen_timeout>

000b88d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b88d2:	2200      	movs	r2, #0
   b88d4:	6840      	ldr	r0, [r0, #4]
   b88d6:	4611      	mov	r1, r2
   b88d8:	f7ff bde6 	b.w	b84a8 <network_listening>

000b88dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b88dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88e0:	b095      	sub	sp, #84	; 0x54
   b88e2:	4614      	mov	r4, r2
   b88e4:	460d      	mov	r5, r1
   b88e6:	4607      	mov	r7, r0
    IPAddress addr;
   b88e8:	f7ff ff60 	bl	b87ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b88ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b88ee:	221c      	movs	r2, #28
   b88f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b88f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b88f4:	f001 fa61 	bl	b9dba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b88f8:	2340      	movs	r3, #64	; 0x40
   b88fa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b88fc:	4620      	mov	r0, r4
   b88fe:	466b      	mov	r3, sp
   b8900:	aa0c      	add	r2, sp, #48	; 0x30
   b8902:	2100      	movs	r1, #0
   b8904:	f7ff fc5c 	bl	b81c0 <netdb_getaddrinfo>
    if (!r) {
   b8908:	4604      	mov	r4, r0
   b890a:	2800      	cmp	r0, #0
   b890c:	d14b      	bne.n	b89a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b890e:	4602      	mov	r2, r0
   b8910:	2101      	movs	r1, #1
   b8912:	6868      	ldr	r0, [r5, #4]
   b8914:	f7ff fda8 	bl	b8468 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8918:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b891a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b891c:	4622      	mov	r2, r4
   b891e:	6868      	ldr	r0, [r5, #4]
   b8920:	f7ff fda2 	bl	b8468 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8924:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8926:	4681      	mov	r9, r0
        bool ok = false;
   b8928:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b892a:	2e00      	cmp	r6, #0
   b892c:	d03b      	beq.n	b89a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b892e:	2900      	cmp	r1, #0
   b8930:	d139      	bne.n	b89a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8932:	6873      	ldr	r3, [r6, #4]
   b8934:	2b02      	cmp	r3, #2
   b8936:	d003      	beq.n	b8940 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8938:	2b0a      	cmp	r3, #10
   b893a:	d011      	beq.n	b8960 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b893c:	69f6      	ldr	r6, [r6, #28]
   b893e:	e7f4      	b.n	b892a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8940:	f1b8 0f00 	cmp.w	r8, #0
   b8944:	d0fa      	beq.n	b893c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8946:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8948:	a806      	add	r0, sp, #24
   b894a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b894c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b894e:	f7ff ff71 	bl	b8834 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8954:	1d3c      	adds	r4, r7, #4
   b8956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8958:	682b      	ldr	r3, [r5, #0]
   b895a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b895c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b895e:	e7ed      	b.n	b893c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8960:	f1b9 0f00 	cmp.w	r9, #0
   b8964:	d0ea      	beq.n	b893c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8966:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8968:	2210      	movs	r2, #16
   b896a:	a801      	add	r0, sp, #4
   b896c:	f001 fa25 	bl	b9dba <memset>
                    a.v = 6;
   b8970:	2306      	movs	r3, #6
   b8972:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8976:	ad01      	add	r5, sp, #4
   b8978:	f104 0308 	add.w	r3, r4, #8
   b897c:	3418      	adds	r4, #24
   b897e:	6818      	ldr	r0, [r3, #0]
   b8980:	6859      	ldr	r1, [r3, #4]
   b8982:	462a      	mov	r2, r5
   b8984:	c203      	stmia	r2!, {r0, r1}
   b8986:	3308      	adds	r3, #8
   b8988:	42a3      	cmp	r3, r4
   b898a:	4615      	mov	r5, r2
   b898c:	d1f7      	bne.n	b897e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b898e:	a901      	add	r1, sp, #4
   b8990:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8992:	ad07      	add	r5, sp, #28
   b8994:	f7ff ff18 	bl	b87c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b899a:	1d3c      	adds	r4, r7, #4
   b899c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b899e:	682b      	ldr	r3, [r5, #0]
   b89a0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b89a2:	4649      	mov	r1, r9
   b89a4:	e7ca      	b.n	b893c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b89a6:	9800      	ldr	r0, [sp, #0]
   b89a8:	f7ff fc02 	bl	b81b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b89ac:	4638      	mov	r0, r7
   b89ae:	b015      	add	sp, #84	; 0x54
   b89b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b89b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b89b4:	4b02      	ldr	r3, [pc, #8]	; (b89c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b89b6:	4a03      	ldr	r2, [pc, #12]	; (b89c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b89b8:	601a      	str	r2, [r3, #0]
   b89ba:	2200      	movs	r2, #0
   b89bc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b89be:	4770      	bx	lr
   b89c0:	2003e6d4 	.word	0x2003e6d4
   b89c4:	000bcfa8 	.word	0x000bcfa8

000b89c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b89c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89ca:	4606      	mov	r6, r0
   b89cc:	460d      	mov	r5, r1
  size_t n = 0;
   b89ce:	188f      	adds	r7, r1, r2
   b89d0:	2400      	movs	r4, #0
  while (size--) {
   b89d2:	42bd      	cmp	r5, r7
   b89d4:	d00c      	beq.n	b89f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b89d6:	6833      	ldr	r3, [r6, #0]
   b89d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b89dc:	689b      	ldr	r3, [r3, #8]
   b89de:	4630      	mov	r0, r6
   b89e0:	4798      	blx	r3
     if (chunk>=0)
   b89e2:	1e03      	subs	r3, r0, #0
   b89e4:	db01      	blt.n	b89ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b89e6:	441c      	add	r4, r3
  while (size--) {
   b89e8:	e7f3      	b.n	b89d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b89ea:	2c00      	cmp	r4, #0
   b89ec:	bf08      	it	eq
   b89ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b89f0:	4620      	mov	r0, r4
   b89f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b89f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b89f4:	b513      	push	{r0, r1, r4, lr}
   b89f6:	4604      	mov	r4, r0
    }
   b89f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b89fa:	b159      	cbz	r1, b8a14 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b89fc:	9101      	str	r1, [sp, #4]
   b89fe:	f7fc f83b 	bl	b4a78 <strlen>
   b8a02:	6823      	ldr	r3, [r4, #0]
   b8a04:	9901      	ldr	r1, [sp, #4]
   b8a06:	68db      	ldr	r3, [r3, #12]
   b8a08:	4602      	mov	r2, r0
   b8a0a:	4620      	mov	r0, r4
    }
   b8a0c:	b002      	add	sp, #8
   b8a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8a12:	4718      	bx	r3
    }
   b8a14:	b002      	add	sp, #8
   b8a16:	bd10      	pop	{r4, pc}

000b8a18 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8a18:	b508      	push	{r3, lr}
  return write(str);
   b8a1a:	f7ff ffeb 	bl	b89f4 <_ZN5Print5writeEPKc>
}
   b8a1e:	bd08      	pop	{r3, pc}

000b8a20 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8a20:	6803      	ldr	r3, [r0, #0]
   b8a22:	689b      	ldr	r3, [r3, #8]
   b8a24:	4718      	bx	r3

000b8a26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8a26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8a28:	210d      	movs	r1, #13
{
   b8a2a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8a2c:	f7ff fff8 	bl	b8a20 <_ZN5Print5printEc>
  n += print('\n');
   b8a30:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8a32:	4604      	mov	r4, r0
  n += print('\n');
   b8a34:	4628      	mov	r0, r5
   b8a36:	f7ff fff3 	bl	b8a20 <_ZN5Print5printEc>
  return n;
}
   b8a3a:	4420      	add	r0, r4
   b8a3c:	bd38      	pop	{r3, r4, r5, pc}

000b8a3e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8a3e:	b538      	push	{r3, r4, r5, lr}
   b8a40:	4605      	mov	r5, r0
  return write(str);
   b8a42:	f7ff ffd7 	bl	b89f4 <_ZN5Print5writeEPKc>
   b8a46:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8a48:	4628      	mov	r0, r5
   b8a4a:	f7ff ffec 	bl	b8a26 <_ZN5Print7printlnEv>
  return n;
}
   b8a4e:	4420      	add	r0, r4
   b8a50:	bd38      	pop	{r3, r4, r5, pc}

000b8a52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8a52:	b530      	push	{r4, r5, lr}
   b8a54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8a56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8a58:	2a01      	cmp	r2, #1
  *str = '\0';
   b8a5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8a5e:	bf98      	it	ls
   b8a60:	220a      	movls	r2, #10
   b8a62:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8a64:	460d      	mov	r5, r1
   b8a66:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8a6a:	fb01 5312 	mls	r3, r1, r2, r5
   b8a6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8a72:	2b09      	cmp	r3, #9
   b8a74:	bf94      	ite	ls
   b8a76:	3330      	addls	r3, #48	; 0x30
   b8a78:	3337      	addhi	r3, #55	; 0x37
   b8a7a:	b2db      	uxtb	r3, r3
  } while(n);
   b8a7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8a7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8a82:	d9ef      	bls.n	b8a64 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8a84:	4621      	mov	r1, r4
   b8a86:	f7ff ffb5 	bl	b89f4 <_ZN5Print5writeEPKc>
}
   b8a8a:	b00b      	add	sp, #44	; 0x2c
   b8a8c:	bd30      	pop	{r4, r5, pc}
	...

000b8a90 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b8a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a94:	ec55 4b10 	vmov	r4, r5, d0
   b8a98:	4606      	mov	r6, r0
   b8a9a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b8a9c:	ee10 2a10 	vmov	r2, s0
   b8aa0:	ee10 0a10 	vmov	r0, s0
   b8aa4:	462b      	mov	r3, r5
   b8aa6:	4629      	mov	r1, r5
   b8aa8:	f7fb ff10 	bl	b48cc <__aeabi_dcmpun>
   b8aac:	b140      	cbz	r0, b8ac0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b8aae:	4953      	ldr	r1, [pc, #332]	; (b8bfc <_ZN5Print10printFloatEdh+0x16c>)
   b8ab0:	4630      	mov	r0, r6
   b8ab2:	f7ff ff9f 	bl	b89f4 <_ZN5Print5writeEPKc>
   b8ab6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b8ab8:	4650      	mov	r0, sl
   b8aba:	b003      	add	sp, #12
   b8abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b8ac0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b8ac4:	4b4e      	ldr	r3, [pc, #312]	; (b8c00 <_ZN5Print10printFloatEdh+0x170>)
   b8ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8aca:	4620      	mov	r0, r4
   b8acc:	4649      	mov	r1, r9
   b8ace:	f7fb fefd 	bl	b48cc <__aeabi_dcmpun>
   b8ad2:	b948      	cbnz	r0, b8ae8 <_ZN5Print10printFloatEdh+0x58>
   b8ad4:	4b4a      	ldr	r3, [pc, #296]	; (b8c00 <_ZN5Print10printFloatEdh+0x170>)
   b8ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8ada:	4620      	mov	r0, r4
   b8adc:	4649      	mov	r1, r9
   b8ade:	f7fb fed7 	bl	b4890 <__aeabi_dcmple>
   b8ae2:	b908      	cbnz	r0, b8ae8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b8ae4:	4947      	ldr	r1, [pc, #284]	; (b8c04 <_ZN5Print10printFloatEdh+0x174>)
   b8ae6:	e7e3      	b.n	b8ab0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b8ae8:	4b47      	ldr	r3, [pc, #284]	; (b8c08 <_ZN5Print10printFloatEdh+0x178>)
   b8aea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8aee:	4620      	mov	r0, r4
   b8af0:	4629      	mov	r1, r5
   b8af2:	f7fb fee1 	bl	b48b8 <__aeabi_dcmpgt>
   b8af6:	b108      	cbz	r0, b8afc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b8af8:	4944      	ldr	r1, [pc, #272]	; (b8c0c <_ZN5Print10printFloatEdh+0x17c>)
   b8afa:	e7d9      	b.n	b8ab0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b8afc:	4b44      	ldr	r3, [pc, #272]	; (b8c10 <_ZN5Print10printFloatEdh+0x180>)
   b8afe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8b02:	4620      	mov	r0, r4
   b8b04:	4629      	mov	r1, r5
   b8b06:	f7fb feb9 	bl	b487c <__aeabi_dcmplt>
   b8b0a:	2800      	cmp	r0, #0
   b8b0c:	d1f4      	bne.n	b8af8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b8b0e:	2200      	movs	r2, #0
   b8b10:	2300      	movs	r3, #0
   b8b12:	4620      	mov	r0, r4
   b8b14:	4629      	mov	r1, r5
   b8b16:	f7fb feb1 	bl	b487c <__aeabi_dcmplt>
   b8b1a:	b1d0      	cbz	r0, b8b52 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b8b1c:	212d      	movs	r1, #45	; 0x2d
   b8b1e:	4630      	mov	r0, r6
   b8b20:	f7ff ff7e 	bl	b8a20 <_ZN5Print5printEc>
     number = -number;
   b8b24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b8b28:	4682      	mov	sl, r0
     number = -number;
   b8b2a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b8b2c:	4939      	ldr	r1, [pc, #228]	; (b8c14 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b8b2e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b8c1c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b8b32:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b8b36:	2000      	movs	r0, #0
    rounding /= 10.0;
   b8b38:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b8b3c:	fa5f f38b 	uxtb.w	r3, fp
   b8b40:	429f      	cmp	r7, r3
   b8b42:	d908      	bls.n	b8b56 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b8b44:	4642      	mov	r2, r8
   b8b46:	464b      	mov	r3, r9
   b8b48:	f7fb fd50 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b8b4c:	f10b 0b01 	add.w	fp, fp, #1
   b8b50:	e7f4      	b.n	b8b3c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b8b52:	4682      	mov	sl, r0
   b8b54:	e7ea      	b.n	b8b2c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b8b56:	4622      	mov	r2, r4
   b8b58:	462b      	mov	r3, r5
   b8b5a:	f7fb fa67 	bl	b402c <__adddf3>
   b8b5e:	460d      	mov	r5, r1
   b8b60:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b8b62:	f7fb fef1 	bl	b4948 <__aeabi_d2uiz>
   b8b66:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b8b68:	f7fb fb9c 	bl	b42a4 <__aeabi_ui2d>
   b8b6c:	4602      	mov	r2, r0
   b8b6e:	460b      	mov	r3, r1
   b8b70:	4620      	mov	r0, r4
   b8b72:	4629      	mov	r1, r5
   b8b74:	f7fb fa58 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b8b78:	220a      	movs	r2, #10
   b8b7a:	4604      	mov	r4, r0
   b8b7c:	460d      	mov	r5, r1
   b8b7e:	4630      	mov	r0, r6
   b8b80:	4641      	mov	r1, r8
   b8b82:	f7ff ff66 	bl	b8a52 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b8b86:	4482      	add	sl, r0
  if (digits > 0) {
   b8b88:	2f00      	cmp	r7, #0
   b8b8a:	d095      	beq.n	b8ab8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b8b8c:	4922      	ldr	r1, [pc, #136]	; (b8c18 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b8b8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b8c1c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b8b92:	4630      	mov	r0, r6
   b8b94:	f7ff ff2e 	bl	b89f4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b8b98:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b8b9c:	4482      	add	sl, r0
  while (digits-- > 0)
   b8b9e:	2f00      	cmp	r7, #0
   b8ba0:	d08a      	beq.n	b8ab8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b8ba2:	4642      	mov	r2, r8
   b8ba4:	464b      	mov	r3, r9
   b8ba6:	4620      	mov	r0, r4
   b8ba8:	4629      	mov	r1, r5
   b8baa:	f7fb fbf5 	bl	b4398 <__aeabi_dmul>
   b8bae:	4604      	mov	r4, r0
   b8bb0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b8bb2:	f7fb fea1 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b8bb6:	f1b0 0b00 	subs.w	fp, r0, #0
   b8bba:	da1c      	bge.n	b8bf6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b8bbc:	212d      	movs	r1, #45	; 0x2d
   b8bbe:	4630      	mov	r0, r6
   b8bc0:	f7ff ff2e 	bl	b8a20 <_ZN5Print5printEc>
            val = -n;
   b8bc4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b8bc8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b8bca:	220a      	movs	r2, #10
   b8bcc:	4630      	mov	r0, r6
   b8bce:	9301      	str	r3, [sp, #4]
   b8bd0:	f7ff ff3f 	bl	b8a52 <_ZN5Print11printNumberEmh>
   b8bd4:	9b01      	ldr	r3, [sp, #4]
   b8bd6:	4418      	add	r0, r3
    n += print(toPrint);
   b8bd8:	4482      	add	sl, r0
    remainder -= toPrint;
   b8bda:	4658      	mov	r0, fp
   b8bdc:	f7fb fb72 	bl	b42c4 <__aeabi_i2d>
   b8be0:	4602      	mov	r2, r0
   b8be2:	460b      	mov	r3, r1
   b8be4:	4620      	mov	r0, r4
   b8be6:	4629      	mov	r1, r5
   b8be8:	f7fb fa1e 	bl	b4028 <__aeabi_dsub>
   b8bec:	3f01      	subs	r7, #1
   b8bee:	4604      	mov	r4, r0
   b8bf0:	460d      	mov	r5, r1
   b8bf2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b8bf4:	e7d3      	b.n	b8b9e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b8bf6:	4659      	mov	r1, fp
        size_t t = 0;
   b8bf8:	2300      	movs	r3, #0
   b8bfa:	e7e6      	b.n	b8bca <_ZN5Print10printFloatEdh+0x13a>
   b8bfc:	000bcfdc 	.word	0x000bcfdc
   b8c00:	7fefffff 	.word	0x7fefffff
   b8c04:	000bcfe0 	.word	0x000bcfe0
   b8c08:	41efffff 	.word	0x41efffff
   b8c0c:	000bcfe4 	.word	0x000bcfe4
   b8c10:	c1efffff 	.word	0xc1efffff
   b8c14:	3fe00000 	.word	0x3fe00000
   b8c18:	000bbe54 	.word	0x000bbe54
   b8c1c:	40240000 	.word	0x40240000

000b8c20 <_ZN5Print5printEfi>:
{
   b8c20:	b538      	push	{r3, r4, r5, lr}
   b8c22:	4604      	mov	r4, r0
   b8c24:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b8c28:	b2cd      	uxtb	r5, r1
   b8c2a:	f7fb fb5d 	bl	b42e8 <__aeabi_f2d>
   b8c2e:	ec41 0b10 	vmov	d0, r0, r1
   b8c32:	4629      	mov	r1, r5
   b8c34:	4620      	mov	r0, r4
}
   b8c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b8c3a:	f7ff bf29 	b.w	b8a90 <_ZN5Print10printFloatEdh>

000b8c3e <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   b8c3e:	b2c9      	uxtb	r1, r1
   b8c40:	f7ff bf26 	b.w	b8a90 <_ZN5Print10printFloatEdh>

000b8c44 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c48:	b086      	sub	sp, #24
   b8c4a:	af00      	add	r7, sp, #0
   b8c4c:	4605      	mov	r5, r0
   b8c4e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8c50:	1d38      	adds	r0, r7, #4
   b8c52:	2114      	movs	r1, #20
{
   b8c54:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8c56:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8c58:	f7ff fc6e 	bl	b8538 <vsnprintf>

    if (n<bufsize)
   b8c5c:	2813      	cmp	r0, #19
   b8c5e:	d80e      	bhi.n	b8c7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8c60:	1d39      	adds	r1, r7, #4
   b8c62:	4628      	mov	r0, r5
   b8c64:	f7ff fec6 	bl	b89f4 <_ZN5Print5writeEPKc>
   b8c68:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8c6a:	b11e      	cbz	r6, b8c74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8c6c:	4628      	mov	r0, r5
   b8c6e:	f7ff feda 	bl	b8a26 <_ZN5Print7printlnEv>
   b8c72:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8c74:	4620      	mov	r0, r4
   b8c76:	3718      	adds	r7, #24
   b8c78:	46bd      	mov	sp, r7
   b8c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8c7e:	f100 0308 	add.w	r3, r0, #8
   b8c82:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8c86:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8c88:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8c8c:	4622      	mov	r2, r4
   b8c8e:	1c41      	adds	r1, r0, #1
   b8c90:	683b      	ldr	r3, [r7, #0]
   b8c92:	4668      	mov	r0, sp
   b8c94:	f7ff fc50 	bl	b8538 <vsnprintf>
  return write(str);
   b8c98:	4669      	mov	r1, sp
   b8c9a:	4628      	mov	r0, r5
   b8c9c:	f7ff feaa 	bl	b89f4 <_ZN5Print5writeEPKc>
   b8ca0:	4604      	mov	r4, r0
   b8ca2:	46c5      	mov	sp, r8
   b8ca4:	e7e1      	b.n	b8c6a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b8ca8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8ca8:	4b01      	ldr	r3, [pc, #4]	; (b8cb0 <_GLOBAL__sub_I_RGB+0x8>)
   b8caa:	2200      	movs	r2, #0
   b8cac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8cae:	4770      	bx	lr
   b8cb0:	2003e6dc 	.word	0x2003e6dc

000b8cb4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8cb4:	2100      	movs	r1, #0
   b8cb6:	f7ff baf3 	b.w	b82a0 <hal_spi_release>

000b8cba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8cba:	2100      	movs	r1, #0
   b8cbc:	f7ff bae8 	b.w	b8290 <hal_spi_acquire>

000b8cc0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8cc0:	b510      	push	{r4, lr}
   b8cc2:	4604      	mov	r4, r0
   b8cc4:	4608      	mov	r0, r1
{
    _spi = spi;
   b8cc6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8cc8:	f7ff fac2 	bl	b8250 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8ccc:	2300      	movs	r3, #0
   b8cce:	6063      	str	r3, [r4, #4]
}
   b8cd0:	4620      	mov	r0, r4
   b8cd2:	bd10      	pop	{r4, pc}

000b8cd4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8cd4:	b513      	push	{r0, r1, r4, lr}
   b8cd6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8cd8:	7800      	ldrb	r0, [r0, #0]
   b8cda:	f7ff ffee 	bl	b8cba <_ZN8SPIClass4lockEv.isra.0>
   b8cde:	b958      	cbnz	r0, b8cf8 <_ZN8SPIClass5beginEv+0x24>
   b8ce0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8ce2:	9001      	str	r0, [sp, #4]
   b8ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8ce8:	f7ff faa2 	bl	b8230 <hal_spi_begin>
        unlock();
   b8cec:	9801      	ldr	r0, [sp, #4]
    }
}
   b8cee:	b002      	add	sp, #8
   b8cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8cf4:	f7ff bfde 	b.w	b8cb4 <_ZN8SPIClass6unlockEv.isra.0>
   b8cf8:	b002      	add	sp, #8
   b8cfa:	bd10      	pop	{r4, pc}

000b8cfc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8cfc:	7800      	ldrb	r0, [r0, #0]
   b8cfe:	f7ff bfd9 	b.w	b8cb4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8d04 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8d04:	0840      	lsrs	r0, r0, #1
{
   b8d06:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8d08:	6018      	str	r0, [r3, #0]
   b8d0a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8d0c:	6818      	ldr	r0, [r3, #0]
   b8d0e:	4288      	cmp	r0, r1
   b8d10:	b2e5      	uxtb	r5, r4
   b8d12:	d906      	bls.n	b8d22 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8d14:	3401      	adds	r4, #1
   b8d16:	2c08      	cmp	r4, #8
   b8d18:	d002      	beq.n	b8d20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8d1a:	0840      	lsrs	r0, r0, #1
   b8d1c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8d1e:	e7f5      	b.n	b8d0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8d20:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8d22:	4b02      	ldr	r3, [pc, #8]	; (b8d2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8d24:	5d5b      	ldrb	r3, [r3, r5]
   b8d26:	7013      	strb	r3, [r2, #0]
}
   b8d28:	bd30      	pop	{r4, r5, pc}
   b8d2a:	bf00      	nop
   b8d2c:	000bcfe8 	.word	0x000bcfe8

000b8d30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d34:	4606      	mov	r6, r0
   b8d36:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8d38:	7800      	ldrb	r0, [r0, #0]
{
   b8d3a:	460c      	mov	r4, r1
    CHECK(lock());
   b8d3c:	f7ff ffbd 	bl	b8cba <_ZN8SPIClass4lockEv.isra.0>
   b8d40:	2800      	cmp	r0, #0
   b8d42:	db1b      	blt.n	b8d7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8d44:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8d46:	2214      	movs	r2, #20
   b8d48:	2100      	movs	r1, #0
   b8d4a:	a809      	add	r0, sp, #36	; 0x24
   b8d4c:	f001 f835 	bl	b9dba <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8d50:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8d52:	2200      	movs	r2, #0
   b8d54:	a909      	add	r1, sp, #36	; 0x24
   b8d56:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8d58:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8d5c:	f7ff fa88 	bl	b8270 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8d60:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8d64:	b113      	cbz	r3, b8d6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8d66:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8d6a:	b155      	cbz	r5, b8d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8d6c:	2700      	movs	r7, #0
   b8d6e:	46b9      	mov	r9, r7
   b8d70:	46b8      	mov	r8, r7
   b8d72:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8d74:	7923      	ldrb	r3, [r4, #4]
   b8d76:	b15d      	cbz	r5, b8d90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8d78:	b1c3      	cbz	r3, b8dac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8d7a:	2000      	movs	r0, #0
}
   b8d7c:	b00f      	add	sp, #60	; 0x3c
   b8d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8d82:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8d86:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8d8a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8d8e:	e7f1      	b.n	b8d74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8d90:	2b00      	cmp	r3, #0
   b8d92:	d135      	bne.n	b8e00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8d94:	68a3      	ldr	r3, [r4, #8]
   b8d96:	4543      	cmp	r3, r8
   b8d98:	d108      	bne.n	b8dac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8d9a:	f88d 9020 	strb.w	r9, [sp, #32]
   b8d9e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8da2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8da6:	89a3      	ldrh	r3, [r4, #12]
   b8da8:	429a      	cmp	r2, r3
   b8daa:	d0e6      	beq.n	b8d7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8dac:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8dae:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8db0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8db4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8db6:	ab04      	add	r3, sp, #16
   b8db8:	f10d 020f 	add.w	r2, sp, #15
   b8dbc:	f7ff ffa2 	bl	b8d04 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8dc0:	7921      	ldrb	r1, [r4, #4]
   b8dc2:	b985      	cbnz	r5, b8de6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8dc4:	b989      	cbnz	r1, b8dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8dc6:	68a3      	ldr	r3, [r4, #8]
   b8dc8:	4543      	cmp	r3, r8
   b8dca:	d30e      	bcc.n	b8dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8dcc:	f88d 9020 	strb.w	r9, [sp, #32]
   b8dd0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8dd4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8dd8:	89a3      	ldrh	r3, [r4, #12]
   b8dda:	429a      	cmp	r2, r3
   b8ddc:	d105      	bne.n	b8dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8dde:	9b04      	ldr	r3, [sp, #16]
   b8de0:	4543      	cmp	r3, r8
   b8de2:	d102      	bne.n	b8dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8de4:	e7c9      	b.n	b8d7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8de6:	2900      	cmp	r1, #0
   b8de8:	d1f9      	bne.n	b8dde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8dea:	2300      	movs	r3, #0
   b8dec:	9301      	str	r3, [sp, #4]
   b8dee:	7b63      	ldrb	r3, [r4, #13]
   b8df0:	9300      	str	r3, [sp, #0]
   b8df2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8df6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8df8:	7830      	ldrb	r0, [r6, #0]
   b8dfa:	f7ff fa41 	bl	b8280 <hal_spi_set_settings>
   b8dfe:	e7bc      	b.n	b8d7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8e00:	e9cd 5500 	strd	r5, r5, [sp]
   b8e04:	462b      	mov	r3, r5
   b8e06:	462a      	mov	r2, r5
   b8e08:	2101      	movs	r1, #1
   b8e0a:	e7f5      	b.n	b8df8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8e0c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8e0c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8e0e:	7800      	ldrb	r0, [r0, #0]
   b8e10:	f7ff fa16 	bl	b8240 <hal_spi_transfer>
}
   b8e14:	b2c0      	uxtb	r0, r0
   b8e16:	bd08      	pop	{r3, pc}

000b8e18 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8e18:	b510      	push	{r4, lr}
   b8e1a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8e1c:	f7ff f8f8 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8e20:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b8e22:	6823      	ldr	r3, [r4, #0]
   b8e24:	4620      	mov	r0, r4
   b8e26:	695b      	ldr	r3, [r3, #20]
   b8e28:	4798      	blx	r3
    if (c >= 0) return c;
   b8e2a:	2800      	cmp	r0, #0
   b8e2c:	da08      	bge.n	b8e40 <_ZN6Stream9timedReadEv+0x28>
   b8e2e:	f7ff f8ef 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b8e32:	68e3      	ldr	r3, [r4, #12]
   b8e34:	1ac0      	subs	r0, r0, r3
   b8e36:	68a3      	ldr	r3, [r4, #8]
   b8e38:	4298      	cmp	r0, r3
   b8e3a:	d3f2      	bcc.n	b8e22 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8e40:	bd10      	pop	{r4, pc}

000b8e42 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b8e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e46:	4607      	mov	r7, r0
   b8e48:	460c      	mov	r4, r1
   b8e4a:	188e      	adds	r6, r1, r2
   b8e4c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b8e4e:	42b5      	cmp	r5, r6
   b8e50:	eba5 0804 	sub.w	r8, r5, r4
   b8e54:	d007      	beq.n	b8e66 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b8e56:	4638      	mov	r0, r7
   b8e58:	f7ff ffde 	bl	b8e18 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b8e5c:	1e03      	subs	r3, r0, #0
   b8e5e:	db02      	blt.n	b8e66 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b8e60:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b8e64:	e7f3      	b.n	b8e4e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b8e66:	4640      	mov	r0, r8
   b8e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8e6c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8e6c:	b510      	push	{r4, lr}
   b8e6e:	4604      	mov	r4, r0
{
	free(buffer);
   b8e70:	6800      	ldr	r0, [r0, #0]
   b8e72:	f7ff fb49 	bl	b8508 <free>
}
   b8e76:	4620      	mov	r0, r4
   b8e78:	bd10      	pop	{r4, pc}

000b8e7a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8e7a:	b510      	push	{r4, lr}
   b8e7c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8e7e:	6800      	ldr	r0, [r0, #0]
   b8e80:	b108      	cbz	r0, b8e86 <_ZN6String10invalidateEv+0xc>
   b8e82:	f7ff fb41 	bl	b8508 <free>
	buffer = NULL;
   b8e86:	2300      	movs	r3, #0
	capacity = len = 0;
   b8e88:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8e8c:	6023      	str	r3, [r4, #0]
}
   b8e8e:	bd10      	pop	{r4, pc}

000b8e90 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8e90:	b538      	push	{r3, r4, r5, lr}
   b8e92:	4604      	mov	r4, r0
   b8e94:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8e96:	6800      	ldr	r0, [r0, #0]
   b8e98:	3101      	adds	r1, #1
   b8e9a:	f7ff fb3d 	bl	b8518 <realloc>
	if (newbuffer) {
   b8e9e:	b110      	cbz	r0, b8ea6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8ea0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8ea4:	2001      	movs	r0, #1
	}
	return 0;
}
   b8ea6:	bd38      	pop	{r3, r4, r5, pc}

000b8ea8 <_ZN6String7reserveEj>:
{
   b8ea8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8eaa:	6803      	ldr	r3, [r0, #0]
{
   b8eac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8eae:	b123      	cbz	r3, b8eba <_ZN6String7reserveEj+0x12>
   b8eb0:	6843      	ldr	r3, [r0, #4]
   b8eb2:	428b      	cmp	r3, r1
   b8eb4:	d301      	bcc.n	b8eba <_ZN6String7reserveEj+0x12>
   b8eb6:	2001      	movs	r0, #1
}
   b8eb8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8eba:	4620      	mov	r0, r4
   b8ebc:	f7ff ffe8 	bl	b8e90 <_ZN6String12changeBufferEj>
   b8ec0:	2800      	cmp	r0, #0
   b8ec2:	d0f9      	beq.n	b8eb8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8ec4:	68a3      	ldr	r3, [r4, #8]
   b8ec6:	2b00      	cmp	r3, #0
   b8ec8:	d1f5      	bne.n	b8eb6 <_ZN6String7reserveEj+0xe>
   b8eca:	6822      	ldr	r2, [r4, #0]
   b8ecc:	7013      	strb	r3, [r2, #0]
   b8ece:	e7f2      	b.n	b8eb6 <_ZN6String7reserveEj+0xe>

000b8ed0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8ed2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8ed4:	4611      	mov	r1, r2
   b8ed6:	9201      	str	r2, [sp, #4]
{
   b8ed8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8eda:	f7ff ffe5 	bl	b8ea8 <_ZN6String7reserveEj>
   b8ede:	9a01      	ldr	r2, [sp, #4]
   b8ee0:	b928      	cbnz	r0, b8eee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8ee2:	4620      	mov	r0, r4
   b8ee4:	f7ff ffc9 	bl	b8e7a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8ee8:	4620      	mov	r0, r4
   b8eea:	b003      	add	sp, #12
   b8eec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8eee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8ef0:	4629      	mov	r1, r5
   b8ef2:	6820      	ldr	r0, [r4, #0]
   b8ef4:	f000 ff53 	bl	b9d9e <memcpy>
	buffer[len] = 0;
   b8ef8:	6822      	ldr	r2, [r4, #0]
   b8efa:	68a3      	ldr	r3, [r4, #8]
   b8efc:	2100      	movs	r1, #0
   b8efe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8f00:	e7f2      	b.n	b8ee8 <_ZN6String4copyEPKcj+0x18>

000b8f02 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8f02:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8f04:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8f06:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8f0a:	4604      	mov	r4, r0
	len = 0;
   b8f0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8f0e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8f10:	b141      	cbz	r1, b8f24 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8f12:	4608      	mov	r0, r1
   b8f14:	9101      	str	r1, [sp, #4]
   b8f16:	f7fb fdaf 	bl	b4a78 <strlen>
   b8f1a:	9901      	ldr	r1, [sp, #4]
   b8f1c:	4602      	mov	r2, r0
   b8f1e:	4620      	mov	r0, r4
   b8f20:	f7ff ffd6 	bl	b8ed0 <_ZN6String4copyEPKcj>
}
   b8f24:	4620      	mov	r0, r4
   b8f26:	b002      	add	sp, #8
   b8f28:	bd10      	pop	{r4, pc}

000b8f2a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8f2a:	b513      	push	{r0, r1, r4, lr}
   b8f2c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8f2e:	b159      	cbz	r1, b8f48 <_ZN6StringaSEPKc+0x1e>
   b8f30:	4608      	mov	r0, r1
   b8f32:	9101      	str	r1, [sp, #4]
   b8f34:	f7fb fda0 	bl	b4a78 <strlen>
   b8f38:	9901      	ldr	r1, [sp, #4]
   b8f3a:	4602      	mov	r2, r0
   b8f3c:	4620      	mov	r0, r4
   b8f3e:	f7ff ffc7 	bl	b8ed0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8f42:	4620      	mov	r0, r4
   b8f44:	b002      	add	sp, #8
   b8f46:	bd10      	pop	{r4, pc}
	else invalidate();
   b8f48:	f7ff ff97 	bl	b8e7a <_ZN6String10invalidateEv>
   b8f4c:	e7f9      	b.n	b8f42 <_ZN6StringaSEPKc+0x18>

000b8f4e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8f4e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8f50:	6882      	ldr	r2, [r0, #8]
   b8f52:	b93a      	cbnz	r2, b8f64 <_ZNK6String6equalsEPKc+0x16>
   b8f54:	b121      	cbz	r1, b8f60 <_ZNK6String6equalsEPKc+0x12>
   b8f56:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8f58:	fab0 f080 	clz	r0, r0
   b8f5c:	0940      	lsrs	r0, r0, #5
   b8f5e:	e000      	b.n	b8f62 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8f60:	2001      	movs	r0, #1
}
   b8f62:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8f64:	6800      	ldr	r0, [r0, #0]
   b8f66:	b909      	cbnz	r1, b8f6c <_ZNK6String6equalsEPKc+0x1e>
   b8f68:	7800      	ldrb	r0, [r0, #0]
   b8f6a:	e7f5      	b.n	b8f58 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8f6c:	f7fb fd7a 	bl	b4a64 <strcmp>
   b8f70:	e7f2      	b.n	b8f58 <_ZNK6String6equalsEPKc+0xa>
	...

000b8f74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8f74:	4b05      	ldr	r3, [pc, #20]	; (b8f8c <_GLOBAL__sub_I_System+0x18>)
   b8f76:	2202      	movs	r2, #2
   b8f78:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8f7a:	4b05      	ldr	r3, [pc, #20]	; (b8f90 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8f7c:	4a05      	ldr	r2, [pc, #20]	; (b8f94 <_GLOBAL__sub_I_System+0x20>)
   b8f7e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8f80:	2000      	movs	r0, #0
   b8f82:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8f86:	f7ff ba13 	b.w	b83b0 <set_system_mode>
   b8f8a:	bf00      	nop
   b8f8c:	2003e6f8 	.word	0x2003e6f8
   b8f90:	2003e6ec 	.word	0x2003e6ec
   b8f94:	ffff0000 	.word	0xffff0000

000b8f98 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8f98:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8f9a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8f9c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8fa0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8fa2:	2201      	movs	r2, #1
   b8fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8fa8:	f10d 0107 	add.w	r1, sp, #7
   b8fac:	47a0      	blx	r4
}
   b8fae:	b002      	add	sp, #8
   b8fb0:	bd10      	pop	{r4, pc}

000b8fb2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8fb2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8fb4:	6803      	ldr	r3, [r0, #0]
   b8fb6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8fbc:	46a4      	mov	ip, r4
}
   b8fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8fc2:	4760      	bx	ip

000b8fc4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8fc4:	b513      	push	{r0, r1, r4, lr}
   b8fc6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8fc8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8fca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8fce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8fd0:	f10d 0107 	add.w	r1, sp, #7
   b8fd4:	2201      	movs	r2, #1
   b8fd6:	47a0      	blx	r4
}
   b8fd8:	b002      	add	sp, #8
   b8fda:	bd10      	pop	{r4, pc}

000b8fdc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8fdc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8fde:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8fe0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8fe4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8fe8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8fea:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8fec:	d008      	beq.n	b9000 <_ZN9TCPClient4readEv+0x24>
   b8fee:	6963      	ldr	r3, [r4, #20]
   b8ff0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8ff4:	1c51      	adds	r1, r2, #1
   b8ff6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8ffa:	4413      	add	r3, r2
   b8ffc:	7918      	ldrb	r0, [r3, #4]
}
   b8ffe:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9000:	6803      	ldr	r3, [r0, #0]
   b9002:	691b      	ldr	r3, [r3, #16]
   b9004:	4798      	blx	r3
   b9006:	2800      	cmp	r0, #0
   b9008:	d1f1      	bne.n	b8fee <_ZN9TCPClient4readEv+0x12>
   b900a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b900e:	e7f6      	b.n	b8ffe <_ZN9TCPClient4readEv+0x22>

000b9010 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9010:	4770      	bx	lr

000b9012 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9012:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9014:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9016:	43c0      	mvns	r0, r0
   b9018:	0fc0      	lsrs	r0, r0, #31
   b901a:	4770      	bx	lr

000b901c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b901c:	4770      	bx	lr
	...

000b9020 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9020:	4b06      	ldr	r3, [pc, #24]	; (b903c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9022:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9024:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b9026:	f100 040c 	add.w	r4, r0, #12
	    ||
   b902a:	d005      	beq.n	b9038 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b902c:	4608      	mov	r0, r1
   b902e:	f000 fd93 	bl	b9b58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9032:	2800      	cmp	r0, #0
   b9034:	bf08      	it	eq
   b9036:	2400      	moveq	r4, #0
      }
   b9038:	4620      	mov	r0, r4
   b903a:	bd10      	pop	{r4, pc}
   b903c:	000bcf1c 	.word	0x000bcf1c

000b9040 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9040:	b510      	push	{r4, lr}
   b9042:	21ac      	movs	r1, #172	; 0xac
   b9044:	4604      	mov	r4, r0
   b9046:	f7fb fd78 	bl	b4b3a <_ZdlPvj>
   b904a:	4620      	mov	r0, r4
   b904c:	bd10      	pop	{r4, pc}

000b904e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b904e:	21ac      	movs	r1, #172	; 0xac
   b9050:	f7fb bd73 	b.w	b4b3a <_ZdlPvj>

000b9054 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9058:	f04f 0800 	mov.w	r8, #0
   b905c:	b086      	sub	sp, #24
   b905e:	461c      	mov	r4, r3
   b9060:	f8c0 8004 	str.w	r8, [r0, #4]
   b9064:	4605      	mov	r5, r0
   b9066:	460e      	mov	r6, r1
   b9068:	4617      	mov	r7, r2
    struct timeval tv = {};
   b906a:	4641      	mov	r1, r8
   b906c:	2210      	movs	r2, #16
   b906e:	a802      	add	r0, sp, #8
   b9070:	f000 fea3 	bl	b9dba <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9074:	1c63      	adds	r3, r4, #1
   b9076:	d009      	beq.n	b908c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b907c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9080:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9084:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9088:	435c      	muls	r4, r3
   b908a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b908c:	6968      	ldr	r0, [r5, #20]
   b908e:	2310      	movs	r3, #16
   b9090:	9300      	str	r3, [sp, #0]
   b9092:	6800      	ldr	r0, [r0, #0]
   b9094:	ab02      	add	r3, sp, #8
   b9096:	f241 0205 	movw	r2, #4101	; 0x1005
   b909a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b909e:	f7ff f897 	bl	b81d0 <sock_setsockopt>
    if (ret < 0) {
   b90a2:	2800      	cmp	r0, #0
   b90a4:	da07      	bge.n	b90b6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b90a6:	f7ff fa57 	bl	b8558 <__errno>
   b90aa:	6803      	ldr	r3, [r0, #0]
   b90ac:	606b      	str	r3, [r5, #4]
        return 0;
   b90ae:	2000      	movs	r0, #0
}
   b90b0:	b006      	add	sp, #24
   b90b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b90b6:	6968      	ldr	r0, [r5, #20]
   b90b8:	2300      	movs	r3, #0
   b90ba:	6800      	ldr	r0, [r0, #0]
   b90bc:	463a      	mov	r2, r7
   b90be:	4631      	mov	r1, r6
   b90c0:	f7ff f8a6 	bl	b8210 <sock_send>
    if (ret < 0) {
   b90c4:	1e03      	subs	r3, r0, #0
   b90c6:	dbee      	blt.n	b90a6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b90c8:	4618      	mov	r0, r3
   b90ca:	e7f1      	b.n	b90b0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b90cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b90cc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b90ce:	6984      	ldr	r4, [r0, #24]
   b90d0:	4b0a      	ldr	r3, [pc, #40]	; (b90fc <_ZN9TCPClientD1Ev+0x30>)
   b90d2:	6003      	str	r3, [r0, #0]
   b90d4:	4605      	mov	r5, r0
   b90d6:	b17c      	cbz	r4, b90f8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b90d8:	6863      	ldr	r3, [r4, #4]
   b90da:	3b01      	subs	r3, #1
   b90dc:	6063      	str	r3, [r4, #4]
   b90de:	b95b      	cbnz	r3, b90f8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b90e0:	6823      	ldr	r3, [r4, #0]
   b90e2:	4620      	mov	r0, r4
   b90e4:	689b      	ldr	r3, [r3, #8]
   b90e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b90e8:	68a3      	ldr	r3, [r4, #8]
   b90ea:	3b01      	subs	r3, #1
   b90ec:	60a3      	str	r3, [r4, #8]
   b90ee:	b91b      	cbnz	r3, b90f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b90f0:	6823      	ldr	r3, [r4, #0]
   b90f2:	4620      	mov	r0, r4
   b90f4:	68db      	ldr	r3, [r3, #12]
   b90f6:	4798      	blx	r3
   b90f8:	4628      	mov	r0, r5
   b90fa:	bd38      	pop	{r3, r4, r5, pc}
   b90fc:	000bd02c 	.word	0x000bd02c

000b9100 <_ZN9TCPClientD0Ev>:
   b9100:	b510      	push	{r4, lr}
   b9102:	4604      	mov	r4, r0
   b9104:	f7ff ffe2 	bl	b90cc <_ZN9TCPClientD1Ev>
   b9108:	4620      	mov	r0, r4
   b910a:	211c      	movs	r1, #28
   b910c:	f7fb fd15 	bl	b4b3a <_ZdlPvj>
   b9110:	4620      	mov	r0, r4
   b9112:	bd10      	pop	{r4, pc}

000b9114 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9114:	b530      	push	{r4, r5, lr}
   b9116:	b087      	sub	sp, #28
   b9118:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b911a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b911c:	4668      	mov	r0, sp
   b911e:	f7ff fb89 	bl	b8834 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9124:	3404      	adds	r4, #4
   b9126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9128:	682b      	ldr	r3, [r5, #0]
   b912a:	7023      	strb	r3, [r4, #0]
    }
   b912c:	b007      	add	sp, #28
   b912e:	bd30      	pop	{r4, r5, pc}

000b9130 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9130:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9132:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9134:	4b05      	ldr	r3, [pc, #20]	; (b914c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9136:	4604      	mov	r4, r0
   b9138:	358c      	adds	r5, #140	; 0x8c
   b913a:	f844 3b04 	str.w	r3, [r4], #4
   b913e:	4606      	mov	r6, r0
   b9140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9144:	682b      	ldr	r3, [r5, #0]
   b9146:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9148:	4630      	mov	r0, r6
   b914a:	bd70      	pop	{r4, r5, r6, pc}
   b914c:	000bcf90 	.word	0x000bcf90

000b9150 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9154:	4698      	mov	r8, r3
    stop();
   b9156:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9158:	b093      	sub	sp, #76	; 0x4c
   b915a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b915c:	2400      	movs	r4, #0
    stop();
   b915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9160:	4606      	mov	r6, r0
   b9162:	4617      	mov	r7, r2
    stop();
   b9164:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9166:	4628      	mov	r0, r5
   b9168:	466b      	mov	r3, sp
   b916a:	4622      	mov	r2, r4
   b916c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b916e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9170:	f7ff f826 	bl	b81c0 <netdb_getaddrinfo>
   b9174:	4605      	mov	r5, r0
   b9176:	2800      	cmp	r0, #0
   b9178:	d163      	bne.n	b9242 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b917a:	9b00      	ldr	r3, [sp, #0]
   b917c:	2b00      	cmp	r3, #0
   b917e:	d04b      	beq.n	b9218 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9180:	695b      	ldr	r3, [r3, #20]
   b9182:	2b00      	cmp	r3, #0
   b9184:	d048      	beq.n	b9218 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9186:	a806      	add	r0, sp, #24
   b9188:	f7ff fb10 	bl	b87ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b918c:	9b00      	ldr	r3, [sp, #0]
   b918e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9190:	7863      	ldrb	r3, [r4, #1]
   b9192:	2b02      	cmp	r3, #2
   b9194:	d104      	bne.n	b91a0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9196:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9198:	a806      	add	r0, sp, #24
   b919a:	f7ff ffbb 	bl	b9114 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b919e:	e026      	b.n	b91ee <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b91a0:	2b0a      	cmp	r3, #10
   b91a2:	d124      	bne.n	b91ee <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b91a4:	2211      	movs	r2, #17
   b91a6:	4629      	mov	r1, r5
   b91a8:	a801      	add	r0, sp, #4
   b91aa:	f000 fe06 	bl	b9dba <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b91ae:	68a3      	ldr	r3, [r4, #8]
   b91b0:	2b00      	cmp	r3, #0
   b91b2:	d038      	beq.n	b9226 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b91b4:	f104 0308 	add.w	r3, r4, #8
   b91b8:	f10d 0c04 	add.w	ip, sp, #4
   b91bc:	3418      	adds	r4, #24
   b91be:	6818      	ldr	r0, [r3, #0]
   b91c0:	6859      	ldr	r1, [r3, #4]
   b91c2:	4662      	mov	r2, ip
   b91c4:	c203      	stmia	r2!, {r0, r1}
   b91c6:	3308      	adds	r3, #8
   b91c8:	42a3      	cmp	r3, r4
   b91ca:	4694      	mov	ip, r2
   b91cc:	d1f7      	bne.n	b91be <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b91ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b91d0:	a901      	add	r1, sp, #4
   b91d2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b91d4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b91d8:	f7ff faf6 	bl	b87c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b91dc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b91e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b91e4:	ac07      	add	r4, sp, #28
   b91e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b91e8:	f8dc 3000 	ldr.w	r3, [ip]
   b91ec:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b91ee:	a806      	add	r0, sp, #24
   b91f0:	f7ff fafc 	bl	b87ec <_ZNK9IPAddresscvbEv>
        if (addr) {
   b91f4:	b180      	cbz	r0, b9218 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b91f6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b91f8:	ad07      	add	r5, sp, #28
   b91fa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b91fe:	4b12      	ldr	r3, [pc, #72]	; (b9248 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9200:	930c      	str	r3, [sp, #48]	; 0x30
   b9202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9204:	ac0d      	add	r4, sp, #52	; 0x34
   b9206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9208:	682b      	ldr	r3, [r5, #0]
   b920a:	7023      	strb	r3, [r4, #0]
   b920c:	463a      	mov	r2, r7
   b920e:	4643      	mov	r3, r8
   b9210:	a90c      	add	r1, sp, #48	; 0x30
   b9212:	4630      	mov	r0, r6
   b9214:	47c8      	blx	r9
   b9216:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9218:	9800      	ldr	r0, [sp, #0]
   b921a:	f7fe ffc9 	bl	b81b0 <netdb_freeaddrinfo>
}
   b921e:	4628      	mov	r0, r5
   b9220:	b013      	add	sp, #76	; 0x4c
   b9222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9226:	68e3      	ldr	r3, [r4, #12]
   b9228:	2b00      	cmp	r3, #0
   b922a:	d1c3      	bne.n	b91b4 <_ZN9TCPClient7connectEPKctm+0x64>
   b922c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9230:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9234:	f7fe ffa4 	bl	b8180 <inet_htonl>
   b9238:	4581      	cmp	r9, r0
   b923a:	d1bb      	bne.n	b91b4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b923c:	f104 0114 	add.w	r1, r4, #20
   b9240:	e7aa      	b.n	b9198 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9242:	4625      	mov	r5, r4
   b9244:	e7e8      	b.n	b9218 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9246:	bf00      	nop
   b9248:	000bcf90 	.word	0x000bcf90

000b924c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b924c:	b538      	push	{r3, r4, r5, lr}
   b924e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9250:	681a      	ldr	r2, [r3, #0]
   b9252:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9254:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9256:	da10      	bge.n	b927a <_ZN9TCPClient9connectedEv+0x2e>
   b9258:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b925c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9260:	429a      	cmp	r2, r3
   b9262:	d10a      	bne.n	b927a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9264:	6803      	ldr	r3, [r0, #0]
   b9266:	691b      	ldr	r3, [r3, #16]
   b9268:	4798      	blx	r3
        if (!rv) {
   b926a:	4604      	mov	r4, r0
   b926c:	b928      	cbnz	r0, b927a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b926e:	682b      	ldr	r3, [r5, #0]
   b9270:	4628      	mov	r0, r5
   b9272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9274:	4798      	blx	r3
        rv = available();
   b9276:	4620      	mov	r0, r4
}
   b9278:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b927a:	2001      	movs	r0, #1
   b927c:	e7fc      	b.n	b9278 <_ZN9TCPClient9connectedEv+0x2c>

000b927e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b927e:	b510      	push	{r4, lr}
   b9280:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9282:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9286:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b928a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b928c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b928e:	d005      	beq.n	b929c <_ZN9TCPClient4peekEv+0x1e>
   b9290:	6963      	ldr	r3, [r4, #20]
   b9292:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9296:	4413      	add	r3, r2
   b9298:	7918      	ldrb	r0, [r3, #4]
}
   b929a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b929c:	6803      	ldr	r3, [r0, #0]
   b929e:	691b      	ldr	r3, [r3, #16]
   b92a0:	4798      	blx	r3
   b92a2:	2800      	cmp	r0, #0
   b92a4:	d1f4      	bne.n	b9290 <_ZN9TCPClient4peekEv+0x12>
   b92a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b92aa:	e7f6      	b.n	b929a <_ZN9TCPClient4peekEv+0x1c>

000b92ac <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b92ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b92ae:	6943      	ldr	r3, [r0, #20]
   b92b0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b92b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b92b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b92ba:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b92bc:	4605      	mov	r5, r0
   b92be:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b92c0:	d016      	beq.n	b92f0 <_ZN9TCPClient4readEPhj+0x44>
   b92c2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b92c4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b92c8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b92cc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b92ce:	42bc      	cmp	r4, r7
   b92d0:	bf28      	it	cs
   b92d2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b92d4:	3304      	adds	r3, #4
   b92d6:	4622      	mov	r2, r4
   b92d8:	4419      	add	r1, r3
   b92da:	4630      	mov	r0, r6
   b92dc:	f000 fd5f 	bl	b9d9e <memcpy>
   b92e0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b92e2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b92e6:	4423      	add	r3, r4
   b92e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b92ec:	4620      	mov	r0, r4
   b92ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b92f0:	6803      	ldr	r3, [r0, #0]
   b92f2:	691b      	ldr	r3, [r3, #16]
   b92f4:	4798      	blx	r3
   b92f6:	2800      	cmp	r0, #0
   b92f8:	d1e3      	bne.n	b92c2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b92fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b92fe:	e7f5      	b.n	b92ec <_ZN9TCPClient4readEPhj+0x40>

000b9300 <_ZN9TCPClient12flush_bufferEv>:
   b9300:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9302:	2300      	movs	r3, #0
   b9304:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9308:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b930a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b930e:	4770      	bx	lr

000b9310 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9314:	461f      	mov	r7, r3
    stop();
   b9316:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9318:	460c      	mov	r4, r1
    stop();
   b931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b931c:	b08a      	sub	sp, #40	; 0x28
   b931e:	4605      	mov	r5, r0
   b9320:	4616      	mov	r6, r2
    stop();
   b9322:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9324:	7d23      	ldrb	r3, [r4, #20]
   b9326:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b932a:	2b04      	cmp	r3, #4
   b932c:	bf0c      	ite	eq
   b932e:	2002      	moveq	r0, #2
   b9330:	200a      	movne	r0, #10
   b9332:	2206      	movs	r2, #6
   b9334:	2101      	movs	r1, #1
   b9336:	f7fe ff73 	bl	b8220 <sock_socket>
   b933a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b933e:	696b      	ldr	r3, [r5, #20]
   b9340:	681b      	ldr	r3, [r3, #0]
   b9342:	2b00      	cmp	r3, #0
   b9344:	da08      	bge.n	b9358 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9346:	682b      	ldr	r3, [r5, #0]
   b9348:	4628      	mov	r0, r5
   b934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b934c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b934e:	4798      	blx	r3
}
   b9350:	4620      	mov	r0, r4
   b9352:	b00a      	add	sp, #40	; 0x28
   b9354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9358:	4628      	mov	r0, r5
   b935a:	f7ff ffd1 	bl	b9300 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b935e:	b1b7      	cbz	r7, b938e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9360:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9362:	a903      	add	r1, sp, #12
   b9364:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9366:	9303      	str	r3, [sp, #12]
   b9368:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b936c:	f7fe fef8 	bl	b8160 <if_index_to_name>
   b9370:	2800      	cmp	r0, #0
   b9372:	d1e8      	bne.n	b9346 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9374:	6968      	ldr	r0, [r5, #20]
   b9376:	2306      	movs	r3, #6
   b9378:	9300      	str	r3, [sp, #0]
   b937a:	6800      	ldr	r0, [r0, #0]
   b937c:	ab03      	add	r3, sp, #12
   b937e:	f241 020b 	movw	r2, #4107	; 0x100b
   b9382:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9386:	f7fe ff23 	bl	b81d0 <sock_setsockopt>
   b938a:	2800      	cmp	r0, #0
   b938c:	d1db      	bne.n	b9346 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b938e:	221c      	movs	r2, #28
   b9390:	2100      	movs	r1, #0
   b9392:	a803      	add	r0, sp, #12
   b9394:	f000 fd11 	bl	b9dba <memset>
    if (ip.version() == 4) {
   b9398:	7d23      	ldrb	r3, [r4, #20]
   b939a:	2b04      	cmp	r3, #4
   b939c:	d11d      	bne.n	b93da <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b939e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b93a2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b93a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b93a8:	f7fe fefa 	bl	b81a0 <inet_htons>
   b93ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b93b0:	6860      	ldr	r0, [r4, #4]
   b93b2:	f7fe fee5 	bl	b8180 <inet_htonl>
   b93b6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b93b8:	696b      	ldr	r3, [r5, #20]
   b93ba:	221c      	movs	r2, #28
   b93bc:	6818      	ldr	r0, [r3, #0]
   b93be:	a903      	add	r1, sp, #12
   b93c0:	f7fe ff16 	bl	b81f0 <sock_connect>
   b93c4:	2800      	cmp	r0, #0
   b93c6:	d1be      	bne.n	b9346 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b93c8:	3404      	adds	r4, #4
   b93ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b93cc:	696d      	ldr	r5, [r5, #20]
   b93ce:	358c      	adds	r5, #140	; 0x8c
   b93d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b93d2:	6823      	ldr	r3, [r4, #0]
   b93d4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b93d6:	2401      	movs	r4, #1
   b93d8:	e7ba      	b.n	b9350 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b93da:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b93de:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b93e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b93e4:	f7fe fedc 	bl	b81a0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b93e8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b93ea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b93ee:	1d23      	adds	r3, r4, #4
   b93f0:	f104 0714 	add.w	r7, r4, #20
   b93f4:	6818      	ldr	r0, [r3, #0]
   b93f6:	6859      	ldr	r1, [r3, #4]
   b93f8:	4632      	mov	r2, r6
   b93fa:	c203      	stmia	r2!, {r0, r1}
   b93fc:	3308      	adds	r3, #8
   b93fe:	42bb      	cmp	r3, r7
   b9400:	4616      	mov	r6, r2
   b9402:	d1f7      	bne.n	b93f4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9404:	e7d8      	b.n	b93b8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9408 <_ZN9TCPClient9availableEv>:
{
   b9408:	b530      	push	{r4, r5, lr}
   b940a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b940c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9410:	b08b      	sub	sp, #44	; 0x2c
   b9412:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9414:	b12b      	cbz	r3, b9422 <_ZN9TCPClient9availableEv+0x1a>
   b9416:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b941a:	429a      	cmp	r2, r3
   b941c:	d101      	bne.n	b9422 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b941e:	f7ff ff6f 	bl	b9300 <_ZN9TCPClient12flush_bufferEv>
   b9422:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9424:	6808      	ldr	r0, [r1, #0]
   b9426:	2800      	cmp	r0, #0
   b9428:	db18      	blt.n	b945c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b942a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b942e:	2d7f      	cmp	r5, #127	; 0x7f
   b9430:	d814      	bhi.n	b945c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9432:	3104      	adds	r1, #4
   b9434:	2308      	movs	r3, #8
   b9436:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b943a:	4429      	add	r1, r5
   b943c:	f7fe fee0 	bl	b8200 <sock_recv>
            if (ret > 0) {
   b9440:	2800      	cmp	r0, #0
   b9442:	dd13      	ble.n	b946c <_ZN9TCPClient9availableEv+0x64>
   b9444:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9446:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b944a:	b90a      	cbnz	r2, b9450 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b944c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9450:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9452:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9456:	4410      	add	r0, r2
   b9458:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b945c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b945e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9462:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9466:	1ac0      	subs	r0, r0, r3
   b9468:	b00b      	add	sp, #44	; 0x2c
   b946a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b946c:	f7ff f874 	bl	b8558 <__errno>
   b9470:	6803      	ldr	r3, [r0, #0]
   b9472:	2b0b      	cmp	r3, #11
   b9474:	d0f2      	beq.n	b945c <_ZN9TCPClient9availableEv+0x54>
   b9476:	f7ff f86f 	bl	b8558 <__errno>
   b947a:	6803      	ldr	r3, [r0, #0]
   b947c:	2b0b      	cmp	r3, #11
   b947e:	d0ed      	beq.n	b945c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9480:	2320      	movs	r3, #32
   b9482:	2500      	movs	r5, #0
   b9484:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9488:	f7ff f866 	bl	b8558 <__errno>
   b948c:	6803      	ldr	r3, [r0, #0]
   b948e:	9301      	str	r3, [sp, #4]
   b9490:	4b08      	ldr	r3, [pc, #32]	; (b94b4 <_ZN9TCPClient9availableEv+0xac>)
   b9492:	4909      	ldr	r1, [pc, #36]	; (b94b8 <_ZN9TCPClient9availableEv+0xb0>)
   b9494:	9300      	str	r3, [sp, #0]
   b9496:	aa02      	add	r2, sp, #8
   b9498:	462b      	mov	r3, r5
   b949a:	2032      	movs	r0, #50	; 0x32
   b949c:	f7fe ff80 	bl	b83a0 <log_message>
                    sock_close(d_->sock);
   b94a0:	6963      	ldr	r3, [r4, #20]
   b94a2:	6818      	ldr	r0, [r3, #0]
   b94a4:	f7fe fe9c 	bl	b81e0 <sock_close>
   b94a8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b94aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b94ae:	601a      	str	r2, [r3, #0]
   b94b0:	e7d4      	b.n	b945c <_ZN9TCPClient9availableEv+0x54>
   b94b2:	bf00      	nop
   b94b4:	000bcff7 	.word	0x000bcff7
   b94b8:	000bcff0 	.word	0x000bcff0

000b94bc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b94bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b94be:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b94c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b94c2:	6818      	ldr	r0, [r3, #0]
   b94c4:	2800      	cmp	r0, #0
   b94c6:	db01      	blt.n	b94cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b94c8:	f7fe fe8a 	bl	b81e0 <sock_close>
   b94cc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b94ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b94d2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b94d4:	6960      	ldr	r0, [r4, #20]
   b94d6:	2211      	movs	r2, #17
   b94d8:	2100      	movs	r1, #0
   b94da:	308c      	adds	r0, #140	; 0x8c
   b94dc:	f000 fc6d 	bl	b9dba <memset>
    flush_buffer();
   b94e0:	4620      	mov	r0, r4
}
   b94e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b94e6:	f7ff bf0b 	b.w	b9300 <_ZN9TCPClient12flush_bufferEv>

000b94ea <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b94ea:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b94ec:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b94ee:	4604      	mov	r4, r0
          total(0) {
   b94f0:	6001      	str	r1, [r0, #0]
   b94f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b94f6:	3088      	adds	r0, #136	; 0x88
   b94f8:	f7ff f958 	bl	b87ac <_ZN9IPAddressC1Ev>
}
   b94fc:	4620      	mov	r0, r4
   b94fe:	bd10      	pop	{r4, pc}

000b9500 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9500:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9502:	2300      	movs	r3, #0
   b9504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9508:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b950c:	4a0e      	ldr	r2, [pc, #56]	; (b9548 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b950e:	6103      	str	r3, [r0, #16]
   b9510:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9512:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9514:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9516:	20ac      	movs	r0, #172	; 0xac
   b9518:	9101      	str	r1, [sp, #4]
   b951a:	f7fb fb08 	bl	b4b2e <_Znwj>
	  auto __pi = ::new (__mem)
   b951e:	1e05      	subs	r5, r0, #0
   b9520:	f105 060c 	add.w	r6, r5, #12
   b9524:	d008      	beq.n	b9538 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9526:	2301      	movs	r3, #1
   b9528:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b952c:	4b07      	ldr	r3, [pc, #28]	; (b954c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b952e:	9901      	ldr	r1, [sp, #4]
   b9530:	602b      	str	r3, [r5, #0]
   b9532:	4630      	mov	r0, r6
   b9534:	f7ff ffd9 	bl	b94ea <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9538:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b953a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b953e:	f7ff fedf 	bl	b9300 <_ZN9TCPClient12flush_bufferEv>
}
   b9542:	b002      	add	sp, #8
   b9544:	bd70      	pop	{r4, r5, r6, pc}
   b9546:	bf00      	nop
   b9548:	000bd02c 	.word	0x000bd02c
   b954c:	000bd010 	.word	0x000bd010

000b9550 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9550:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9556:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9558:	f7ff ffd2 	bl	b9500 <_ZN9TCPClientC1Ei>
}
   b955c:	4620      	mov	r0, r4
   b955e:	bd10      	pop	{r4, pc}

000b9560 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9560:	b510      	push	{r4, lr}
   b9562:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9564:	6800      	ldr	r0, [r0, #0]
   b9566:	2800      	cmp	r0, #0
   b9568:	db01      	blt.n	b956e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b956a:	f7fe fe39 	bl	b81e0 <sock_close>
    }
}
   b956e:	4620      	mov	r0, r4
   b9570:	bd10      	pop	{r4, pc}

000b9572 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9572:	300c      	adds	r0, #12
   b9574:	f7ff bff4 	b.w	b9560 <_ZN9TCPClient4DataD1Ev>

000b9578 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9578:	4b02      	ldr	r3, [pc, #8]	; (b9584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b957a:	681a      	ldr	r2, [r3, #0]
   b957c:	4b02      	ldr	r3, [pc, #8]	; (b9588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b957e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9580:	4770      	bx	lr
   b9582:	bf00      	nop
   b9584:	2003e314 	.word	0x2003e314
   b9588:	2003e6fc 	.word	0x2003e6fc

000b958c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b958c:	4770      	bx	lr

000b958e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b958e:	7441      	strb	r1, [r0, #17]
}
   b9590:	4770      	bx	lr

000b9592 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9592:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9594:	7c00      	ldrb	r0, [r0, #16]
   b9596:	f7fe febb 	bl	b8310 <hal_usart_available_data_for_write>
}
   b959a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b959e:	bd08      	pop	{r3, pc}

000b95a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b95a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b95a2:	7c00      	ldrb	r0, [r0, #16]
   b95a4:	f7fe fe8c 	bl	b82c0 <hal_usart_available>
}
   b95a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b95ac:	bd08      	pop	{r3, pc}

000b95ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b95ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b95b0:	7c00      	ldrb	r0, [r0, #16]
   b95b2:	f7fe fe95 	bl	b82e0 <hal_usart_peek>
}
   b95b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95ba:	bd08      	pop	{r3, pc}

000b95bc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b95bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b95be:	7c00      	ldrb	r0, [r0, #16]
   b95c0:	f7fe fe86 	bl	b82d0 <hal_usart_read>
}
   b95c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95c8:	bd08      	pop	{r3, pc}

000b95ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b95ca:	7c00      	ldrb	r0, [r0, #16]
   b95cc:	f7fe be90 	b.w	b82f0 <hal_usart_flush>

000b95d0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b95d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95d2:	7c45      	ldrb	r5, [r0, #17]
{
   b95d4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95d6:	b12d      	cbz	r5, b95e4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b95d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b95da:	b003      	add	sp, #12
   b95dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b95e0:	f7fe be66 	b.w	b82b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95e4:	7c00      	ldrb	r0, [r0, #16]
   b95e6:	9101      	str	r1, [sp, #4]
   b95e8:	f7fe fe92 	bl	b8310 <hal_usart_available_data_for_write>
   b95ec:	2800      	cmp	r0, #0
   b95ee:	9901      	ldr	r1, [sp, #4]
   b95f0:	dcf2      	bgt.n	b95d8 <_ZN11USARTSerial5writeEh+0x8>
}
   b95f2:	4628      	mov	r0, r5
   b95f4:	b003      	add	sp, #12
   b95f6:	bd30      	pop	{r4, r5, pc}

000b95f8 <_ZN11USARTSerialD0Ev>:
   b95f8:	b510      	push	{r4, lr}
   b95fa:	2114      	movs	r1, #20
   b95fc:	4604      	mov	r4, r0
   b95fe:	f7fb fa9c 	bl	b4b3a <_ZdlPvj>
   b9602:	4620      	mov	r0, r4
   b9604:	bd10      	pop	{r4, pc}
	...

000b9608 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9608:	b510      	push	{r4, lr}
   b960a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b960e:	4604      	mov	r4, r0
   b9610:	4608      	mov	r0, r1
   b9612:	4611      	mov	r1, r2
   b9614:	2200      	movs	r2, #0
   b9616:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b961a:	4b04      	ldr	r3, [pc, #16]	; (b962c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b961c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b961e:	2301      	movs	r3, #1
  _serial = serial;
   b9620:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9622:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9624:	f7fe fe7c 	bl	b8320 <hal_usart_init_ex>
}
   b9628:	4620      	mov	r0, r4
   b962a:	bd10      	pop	{r4, pc}
   b962c:	000bd094 	.word	0x000bd094

000b9630 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9630:	7441      	strb	r1, [r0, #17]
}
   b9632:	4770      	bx	lr

000b9634 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9634:	4770      	bx	lr

000b9636 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9636:	4770      	bx	lr

000b9638 <_ZN9USBSerial4readEv>:
{
   b9638:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b963a:	2100      	movs	r1, #0
   b963c:	7c00      	ldrb	r0, [r0, #16]
   b963e:	f7fe fe8f 	bl	b8360 <HAL_USB_USART_Receive_Data>
}
   b9642:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9646:	bd08      	pop	{r3, pc}

000b9648 <_ZN9USBSerial4peekEv>:
{
   b9648:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b964a:	2101      	movs	r1, #1
   b964c:	7c00      	ldrb	r0, [r0, #16]
   b964e:	f7fe fe87 	bl	b8360 <HAL_USB_USART_Receive_Data>
}
   b9652:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9656:	bd08      	pop	{r3, pc}

000b9658 <_ZN9USBSerial17availableForWriteEv>:
{
   b9658:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b965a:	7c00      	ldrb	r0, [r0, #16]
   b965c:	f7fe fe78 	bl	b8350 <HAL_USB_USART_Available_Data_For_Write>
}
   b9660:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9664:	bd08      	pop	{r3, pc}

000b9666 <_ZN9USBSerial9availableEv>:
{
   b9666:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9668:	7c00      	ldrb	r0, [r0, #16]
   b966a:	f7fe fe69 	bl	b8340 <HAL_USB_USART_Available_Data>
}
   b966e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9672:	bd08      	pop	{r3, pc}

000b9674 <_ZN9USBSerial5writeEh>:
{
   b9674:	b513      	push	{r0, r1, r4, lr}
   b9676:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9678:	7c00      	ldrb	r0, [r0, #16]
{
   b967a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b967c:	f7fe fe68 	bl	b8350 <HAL_USB_USART_Available_Data_For_Write>
   b9680:	2800      	cmp	r0, #0
   b9682:	9901      	ldr	r1, [sp, #4]
   b9684:	dc01      	bgt.n	b968a <_ZN9USBSerial5writeEh+0x16>
   b9686:	7c60      	ldrb	r0, [r4, #17]
   b9688:	b120      	cbz	r0, b9694 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b968a:	7c20      	ldrb	r0, [r4, #16]
   b968c:	f7fe fe70 	bl	b8370 <HAL_USB_USART_Send_Data>
   b9690:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9694:	b002      	add	sp, #8
   b9696:	bd10      	pop	{r4, pc}

000b9698 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9698:	7c00      	ldrb	r0, [r0, #16]
   b969a:	f7fe be71 	b.w	b8380 <HAL_USB_USART_Flush_Data>

000b969e <_ZN9USBSerialD0Ev>:
   b969e:	b510      	push	{r4, lr}
   b96a0:	2114      	movs	r1, #20
   b96a2:	4604      	mov	r4, r0
   b96a4:	f7fb fa49 	bl	b4b3a <_ZdlPvj>
   b96a8:	4620      	mov	r0, r4
   b96aa:	bd10      	pop	{r4, pc}

000b96ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b96ac:	b510      	push	{r4, lr}
   b96ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b96b2:	4604      	mov	r4, r0
   b96b4:	4608      	mov	r0, r1
   b96b6:	2100      	movs	r1, #0
   b96b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b96bc:	4b04      	ldr	r3, [pc, #16]	; (b96d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b96be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b96c0:	2301      	movs	r3, #1
  _serial = serial;
   b96c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b96c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b96c6:	4611      	mov	r1, r2
   b96c8:	f7fe fe32 	bl	b8330 <HAL_USB_USART_Init>
}
   b96cc:	4620      	mov	r0, r4
   b96ce:	bd10      	pop	{r4, pc}
   b96d0:	000bd0c4 	.word	0x000bd0c4

000b96d4 <_Z19acquireSerialBufferv>:
{
   b96d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b96d6:	2214      	movs	r2, #20
{
   b96d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b96da:	2100      	movs	r1, #0
   b96dc:	f000 fb6d 	bl	b9dba <memset>
}
   b96e0:	4620      	mov	r0, r4
   b96e2:	bd10      	pop	{r4, pc}

000b96e4 <_Z16_fetch_usbserialv>:
{
   b96e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b96e6:	4c0f      	ldr	r4, [pc, #60]	; (b9724 <_Z16_fetch_usbserialv+0x40>)
{
   b96e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b96ea:	a803      	add	r0, sp, #12
   b96ec:	f7ff fff2 	bl	b96d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b96f0:	7821      	ldrb	r1, [r4, #0]
   b96f2:	f3bf 8f5b 	dmb	ish
   b96f6:	f011 0101 	ands.w	r1, r1, #1
   b96fa:	d10f      	bne.n	b971c <_Z16_fetch_usbserialv+0x38>
   b96fc:	4620      	mov	r0, r4
   b96fe:	9101      	str	r1, [sp, #4]
   b9700:	f7fb fa2a 	bl	b4b58 <__cxa_guard_acquire>
   b9704:	9901      	ldr	r1, [sp, #4]
   b9706:	b148      	cbz	r0, b971c <_Z16_fetch_usbserialv+0x38>
   b9708:	aa03      	add	r2, sp, #12
   b970a:	4807      	ldr	r0, [pc, #28]	; (b9728 <_Z16_fetch_usbserialv+0x44>)
   b970c:	f7ff ffce 	bl	b96ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9710:	4620      	mov	r0, r4
   b9712:	f7fb fa26 	bl	b4b62 <__cxa_guard_release>
   b9716:	4805      	ldr	r0, [pc, #20]	; (b972c <_Z16_fetch_usbserialv+0x48>)
   b9718:	f000 fb30 	bl	b9d7c <atexit>
	return _usbserial;
}
   b971c:	4802      	ldr	r0, [pc, #8]	; (b9728 <_Z16_fetch_usbserialv+0x44>)
   b971e:	b008      	add	sp, #32
   b9720:	bd10      	pop	{r4, pc}
   b9722:	bf00      	nop
   b9724:	2003e700 	.word	0x2003e700
   b9728:	2003e704 	.word	0x2003e704
   b972c:	000b9635 	.word	0x000b9635

000b9730 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9730:	2200      	movs	r2, #0
   b9732:	6840      	ldr	r0, [r0, #4]
   b9734:	4611      	mov	r1, r2
   b9736:	f7fe be97 	b.w	b8468 <network_ready>

000b973a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b973a:	2200      	movs	r2, #0
   b973c:	6840      	ldr	r0, [r0, #4]
   b973e:	4611      	mov	r1, r2
   b9740:	f7fe beb2 	b.w	b84a8 <network_listening>

000b9744 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9744:	2200      	movs	r2, #0
   b9746:	6840      	ldr	r0, [r0, #4]
   b9748:	4611      	mov	r1, r2
   b974a:	f7fe bebd 	b.w	b84c8 <network_get_listen_timeout>

000b974e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b974e:	6840      	ldr	r0, [r0, #4]
   b9750:	2200      	movs	r2, #0
   b9752:	f7fe beb1 	b.w	b84b8 <network_set_listen_timeout>

000b9756 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9756:	6840      	ldr	r0, [r0, #4]
   b9758:	2200      	movs	r2, #0
   b975a:	f081 0101 	eor.w	r1, r1, #1
   b975e:	f7fe be9b 	b.w	b8498 <network_listen>

000b9762 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9762:	2300      	movs	r3, #0
   b9764:	6840      	ldr	r0, [r0, #4]
   b9766:	461a      	mov	r2, r3
   b9768:	4619      	mov	r1, r3
   b976a:	f7fe be8d 	b.w	b8488 <network_off>

000b976e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b976e:	2300      	movs	r3, #0
   b9770:	6840      	ldr	r0, [r0, #4]
   b9772:	461a      	mov	r2, r3
   b9774:	4619      	mov	r1, r3
   b9776:	f7fe be7f 	b.w	b8478 <network_on>

000b977a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b977a:	2200      	movs	r2, #0
   b977c:	6840      	ldr	r0, [r0, #4]
   b977e:	4611      	mov	r1, r2
   b9780:	f7fe be62 	b.w	b8448 <network_connecting>

000b9784 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9784:	6840      	ldr	r0, [r0, #4]
   b9786:	2200      	movs	r2, #0
   b9788:	2102      	movs	r1, #2
   b978a:	f7fe be65 	b.w	b8458 <network_disconnect>

000b978e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b978e:	2300      	movs	r3, #0
   b9790:	6840      	ldr	r0, [r0, #4]
   b9792:	461a      	mov	r2, r3
   b9794:	f7fe be50 	b.w	b8438 <network_connect>

000b9798 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9798:	4b02      	ldr	r3, [pc, #8]	; (b97a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b979a:	2204      	movs	r2, #4
   b979c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b979e:	4a02      	ldr	r2, [pc, #8]	; (b97a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b97a0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b97a2:	4770      	bx	lr
   b97a4:	2003e718 	.word	0x2003e718
   b97a8:	000bd0f4 	.word	0x000bd0f4

000b97ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b97ac:	4b01      	ldr	r3, [pc, #4]	; (b97b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b97ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b97b0:	4770      	bx	lr
   b97b2:	bf00      	nop
   b97b4:	2003e318 	.word	0x2003e318

000b97b8 <serialEventRun>:
{
   b97b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b97ba:	4b0b      	ldr	r3, [pc, #44]	; (b97e8 <serialEventRun+0x30>)
   b97bc:	b143      	cbz	r3, b97d0 <serialEventRun+0x18>
   b97be:	f7ff ff91 	bl	b96e4 <_Z16_fetch_usbserialv>
   b97c2:	6803      	ldr	r3, [r0, #0]
   b97c4:	691b      	ldr	r3, [r3, #16]
   b97c6:	4798      	blx	r3
   b97c8:	2800      	cmp	r0, #0
   b97ca:	dd01      	ble.n	b97d0 <serialEventRun+0x18>
        serialEvent();
   b97cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b97d0:	4b06      	ldr	r3, [pc, #24]	; (b97ec <serialEventRun+0x34>)
   b97d2:	b143      	cbz	r3, b97e6 <serialEventRun+0x2e>
   b97d4:	f000 f99a 	bl	b9b0c <_Z22__fetch_global_Serial1v>
   b97d8:	6803      	ldr	r3, [r0, #0]
   b97da:	691b      	ldr	r3, [r3, #16]
   b97dc:	4798      	blx	r3
   b97de:	2800      	cmp	r0, #0
   b97e0:	dd01      	ble.n	b97e6 <serialEventRun+0x2e>
        serialEvent1();
   b97e2:	f3af 8000 	nop.w
}
   b97e6:	bd08      	pop	{r3, pc}
	...

000b97f0 <_post_loop>:
{
   b97f0:	b508      	push	{r3, lr}
	serialEventRun();
   b97f2:	f7ff ffe1 	bl	b97b8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b97f6:	f7fe fc0b 	bl	b8010 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b97fa:	4b01      	ldr	r3, [pc, #4]	; (b9800 <_post_loop+0x10>)
   b97fc:	6018      	str	r0, [r3, #0]
}
   b97fe:	bd08      	pop	{r3, pc}
   b9800:	2003e728 	.word	0x2003e728

000b9804 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9804:	4805      	ldr	r0, [pc, #20]	; (b981c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9806:	4a06      	ldr	r2, [pc, #24]	; (b9820 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9808:	4906      	ldr	r1, [pc, #24]	; (b9824 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b980a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b980c:	1a12      	subs	r2, r2, r0
   b980e:	f000 fac6 	bl	b9d9e <memcpy>
    __backup_sram_signature = signature;
   b9812:	4b05      	ldr	r3, [pc, #20]	; (b9828 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9814:	4a05      	ldr	r2, [pc, #20]	; (b982c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9816:	601a      	str	r2, [r3, #0]
}
   b9818:	bd08      	pop	{r3, pc}
   b981a:	bf00      	nop
   b981c:	2003f400 	.word	0x2003f400
   b9820:	2003f404 	.word	0x2003f404
   b9824:	000bd804 	.word	0x000bd804
   b9828:	2003f400 	.word	0x2003f400
   b982c:	9a271c1e 	.word	0x9a271c1e

000b9830 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9830:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9832:	2300      	movs	r3, #0
   b9834:	9300      	str	r3, [sp, #0]
   b9836:	461a      	mov	r2, r3
   b9838:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b983c:	f7fe fdda 	bl	b83f4 <system_ctrl_set_result>
}
   b9840:	b003      	add	sp, #12
   b9842:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9848 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9848:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b984a:	8843      	ldrh	r3, [r0, #2]
   b984c:	2b0a      	cmp	r3, #10
   b984e:	d008      	beq.n	b9862 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9850:	2b50      	cmp	r3, #80	; 0x50
   b9852:	d10b      	bne.n	b986c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9854:	4b09      	ldr	r3, [pc, #36]	; (b987c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9856:	681b      	ldr	r3, [r3, #0]
   b9858:	b14b      	cbz	r3, b986e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b985a:	b003      	add	sp, #12
   b985c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9860:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9862:	f7ff ffe5 	bl	b9830 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9866:	b003      	add	sp, #12
   b9868:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b986c:	2300      	movs	r3, #0
   b986e:	9300      	str	r3, [sp, #0]
   b9870:	461a      	mov	r2, r3
   b9872:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9876:	f7fe fdbd 	bl	b83f4 <system_ctrl_set_result>
}
   b987a:	e7f4      	b.n	b9866 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b987c:	2003e724 	.word	0x2003e724

000b9880 <module_user_init_hook>:
{
   b9880:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9882:	4812      	ldr	r0, [pc, #72]	; (b98cc <module_user_init_hook+0x4c>)
   b9884:	2100      	movs	r1, #0
   b9886:	f7fe fe77 	bl	b8578 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b988a:	4b11      	ldr	r3, [pc, #68]	; (b98d0 <module_user_init_hook+0x50>)
   b988c:	681a      	ldr	r2, [r3, #0]
   b988e:	4b11      	ldr	r3, [pc, #68]	; (b98d4 <module_user_init_hook+0x54>)
   b9890:	429a      	cmp	r2, r3
   b9892:	4b11      	ldr	r3, [pc, #68]	; (b98d8 <module_user_init_hook+0x58>)
   b9894:	bf0c      	ite	eq
   b9896:	2201      	moveq	r2, #1
   b9898:	2200      	movne	r2, #0
   b989a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b989c:	d001      	beq.n	b98a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b989e:	f7ff ffb1 	bl	b9804 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b98a2:	f7fe fba5 	bl	b7ff0 <HAL_RNG_GetRandomNumber>
   b98a6:	4604      	mov	r4, r0
    srand(seed);
   b98a8:	f000 fa90 	bl	b9dcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b98ac:	4b0b      	ldr	r3, [pc, #44]	; (b98dc <module_user_init_hook+0x5c>)
   b98ae:	b113      	cbz	r3, b98b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b98b0:	4620      	mov	r0, r4
   b98b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b98b6:	2100      	movs	r1, #0
   b98b8:	4808      	ldr	r0, [pc, #32]	; (b98dc <module_user_init_hook+0x5c>)
   b98ba:	f7fe fdb5 	bl	b8428 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b98be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b98c2:	4807      	ldr	r0, [pc, #28]	; (b98e0 <module_user_init_hook+0x60>)
   b98c4:	2100      	movs	r1, #0
   b98c6:	f7fe bd8b 	b.w	b83e0 <system_ctrl_set_app_request_handler>
   b98ca:	bf00      	nop
   b98cc:	000b97ad 	.word	0x000b97ad
   b98d0:	2003f400 	.word	0x2003f400
   b98d4:	9a271c1e 	.word	0x9a271c1e
   b98d8:	2003e720 	.word	0x2003e720
   b98dc:	00000000 	.word	0x00000000
   b98e0:	000b9849 	.word	0x000b9849

000b98e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b98e4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b98e6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b98e8:	d902      	bls.n	b98f0 <pinAvailable+0xc>
    return false;
   b98ea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b98ec:	b002      	add	sp, #8
   b98ee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b98f0:	f1a0 030b 	sub.w	r3, r0, #11
   b98f4:	2b02      	cmp	r3, #2
   b98f6:	d81a      	bhi.n	b992e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b98f8:	4c17      	ldr	r4, [pc, #92]	; (b9958 <pinAvailable+0x74>)
   b98fa:	7821      	ldrb	r1, [r4, #0]
   b98fc:	f3bf 8f5b 	dmb	ish
   b9900:	f011 0101 	ands.w	r1, r1, #1
   b9904:	d10b      	bne.n	b991e <pinAvailable+0x3a>
   b9906:	4620      	mov	r0, r4
   b9908:	9101      	str	r1, [sp, #4]
   b990a:	f7fb f925 	bl	b4b58 <__cxa_guard_acquire>
   b990e:	9901      	ldr	r1, [sp, #4]
   b9910:	b128      	cbz	r0, b991e <pinAvailable+0x3a>
   b9912:	4812      	ldr	r0, [pc, #72]	; (b995c <pinAvailable+0x78>)
   b9914:	f7ff f9d4 	bl	b8cc0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9918:	4620      	mov	r0, r4
   b991a:	f7fb f922 	bl	b4b62 <__cxa_guard_release>
   b991e:	4b0f      	ldr	r3, [pc, #60]	; (b995c <pinAvailable+0x78>)
   b9920:	7818      	ldrb	r0, [r3, #0]
   b9922:	f7fe fc9d 	bl	b8260 <hal_spi_is_enabled>
   b9926:	2800      	cmp	r0, #0
   b9928:	d1df      	bne.n	b98ea <pinAvailable+0x6>
  return true; // 'pin' is available
   b992a:	2001      	movs	r0, #1
   b992c:	e7de      	b.n	b98ec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b992e:	2801      	cmp	r0, #1
   b9930:	d809      	bhi.n	b9946 <pinAvailable+0x62>
   b9932:	f000 f8ab 	bl	b9a8c <_Z19__fetch_global_Wirev>
   b9936:	2100      	movs	r1, #0
   b9938:	7c00      	ldrb	r0, [r0, #16]
   b993a:	f7fe fbf9 	bl	b8130 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b993e:	f080 0001 	eor.w	r0, r0, #1
   b9942:	b2c0      	uxtb	r0, r0
   b9944:	e7d2      	b.n	b98ec <pinAvailable+0x8>
   b9946:	3809      	subs	r0, #9
   b9948:	2801      	cmp	r0, #1
   b994a:	d8ee      	bhi.n	b992a <pinAvailable+0x46>
   b994c:	f000 f8de 	bl	b9b0c <_Z22__fetch_global_Serial1v>
   b9950:	7c00      	ldrb	r0, [r0, #16]
   b9952:	f7fe fcd5 	bl	b8300 <hal_usart_is_enabled>
   b9956:	e7f2      	b.n	b993e <pinAvailable+0x5a>
   b9958:	2003e6b8 	.word	0x2003e6b8
   b995c:	2003e6bc 	.word	0x2003e6bc

000b9960 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9960:	2823      	cmp	r0, #35	; 0x23
{
   b9962:	b538      	push	{r3, r4, r5, lr}
   b9964:	4604      	mov	r4, r0
   b9966:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9968:	d80a      	bhi.n	b9980 <pinMode+0x20>
   b996a:	29ff      	cmp	r1, #255	; 0xff
   b996c:	d008      	beq.n	b9980 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b996e:	f7ff ffb9 	bl	b98e4 <pinAvailable>
   b9972:	b128      	cbz	r0, b9980 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b9974:	4629      	mov	r1, r5
   b9976:	4620      	mov	r0, r4
}
   b9978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b997c:	f7fe bb58 	b.w	b8030 <hal_gpio_mode>
}
   b9980:	bd38      	pop	{r3, r4, r5, pc}

000b9982 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b9982:	b538      	push	{r3, r4, r5, lr}
   b9984:	4604      	mov	r4, r0
   b9986:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b9988:	f7fe fb5a 	bl	b8040 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b998c:	28ff      	cmp	r0, #255	; 0xff
   b998e:	d010      	beq.n	b99b2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9990:	2806      	cmp	r0, #6
   b9992:	d804      	bhi.n	b999e <digitalWrite+0x1c>
   b9994:	234d      	movs	r3, #77	; 0x4d
   b9996:	fa23 f000 	lsr.w	r0, r3, r0
   b999a:	07c3      	lsls	r3, r0, #31
   b999c:	d409      	bmi.n	b99b2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b999e:	4620      	mov	r0, r4
   b99a0:	f7ff ffa0 	bl	b98e4 <pinAvailable>
   b99a4:	b128      	cbz	r0, b99b2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b99a6:	4629      	mov	r1, r5
   b99a8:	4620      	mov	r0, r4
}
   b99aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b99ae:	f7fe bb4f 	b.w	b8050 <hal_gpio_write>
}
   b99b2:	bd38      	pop	{r3, r4, r5, pc}

000b99b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b99b4:	b510      	push	{r4, lr}
   b99b6:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b99b8:	f7fe fb42 	bl	b8040 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b99bc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b99be:	b2db      	uxtb	r3, r3
   b99c0:	2b01      	cmp	r3, #1
   b99c2:	d908      	bls.n	b99d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b99c4:	4620      	mov	r0, r4
   b99c6:	f7ff ff8d 	bl	b98e4 <pinAvailable>
   b99ca:	b120      	cbz	r0, b99d6 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b99cc:	4620      	mov	r0, r4
}
   b99ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b99d2:	f7fe bb45 	b.w	b8060 <hal_gpio_read>
}
   b99d6:	2000      	movs	r0, #0
   b99d8:	bd10      	pop	{r4, pc}

000b99da <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b99da:	280d      	cmp	r0, #13
{
   b99dc:	b510      	push	{r4, lr}
   b99de:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b99e0:	bf9c      	itt	ls
   b99e2:	340e      	addls	r4, #14
   b99e4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b99e6:	4620      	mov	r0, r4
   b99e8:	f7ff ff7c 	bl	b98e4 <pinAvailable>
   b99ec:	b150      	cbz	r0, b9a04 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b99ee:	2103      	movs	r1, #3
   b99f0:	4620      	mov	r0, r4
   b99f2:	f7fe fb15 	bl	b8020 <hal_pin_validate_function>
   b99f6:	2803      	cmp	r0, #3
   b99f8:	d104      	bne.n	b9a04 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b99fa:	4620      	mov	r0, r4
}
   b99fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9a00:	f7fe bb3e 	b.w	b8080 <hal_adc_read>
}
   b9a04:	2000      	movs	r0, #0
   b9a06:	bd10      	pop	{r4, pc}

000b9a08 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b9a08:	b538      	push	{r3, r4, r5, lr}
   b9a0a:	4604      	mov	r4, r0
   b9a0c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b9a0e:	f7ff ff69 	bl	b98e4 <pinAvailable>
   b9a12:	b1f0      	cbz	r0, b9a52 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b9a14:	2104      	movs	r1, #4
   b9a16:	4620      	mov	r0, r4
   b9a18:	f7fe fb02 	bl	b8020 <hal_pin_validate_function>
   b9a1c:	2804      	cmp	r0, #4
   b9a1e:	d105      	bne.n	b9a2c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b9a20:	b2a9      	uxth	r1, r5
   b9a22:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b9a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b9a28:	f7fe bb22 	b.w	b8070 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b9a2c:	2102      	movs	r1, #2
   b9a2e:	4620      	mov	r0, r4
   b9a30:	f7fe faf6 	bl	b8020 <hal_pin_validate_function>
   b9a34:	2802      	cmp	r0, #2
   b9a36:	d10c      	bne.n	b9a52 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b9a38:	4620      	mov	r0, r4
   b9a3a:	f7fe fb01 	bl	b8040 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b9a3e:	2801      	cmp	r0, #1
   b9a40:	d001      	beq.n	b9a46 <_Z11analogWritetm+0x3e>
   b9a42:	2804      	cmp	r0, #4
   b9a44:	d105      	bne.n	b9a52 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b9a46:	4629      	mov	r1, r5
   b9a48:	4620      	mov	r0, r4
}
   b9a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b9a4e:	f7fe bb1f 	b.w	b8090 <hal_pwm_write_ext>
}
   b9a52:	bd38      	pop	{r3, r4, r5, pc}

000b9a54 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a54:	4770      	bx	lr
	...

000b9a58 <_Z17acquireWireBufferv>:
{
   b9a58:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9a5a:	4b0a      	ldr	r3, [pc, #40]	; (b9a84 <_Z17acquireWireBufferv+0x2c>)
   b9a5c:	6003      	str	r3, [r0, #0]
   b9a5e:	2301      	movs	r3, #1
{
   b9a60:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9a62:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9a64:	4908      	ldr	r1, [pc, #32]	; (b9a88 <_Z17acquireWireBufferv+0x30>)
   b9a66:	2020      	movs	r0, #32
   b9a68:	f000 f874 	bl	b9b54 <_ZnajRKSt9nothrow_t>
	};
   b9a6c:	2520      	movs	r5, #32
   b9a6e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9a70:	4905      	ldr	r1, [pc, #20]	; (b9a88 <_Z17acquireWireBufferv+0x30>)
	};
   b9a72:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9a74:	4628      	mov	r0, r5
   b9a76:	f000 f86d 	bl	b9b54 <_ZnajRKSt9nothrow_t>
	};
   b9a7a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9a7e:	4620      	mov	r0, r4
   b9a80:	bd38      	pop	{r3, r4, r5, pc}
   b9a82:	bf00      	nop
   b9a84:	00010018 	.word	0x00010018
   b9a88:	000bd128 	.word	0x000bd128

000b9a8c <_Z19__fetch_global_Wirev>:
{
   b9a8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a8e:	4d0e      	ldr	r5, [pc, #56]	; (b9ac8 <_Z19__fetch_global_Wirev+0x3c>)
   b9a90:	7829      	ldrb	r1, [r5, #0]
   b9a92:	f3bf 8f5b 	dmb	ish
   b9a96:	f011 0401 	ands.w	r4, r1, #1
{
   b9a9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a9c:	d111      	bne.n	b9ac2 <_Z19__fetch_global_Wirev+0x36>
   b9a9e:	4628      	mov	r0, r5
   b9aa0:	f7fb f85a 	bl	b4b58 <__cxa_guard_acquire>
   b9aa4:	b168      	cbz	r0, b9ac2 <_Z19__fetch_global_Wirev+0x36>
   b9aa6:	4668      	mov	r0, sp
   b9aa8:	f7ff ffd6 	bl	b9a58 <_Z17acquireWireBufferv>
   b9aac:	466a      	mov	r2, sp
   b9aae:	4621      	mov	r1, r4
   b9ab0:	4806      	ldr	r0, [pc, #24]	; (b9acc <_Z19__fetch_global_Wirev+0x40>)
   b9ab2:	f7fe fddf 	bl	b8674 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9ab6:	4628      	mov	r0, r5
   b9ab8:	f7fb f853 	bl	b4b62 <__cxa_guard_release>
   b9abc:	4804      	ldr	r0, [pc, #16]	; (b9ad0 <_Z19__fetch_global_Wirev+0x44>)
   b9abe:	f000 f95d 	bl	b9d7c <atexit>
	return wire;
}
   b9ac2:	4802      	ldr	r0, [pc, #8]	; (b9acc <_Z19__fetch_global_Wirev+0x40>)
   b9ac4:	b007      	add	sp, #28
   b9ac6:	bd30      	pop	{r4, r5, pc}
   b9ac8:	2003e72c 	.word	0x2003e72c
   b9acc:	2003e730 	.word	0x2003e730
   b9ad0:	000b9a55 	.word	0x000b9a55

000b9ad4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9ad4:	4770      	bx	lr
	...

000b9ad8 <_Z20acquireSerial1Bufferv>:
{
   b9ad8:	b538      	push	{r3, r4, r5, lr}
   b9ada:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9adc:	2514      	movs	r5, #20
   b9ade:	462a      	mov	r2, r5
   b9ae0:	2100      	movs	r1, #0
   b9ae2:	f000 f96a 	bl	b9dba <memset>
   b9ae6:	8025      	strh	r5, [r4, #0]
   b9ae8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aea:	4907      	ldr	r1, [pc, #28]	; (b9b08 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9aec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9af0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9af2:	f000 f82f 	bl	b9b54 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9af6:	4904      	ldr	r1, [pc, #16]	; (b9b08 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9af8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9afa:	4628      	mov	r0, r5
   b9afc:	f000 f82a 	bl	b9b54 <_ZnajRKSt9nothrow_t>
    };
   b9b00:	60e0      	str	r0, [r4, #12]
}
   b9b02:	4620      	mov	r0, r4
   b9b04:	bd38      	pop	{r3, r4, r5, pc}
   b9b06:	bf00      	nop
   b9b08:	000bd128 	.word	0x000bd128

000b9b0c <_Z22__fetch_global_Serial1v>:
{
   b9b0c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9b0e:	4d0e      	ldr	r5, [pc, #56]	; (b9b48 <_Z22__fetch_global_Serial1v+0x3c>)
   b9b10:	7829      	ldrb	r1, [r5, #0]
   b9b12:	f3bf 8f5b 	dmb	ish
   b9b16:	f011 0401 	ands.w	r4, r1, #1
{
   b9b1a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9b1c:	d111      	bne.n	b9b42 <_Z22__fetch_global_Serial1v+0x36>
   b9b1e:	4628      	mov	r0, r5
   b9b20:	f7fb f81a 	bl	b4b58 <__cxa_guard_acquire>
   b9b24:	b168      	cbz	r0, b9b42 <_Z22__fetch_global_Serial1v+0x36>
   b9b26:	a801      	add	r0, sp, #4
   b9b28:	f7ff ffd6 	bl	b9ad8 <_Z20acquireSerial1Bufferv>
   b9b2c:	aa01      	add	r2, sp, #4
   b9b2e:	4621      	mov	r1, r4
   b9b30:	4806      	ldr	r0, [pc, #24]	; (b9b4c <_Z22__fetch_global_Serial1v+0x40>)
   b9b32:	f7ff fd69 	bl	b9608 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9b36:	4628      	mov	r0, r5
   b9b38:	f7fb f813 	bl	b4b62 <__cxa_guard_release>
   b9b3c:	4804      	ldr	r0, [pc, #16]	; (b9b50 <_Z22__fetch_global_Serial1v+0x44>)
   b9b3e:	f000 f91d 	bl	b9d7c <atexit>
    return serial1;
}
   b9b42:	4802      	ldr	r0, [pc, #8]	; (b9b4c <_Z22__fetch_global_Serial1v+0x40>)
   b9b44:	b007      	add	sp, #28
   b9b46:	bd30      	pop	{r4, r5, pc}
   b9b48:	2003e744 	.word	0x2003e744
   b9b4c:	2003e748 	.word	0x2003e748
   b9b50:	000b9ad5 	.word	0x000b9ad5

000b9b54 <_ZnajRKSt9nothrow_t>:
   b9b54:	f7fa bfed 	b.w	b4b32 <_Znaj>

000b9b58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9b58:	4901      	ldr	r1, [pc, #4]	; (b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9b5a:	f000 b8f9 	b.w	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9b5e:	bf00      	nop
   b9b60:	000bd144 	.word	0x000bd144

000b9b64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9b64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9b66:	2400      	movs	r4, #0
   b9b68:	2310      	movs	r3, #16
   b9b6a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9b6e:	6803      	ldr	r3, [r0, #0]
   b9b70:	4615      	mov	r5, r2
   b9b72:	699e      	ldr	r6, [r3, #24]
   b9b74:	6812      	ldr	r2, [r2, #0]
   b9b76:	466b      	mov	r3, sp
   b9b78:	e9cd 4400 	strd	r4, r4, [sp]
   b9b7c:	47b0      	blx	r6
   b9b7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9b82:	f003 0306 	and.w	r3, r3, #6
   b9b86:	2b06      	cmp	r3, #6
   b9b88:	bf03      	ittte	eq
   b9b8a:	9b00      	ldreq	r3, [sp, #0]
   b9b8c:	602b      	streq	r3, [r5, #0]
   b9b8e:	2001      	moveq	r0, #1
   b9b90:	4620      	movne	r0, r4
   b9b92:	b004      	add	sp, #16
   b9b94:	bd70      	pop	{r4, r5, r6, pc}

000b9b96 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9b96:	9800      	ldr	r0, [sp, #0]
   b9b98:	4290      	cmp	r0, r2
   b9b9a:	bf14      	ite	ne
   b9b9c:	2001      	movne	r0, #1
   b9b9e:	2006      	moveq	r0, #6
   b9ba0:	4770      	bx	lr
	...

000b9ba4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9ba4:	b510      	push	{r4, lr}
   b9ba6:	4b03      	ldr	r3, [pc, #12]	; (b9bb4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9ba8:	6003      	str	r3, [r0, #0]
   b9baa:	4604      	mov	r4, r0
   b9bac:	f000 f8cd 	bl	b9d4a <_ZNSt9type_infoD1Ev>
   b9bb0:	4620      	mov	r0, r4
   b9bb2:	bd10      	pop	{r4, pc}
   b9bb4:	000bd184 	.word	0x000bd184

000b9bb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9bb8:	b510      	push	{r4, lr}
   b9bba:	4604      	mov	r4, r0
   b9bbc:	f7ff fff2 	bl	b9ba4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9bc0:	4620      	mov	r0, r4
   b9bc2:	2108      	movs	r1, #8
   b9bc4:	f7fa ffb9 	bl	b4b3a <_ZdlPvj>
   b9bc8:	4620      	mov	r0, r4
   b9bca:	bd10      	pop	{r4, pc}

000b9bcc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bd0:	461f      	mov	r7, r3
   b9bd2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9bd6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9bda:	4598      	cmp	r8, r3
   b9bdc:	4606      	mov	r6, r0
   b9bde:	4615      	mov	r5, r2
   b9be0:	d107      	bne.n	b9bf2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9be2:	9907      	ldr	r1, [sp, #28]
   b9be4:	f000 f8b4 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9be8:	b118      	cbz	r0, b9bf2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9bea:	7165      	strb	r5, [r4, #5]
   b9bec:	2000      	movs	r0, #0
   b9bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9bf2:	4639      	mov	r1, r7
   b9bf4:	4630      	mov	r0, r6
   b9bf6:	f000 f8ab 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9bfa:	2800      	cmp	r0, #0
   b9bfc:	d0f6      	beq.n	b9bec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9bfe:	2301      	movs	r3, #1
   b9c00:	f8c4 8000 	str.w	r8, [r4]
   b9c04:	7125      	strb	r5, [r4, #4]
   b9c06:	71a3      	strb	r3, [r4, #6]
   b9c08:	e7f0      	b.n	b9bec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9c0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9c0a:	b538      	push	{r3, r4, r5, lr}
   b9c0c:	4615      	mov	r5, r2
   b9c0e:	461c      	mov	r4, r3
   b9c10:	f000 f89e 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9c14:	b120      	cbz	r0, b9c20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9c16:	2308      	movs	r3, #8
   b9c18:	60e3      	str	r3, [r4, #12]
   b9c1a:	2306      	movs	r3, #6
   b9c1c:	6025      	str	r5, [r4, #0]
   b9c1e:	7123      	strb	r3, [r4, #4]
   b9c20:	bd38      	pop	{r3, r4, r5, pc}

000b9c22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c24:	4605      	mov	r5, r0
   b9c26:	460c      	mov	r4, r1
   b9c28:	9201      	str	r2, [sp, #4]
   b9c2a:	461e      	mov	r6, r3
   b9c2c:	f000 f890 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9c30:	b950      	cbnz	r0, b9c48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9c32:	2e03      	cmp	r6, #3
   b9c34:	d808      	bhi.n	b9c48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9c36:	6823      	ldr	r3, [r4, #0]
   b9c38:	9a01      	ldr	r2, [sp, #4]
   b9c3a:	695b      	ldr	r3, [r3, #20]
   b9c3c:	4629      	mov	r1, r5
   b9c3e:	4620      	mov	r0, r4
   b9c40:	b002      	add	sp, #8
   b9c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9c46:	4718      	bx	r3
   b9c48:	b002      	add	sp, #8
   b9c4a:	bd70      	pop	{r4, r5, r6, pc}

000b9c4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9c4c:	b510      	push	{r4, lr}
   b9c4e:	4b03      	ldr	r3, [pc, #12]	; (b9c5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9c50:	6003      	str	r3, [r0, #0]
   b9c52:	4604      	mov	r4, r0
   b9c54:	f7ff ffa6 	bl	b9ba4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9c58:	4620      	mov	r0, r4
   b9c5a:	bd10      	pop	{r4, pc}
   b9c5c:	000bd1e4 	.word	0x000bd1e4

000b9c60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9c60:	b510      	push	{r4, lr}
   b9c62:	4604      	mov	r4, r0
   b9c64:	f7ff fff2 	bl	b9c4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9c68:	4620      	mov	r0, r4
   b9c6a:	210c      	movs	r1, #12
   b9c6c:	f7fa ff65 	bl	b4b3a <_ZdlPvj>
   b9c70:	4620      	mov	r0, r4
   b9c72:	bd10      	pop	{r4, pc}

000b9c74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9c76:	9f08      	ldr	r7, [sp, #32]
   b9c78:	4297      	cmp	r7, r2
   b9c7a:	4605      	mov	r5, r0
   b9c7c:	460e      	mov	r6, r1
   b9c7e:	4614      	mov	r4, r2
   b9c80:	d00a      	beq.n	b9c98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9c82:	68a8      	ldr	r0, [r5, #8]
   b9c84:	6802      	ldr	r2, [r0, #0]
   b9c86:	9708      	str	r7, [sp, #32]
   b9c88:	6a15      	ldr	r5, [r2, #32]
   b9c8a:	4631      	mov	r1, r6
   b9c8c:	4622      	mov	r2, r4
   b9c8e:	46ac      	mov	ip, r5
   b9c90:	b003      	add	sp, #12
   b9c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9c96:	4760      	bx	ip
   b9c98:	4619      	mov	r1, r3
   b9c9a:	9301      	str	r3, [sp, #4]
   b9c9c:	f000 f858 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9ca0:	9b01      	ldr	r3, [sp, #4]
   b9ca2:	2800      	cmp	r0, #0
   b9ca4:	d0ed      	beq.n	b9c82 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9ca6:	2006      	movs	r0, #6
   b9ca8:	b003      	add	sp, #12
   b9caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9cac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9cac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9cb0:	460d      	mov	r5, r1
   b9cb2:	4619      	mov	r1, r3
   b9cb4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9cb8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9cbc:	4681      	mov	r9, r0
   b9cbe:	4617      	mov	r7, r2
   b9cc0:	4698      	mov	r8, r3
   b9cc2:	f000 f845 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9cc6:	b190      	cbz	r0, b9cee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9cc8:	2d00      	cmp	r5, #0
   b9cca:	6034      	str	r4, [r6, #0]
   b9ccc:	7137      	strb	r7, [r6, #4]
   b9cce:	db09      	blt.n	b9ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9cd0:	1961      	adds	r1, r4, r5
   b9cd2:	458a      	cmp	sl, r1
   b9cd4:	bf0c      	ite	eq
   b9cd6:	2106      	moveq	r1, #6
   b9cd8:	2101      	movne	r1, #1
   b9cda:	71b1      	strb	r1, [r6, #6]
   b9cdc:	2000      	movs	r0, #0
   b9cde:	b001      	add	sp, #4
   b9ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ce4:	3502      	adds	r5, #2
   b9ce6:	d1f9      	bne.n	b9cdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9ce8:	2301      	movs	r3, #1
   b9cea:	71b3      	strb	r3, [r6, #6]
   b9cec:	e7f6      	b.n	b9cdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9cee:	4554      	cmp	r4, sl
   b9cf0:	d106      	bne.n	b9d00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9cf2:	4659      	mov	r1, fp
   b9cf4:	4648      	mov	r0, r9
   b9cf6:	f000 f82b 	bl	b9d50 <_ZNKSt9type_infoeqERKS_>
   b9cfa:	b108      	cbz	r0, b9d00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9cfc:	7177      	strb	r7, [r6, #5]
   b9cfe:	e7ed      	b.n	b9cdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9d00:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9d04:	6803      	ldr	r3, [r0, #0]
   b9d06:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9d0a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9d0e:	69dc      	ldr	r4, [r3, #28]
   b9d10:	463a      	mov	r2, r7
   b9d12:	4643      	mov	r3, r8
   b9d14:	4629      	mov	r1, r5
   b9d16:	46a4      	mov	ip, r4
   b9d18:	b001      	add	sp, #4
   b9d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d1e:	4760      	bx	ip

000b9d20 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d24:	4607      	mov	r7, r0
   b9d26:	460c      	mov	r4, r1
   b9d28:	4615      	mov	r5, r2
   b9d2a:	461e      	mov	r6, r3
   b9d2c:	f7ff ff6d 	bl	b9c0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9d30:	b948      	cbnz	r0, b9d46 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9d32:	68b8      	ldr	r0, [r7, #8]
   b9d34:	6803      	ldr	r3, [r0, #0]
   b9d36:	699f      	ldr	r7, [r3, #24]
   b9d38:	462a      	mov	r2, r5
   b9d3a:	4633      	mov	r3, r6
   b9d3c:	4621      	mov	r1, r4
   b9d3e:	46bc      	mov	ip, r7
   b9d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9d44:	4760      	bx	ip
   b9d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9d4a <_ZNSt9type_infoD1Ev>:
   b9d4a:	4770      	bx	lr

000b9d4c <_ZNKSt9type_info14__is_pointer_pEv>:
   b9d4c:	2000      	movs	r0, #0
   b9d4e:	4770      	bx	lr

000b9d50 <_ZNKSt9type_infoeqERKS_>:
   b9d50:	4281      	cmp	r1, r0
   b9d52:	b508      	push	{r3, lr}
   b9d54:	d00e      	beq.n	b9d74 <_ZNKSt9type_infoeqERKS_+0x24>
   b9d56:	6840      	ldr	r0, [r0, #4]
   b9d58:	7803      	ldrb	r3, [r0, #0]
   b9d5a:	2b2a      	cmp	r3, #42	; 0x2a
   b9d5c:	d00c      	beq.n	b9d78 <_ZNKSt9type_infoeqERKS_+0x28>
   b9d5e:	6849      	ldr	r1, [r1, #4]
   b9d60:	780b      	ldrb	r3, [r1, #0]
   b9d62:	2b2a      	cmp	r3, #42	; 0x2a
   b9d64:	bf08      	it	eq
   b9d66:	3101      	addeq	r1, #1
   b9d68:	f7fa fe7c 	bl	b4a64 <strcmp>
   b9d6c:	fab0 f080 	clz	r0, r0
   b9d70:	0940      	lsrs	r0, r0, #5
   b9d72:	bd08      	pop	{r3, pc}
   b9d74:	2001      	movs	r0, #1
   b9d76:	e7fc      	b.n	b9d72 <_ZNKSt9type_infoeqERKS_+0x22>
   b9d78:	2000      	movs	r0, #0
   b9d7a:	e7fa      	b.n	b9d72 <_ZNKSt9type_infoeqERKS_+0x22>

000b9d7c <atexit>:
   b9d7c:	2300      	movs	r3, #0
   b9d7e:	4601      	mov	r1, r0
   b9d80:	461a      	mov	r2, r3
   b9d82:	4618      	mov	r0, r3
   b9d84:	f000 bf32 	b.w	babec <__register_exitproc>

000b9d88 <atof>:
   b9d88:	2100      	movs	r1, #0
   b9d8a:	f000 be97 	b.w	baabc <strtod>

000b9d8e <atoi>:
   b9d8e:	220a      	movs	r2, #10
   b9d90:	2100      	movs	r1, #0
   b9d92:	f000 bf21 	b.w	babd8 <strtol>

000b9d96 <atol>:
   b9d96:	220a      	movs	r2, #10
   b9d98:	2100      	movs	r1, #0
   b9d9a:	f000 bf1d 	b.w	babd8 <strtol>

000b9d9e <memcpy>:
   b9d9e:	440a      	add	r2, r1
   b9da0:	4291      	cmp	r1, r2
   b9da2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9da6:	d100      	bne.n	b9daa <memcpy+0xc>
   b9da8:	4770      	bx	lr
   b9daa:	b510      	push	{r4, lr}
   b9dac:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9db0:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9db4:	4291      	cmp	r1, r2
   b9db6:	d1f9      	bne.n	b9dac <memcpy+0xe>
   b9db8:	bd10      	pop	{r4, pc}

000b9dba <memset>:
   b9dba:	4402      	add	r2, r0
   b9dbc:	4603      	mov	r3, r0
   b9dbe:	4293      	cmp	r3, r2
   b9dc0:	d100      	bne.n	b9dc4 <memset+0xa>
   b9dc2:	4770      	bx	lr
   b9dc4:	f803 1b01 	strb.w	r1, [r3], #1
   b9dc8:	e7f9      	b.n	b9dbe <memset+0x4>
	...

000b9dcc <srand>:
   b9dcc:	b538      	push	{r3, r4, r5, lr}
   b9dce:	4b10      	ldr	r3, [pc, #64]	; (b9e10 <srand+0x44>)
   b9dd0:	681d      	ldr	r5, [r3, #0]
   b9dd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9dd4:	4604      	mov	r4, r0
   b9dd6:	b9b3      	cbnz	r3, b9e06 <srand+0x3a>
   b9dd8:	2018      	movs	r0, #24
   b9dda:	f7fe fb8d 	bl	b84f8 <malloc>
   b9dde:	4602      	mov	r2, r0
   b9de0:	63a8      	str	r0, [r5, #56]	; 0x38
   b9de2:	b920      	cbnz	r0, b9dee <srand+0x22>
   b9de4:	4b0b      	ldr	r3, [pc, #44]	; (b9e14 <srand+0x48>)
   b9de6:	480c      	ldr	r0, [pc, #48]	; (b9e18 <srand+0x4c>)
   b9de8:	2142      	movs	r1, #66	; 0x42
   b9dea:	f7fe fbbd 	bl	b8568 <__assert_func>
   b9dee:	490b      	ldr	r1, [pc, #44]	; (b9e1c <srand+0x50>)
   b9df0:	4b0b      	ldr	r3, [pc, #44]	; (b9e20 <srand+0x54>)
   b9df2:	e9c0 1300 	strd	r1, r3, [r0]
   b9df6:	4b0b      	ldr	r3, [pc, #44]	; (b9e24 <srand+0x58>)
   b9df8:	6083      	str	r3, [r0, #8]
   b9dfa:	230b      	movs	r3, #11
   b9dfc:	8183      	strh	r3, [r0, #12]
   b9dfe:	2100      	movs	r1, #0
   b9e00:	2001      	movs	r0, #1
   b9e02:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9e06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9e08:	2200      	movs	r2, #0
   b9e0a:	611c      	str	r4, [r3, #16]
   b9e0c:	615a      	str	r2, [r3, #20]
   b9e0e:	bd38      	pop	{r3, r4, r5, pc}
   b9e10:	2003e318 	.word	0x2003e318
   b9e14:	000bd21d 	.word	0x000bd21d
   b9e18:	000bd234 	.word	0x000bd234
   b9e1c:	abcd330e 	.word	0xabcd330e
   b9e20:	e66d1234 	.word	0xe66d1234
   b9e24:	0005deec 	.word	0x0005deec

000b9e28 <strncmp>:
   b9e28:	b510      	push	{r4, lr}
   b9e2a:	b17a      	cbz	r2, b9e4c <strncmp+0x24>
   b9e2c:	4603      	mov	r3, r0
   b9e2e:	3901      	subs	r1, #1
   b9e30:	1884      	adds	r4, r0, r2
   b9e32:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9e36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9e3a:	4290      	cmp	r0, r2
   b9e3c:	d101      	bne.n	b9e42 <strncmp+0x1a>
   b9e3e:	42a3      	cmp	r3, r4
   b9e40:	d101      	bne.n	b9e46 <strncmp+0x1e>
   b9e42:	1a80      	subs	r0, r0, r2
   b9e44:	bd10      	pop	{r4, pc}
   b9e46:	2800      	cmp	r0, #0
   b9e48:	d1f3      	bne.n	b9e32 <strncmp+0xa>
   b9e4a:	e7fa      	b.n	b9e42 <strncmp+0x1a>
   b9e4c:	4610      	mov	r0, r2
   b9e4e:	e7f9      	b.n	b9e44 <strncmp+0x1c>

000b9e50 <strncpy>:
   b9e50:	b510      	push	{r4, lr}
   b9e52:	3901      	subs	r1, #1
   b9e54:	4603      	mov	r3, r0
   b9e56:	b132      	cbz	r2, b9e66 <strncpy+0x16>
   b9e58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9e5c:	f803 4b01 	strb.w	r4, [r3], #1
   b9e60:	3a01      	subs	r2, #1
   b9e62:	2c00      	cmp	r4, #0
   b9e64:	d1f7      	bne.n	b9e56 <strncpy+0x6>
   b9e66:	441a      	add	r2, r3
   b9e68:	2100      	movs	r1, #0
   b9e6a:	4293      	cmp	r3, r2
   b9e6c:	d100      	bne.n	b9e70 <strncpy+0x20>
   b9e6e:	bd10      	pop	{r4, pc}
   b9e70:	f803 1b01 	strb.w	r1, [r3], #1
   b9e74:	e7f9      	b.n	b9e6a <strncpy+0x1a>

000b9e76 <sulp>:
   b9e76:	b570      	push	{r4, r5, r6, lr}
   b9e78:	4604      	mov	r4, r0
   b9e7a:	460d      	mov	r5, r1
   b9e7c:	ec45 4b10 	vmov	d0, r4, r5
   b9e80:	4616      	mov	r6, r2
   b9e82:	f001 fe0d 	bl	bbaa0 <__ulp>
   b9e86:	ec51 0b10 	vmov	r0, r1, d0
   b9e8a:	b17e      	cbz	r6, b9eac <sulp+0x36>
   b9e8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9e90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9e94:	2b00      	cmp	r3, #0
   b9e96:	dd09      	ble.n	b9eac <sulp+0x36>
   b9e98:	051b      	lsls	r3, r3, #20
   b9e9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9e9e:	2400      	movs	r4, #0
   b9ea0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b9ea4:	4622      	mov	r2, r4
   b9ea6:	462b      	mov	r3, r5
   b9ea8:	f7fa fa76 	bl	b4398 <__aeabi_dmul>
   b9eac:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9eb0 <_strtod_l>:
   b9eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9eb4:	ed2d 8b02 	vpush	{d8}
   b9eb8:	b09d      	sub	sp, #116	; 0x74
   b9eba:	461f      	mov	r7, r3
   b9ebc:	2300      	movs	r3, #0
   b9ebe:	9318      	str	r3, [sp, #96]	; 0x60
   b9ec0:	4ba2      	ldr	r3, [pc, #648]	; (ba14c <_strtod_l+0x29c>)
   b9ec2:	9213      	str	r2, [sp, #76]	; 0x4c
   b9ec4:	681b      	ldr	r3, [r3, #0]
   b9ec6:	9305      	str	r3, [sp, #20]
   b9ec8:	4604      	mov	r4, r0
   b9eca:	4618      	mov	r0, r3
   b9ecc:	4688      	mov	r8, r1
   b9ece:	f7fa fdd3 	bl	b4a78 <strlen>
   b9ed2:	f04f 0a00 	mov.w	sl, #0
   b9ed6:	4605      	mov	r5, r0
   b9ed8:	f04f 0b00 	mov.w	fp, #0
   b9edc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ee2:	781a      	ldrb	r2, [r3, #0]
   b9ee4:	2a2b      	cmp	r2, #43	; 0x2b
   b9ee6:	d04e      	beq.n	b9f86 <_strtod_l+0xd6>
   b9ee8:	d83b      	bhi.n	b9f62 <_strtod_l+0xb2>
   b9eea:	2a0d      	cmp	r2, #13
   b9eec:	d834      	bhi.n	b9f58 <_strtod_l+0xa8>
   b9eee:	2a08      	cmp	r2, #8
   b9ef0:	d834      	bhi.n	b9f5c <_strtod_l+0xac>
   b9ef2:	2a00      	cmp	r2, #0
   b9ef4:	d03e      	beq.n	b9f74 <_strtod_l+0xc4>
   b9ef6:	2300      	movs	r3, #0
   b9ef8:	930a      	str	r3, [sp, #40]	; 0x28
   b9efa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b9efc:	7833      	ldrb	r3, [r6, #0]
   b9efe:	2b30      	cmp	r3, #48	; 0x30
   b9f00:	f040 80b0 	bne.w	ba064 <_strtod_l+0x1b4>
   b9f04:	7873      	ldrb	r3, [r6, #1]
   b9f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9f0a:	2b58      	cmp	r3, #88	; 0x58
   b9f0c:	d168      	bne.n	b9fe0 <_strtod_l+0x130>
   b9f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9f10:	9301      	str	r3, [sp, #4]
   b9f12:	ab18      	add	r3, sp, #96	; 0x60
   b9f14:	9702      	str	r7, [sp, #8]
   b9f16:	9300      	str	r3, [sp, #0]
   b9f18:	4a8d      	ldr	r2, [pc, #564]	; (ba150 <_strtod_l+0x2a0>)
   b9f1a:	ab19      	add	r3, sp, #100	; 0x64
   b9f1c:	a917      	add	r1, sp, #92	; 0x5c
   b9f1e:	4620      	mov	r0, r4
   b9f20:	f000 ff2e 	bl	bad80 <__gethex>
   b9f24:	f010 0707 	ands.w	r7, r0, #7
   b9f28:	4605      	mov	r5, r0
   b9f2a:	d005      	beq.n	b9f38 <_strtod_l+0x88>
   b9f2c:	2f06      	cmp	r7, #6
   b9f2e:	d12c      	bne.n	b9f8a <_strtod_l+0xda>
   b9f30:	3601      	adds	r6, #1
   b9f32:	2300      	movs	r3, #0
   b9f34:	9617      	str	r6, [sp, #92]	; 0x5c
   b9f36:	930a      	str	r3, [sp, #40]	; 0x28
   b9f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9f3a:	2b00      	cmp	r3, #0
   b9f3c:	f040 8590 	bne.w	baa60 <_strtod_l+0xbb0>
   b9f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9f42:	b1eb      	cbz	r3, b9f80 <_strtod_l+0xd0>
   b9f44:	4652      	mov	r2, sl
   b9f46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b9f4a:	ec43 2b10 	vmov	d0, r2, r3
   b9f4e:	b01d      	add	sp, #116	; 0x74
   b9f50:	ecbd 8b02 	vpop	{d8}
   b9f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9f58:	2a20      	cmp	r2, #32
   b9f5a:	d1cc      	bne.n	b9ef6 <_strtod_l+0x46>
   b9f5c:	3301      	adds	r3, #1
   b9f5e:	9317      	str	r3, [sp, #92]	; 0x5c
   b9f60:	e7be      	b.n	b9ee0 <_strtod_l+0x30>
   b9f62:	2a2d      	cmp	r2, #45	; 0x2d
   b9f64:	d1c7      	bne.n	b9ef6 <_strtod_l+0x46>
   b9f66:	2201      	movs	r2, #1
   b9f68:	920a      	str	r2, [sp, #40]	; 0x28
   b9f6a:	1c5a      	adds	r2, r3, #1
   b9f6c:	9217      	str	r2, [sp, #92]	; 0x5c
   b9f6e:	785b      	ldrb	r3, [r3, #1]
   b9f70:	2b00      	cmp	r3, #0
   b9f72:	d1c2      	bne.n	b9efa <_strtod_l+0x4a>
   b9f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9f76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9f7a:	2b00      	cmp	r3, #0
   b9f7c:	f040 856e 	bne.w	baa5c <_strtod_l+0xbac>
   b9f80:	4652      	mov	r2, sl
   b9f82:	465b      	mov	r3, fp
   b9f84:	e7e1      	b.n	b9f4a <_strtod_l+0x9a>
   b9f86:	2200      	movs	r2, #0
   b9f88:	e7ee      	b.n	b9f68 <_strtod_l+0xb8>
   b9f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9f8c:	b13a      	cbz	r2, b9f9e <_strtod_l+0xee>
   b9f8e:	2135      	movs	r1, #53	; 0x35
   b9f90:	a81a      	add	r0, sp, #104	; 0x68
   b9f92:	f001 fe90 	bl	bbcb6 <__copybits>
   b9f96:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9f98:	4620      	mov	r0, r4
   b9f9a:	f001 fa4f 	bl	bb43c <_Bfree>
   b9f9e:	3f01      	subs	r7, #1
   b9fa0:	2f04      	cmp	r7, #4
   b9fa2:	d806      	bhi.n	b9fb2 <_strtod_l+0x102>
   b9fa4:	e8df f007 	tbb	[pc, r7]
   b9fa8:	1714030a 	.word	0x1714030a
   b9fac:	0a          	.byte	0x0a
   b9fad:	00          	.byte	0x00
   b9fae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b9fb2:	0728      	lsls	r0, r5, #28
   b9fb4:	d5c0      	bpl.n	b9f38 <_strtod_l+0x88>
   b9fb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9fba:	e7bd      	b.n	b9f38 <_strtod_l+0x88>
   b9fbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9fc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9fc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9fc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9fca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9fce:	e7f0      	b.n	b9fb2 <_strtod_l+0x102>
   b9fd0:	f8df b180 	ldr.w	fp, [pc, #384]	; ba154 <_strtod_l+0x2a4>
   b9fd4:	e7ed      	b.n	b9fb2 <_strtod_l+0x102>
   b9fd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9fda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9fde:	e7e8      	b.n	b9fb2 <_strtod_l+0x102>
   b9fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9fe2:	1c5a      	adds	r2, r3, #1
   b9fe4:	9217      	str	r2, [sp, #92]	; 0x5c
   b9fe6:	785b      	ldrb	r3, [r3, #1]
   b9fe8:	2b30      	cmp	r3, #48	; 0x30
   b9fea:	d0f9      	beq.n	b9fe0 <_strtod_l+0x130>
   b9fec:	2b00      	cmp	r3, #0
   b9fee:	d0a3      	beq.n	b9f38 <_strtod_l+0x88>
   b9ff0:	2301      	movs	r3, #1
   b9ff2:	f04f 0900 	mov.w	r9, #0
   b9ff6:	9304      	str	r3, [sp, #16]
   b9ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ffa:	9308      	str	r3, [sp, #32]
   b9ffc:	f8cd 901c 	str.w	r9, [sp, #28]
   ba000:	464f      	mov	r7, r9
   ba002:	220a      	movs	r2, #10
   ba004:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba006:	7806      	ldrb	r6, [r0, #0]
   ba008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba00c:	b2d9      	uxtb	r1, r3
   ba00e:	2909      	cmp	r1, #9
   ba010:	d92a      	bls.n	ba068 <_strtod_l+0x1b8>
   ba012:	9905      	ldr	r1, [sp, #20]
   ba014:	462a      	mov	r2, r5
   ba016:	f7ff ff07 	bl	b9e28 <strncmp>
   ba01a:	b398      	cbz	r0, ba084 <_strtod_l+0x1d4>
   ba01c:	2000      	movs	r0, #0
   ba01e:	4632      	mov	r2, r6
   ba020:	463d      	mov	r5, r7
   ba022:	9005      	str	r0, [sp, #20]
   ba024:	4603      	mov	r3, r0
   ba026:	2a65      	cmp	r2, #101	; 0x65
   ba028:	d001      	beq.n	ba02e <_strtod_l+0x17e>
   ba02a:	2a45      	cmp	r2, #69	; 0x45
   ba02c:	d118      	bne.n	ba060 <_strtod_l+0x1b0>
   ba02e:	b91d      	cbnz	r5, ba038 <_strtod_l+0x188>
   ba030:	9a04      	ldr	r2, [sp, #16]
   ba032:	4302      	orrs	r2, r0
   ba034:	d09e      	beq.n	b9f74 <_strtod_l+0xc4>
   ba036:	2500      	movs	r5, #0
   ba038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba03c:	f108 0201 	add.w	r2, r8, #1
   ba040:	9217      	str	r2, [sp, #92]	; 0x5c
   ba042:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba046:	2a2b      	cmp	r2, #43	; 0x2b
   ba048:	d075      	beq.n	ba136 <_strtod_l+0x286>
   ba04a:	2a2d      	cmp	r2, #45	; 0x2d
   ba04c:	d07b      	beq.n	ba146 <_strtod_l+0x296>
   ba04e:	f04f 0c00 	mov.w	ip, #0
   ba052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba056:	2909      	cmp	r1, #9
   ba058:	f240 8082 	bls.w	ba160 <_strtod_l+0x2b0>
   ba05c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba060:	2600      	movs	r6, #0
   ba062:	e09d      	b.n	ba1a0 <_strtod_l+0x2f0>
   ba064:	2300      	movs	r3, #0
   ba066:	e7c4      	b.n	b9ff2 <_strtod_l+0x142>
   ba068:	2f08      	cmp	r7, #8
   ba06a:	bfd8      	it	le
   ba06c:	9907      	ldrle	r1, [sp, #28]
   ba06e:	f100 0001 	add.w	r0, r0, #1
   ba072:	bfda      	itte	le
   ba074:	fb02 3301 	mlale	r3, r2, r1, r3
   ba078:	9307      	strle	r3, [sp, #28]
   ba07a:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba07e:	3701      	adds	r7, #1
   ba080:	9017      	str	r0, [sp, #92]	; 0x5c
   ba082:	e7bf      	b.n	ba004 <_strtod_l+0x154>
   ba084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba086:	195a      	adds	r2, r3, r5
   ba088:	9217      	str	r2, [sp, #92]	; 0x5c
   ba08a:	5d5a      	ldrb	r2, [r3, r5]
   ba08c:	2f00      	cmp	r7, #0
   ba08e:	d037      	beq.n	ba100 <_strtod_l+0x250>
   ba090:	9005      	str	r0, [sp, #20]
   ba092:	463d      	mov	r5, r7
   ba094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba098:	2b09      	cmp	r3, #9
   ba09a:	d912      	bls.n	ba0c2 <_strtod_l+0x212>
   ba09c:	2301      	movs	r3, #1
   ba09e:	e7c2      	b.n	ba026 <_strtod_l+0x176>
   ba0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba0a2:	1c5a      	adds	r2, r3, #1
   ba0a4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba0a6:	785a      	ldrb	r2, [r3, #1]
   ba0a8:	3001      	adds	r0, #1
   ba0aa:	2a30      	cmp	r2, #48	; 0x30
   ba0ac:	d0f8      	beq.n	ba0a0 <_strtod_l+0x1f0>
   ba0ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba0b2:	2b08      	cmp	r3, #8
   ba0b4:	f200 84d9 	bhi.w	baa6a <_strtod_l+0xbba>
   ba0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba0ba:	9005      	str	r0, [sp, #20]
   ba0bc:	2000      	movs	r0, #0
   ba0be:	9308      	str	r3, [sp, #32]
   ba0c0:	4605      	mov	r5, r0
   ba0c2:	3a30      	subs	r2, #48	; 0x30
   ba0c4:	f100 0301 	add.w	r3, r0, #1
   ba0c8:	d014      	beq.n	ba0f4 <_strtod_l+0x244>
   ba0ca:	9905      	ldr	r1, [sp, #20]
   ba0cc:	4419      	add	r1, r3
   ba0ce:	9105      	str	r1, [sp, #20]
   ba0d0:	462b      	mov	r3, r5
   ba0d2:	eb00 0e05 	add.w	lr, r0, r5
   ba0d6:	210a      	movs	r1, #10
   ba0d8:	4573      	cmp	r3, lr
   ba0da:	d113      	bne.n	ba104 <_strtod_l+0x254>
   ba0dc:	182b      	adds	r3, r5, r0
   ba0de:	2b08      	cmp	r3, #8
   ba0e0:	f105 0501 	add.w	r5, r5, #1
   ba0e4:	4405      	add	r5, r0
   ba0e6:	dc1c      	bgt.n	ba122 <_strtod_l+0x272>
   ba0e8:	9907      	ldr	r1, [sp, #28]
   ba0ea:	230a      	movs	r3, #10
   ba0ec:	fb03 2301 	mla	r3, r3, r1, r2
   ba0f0:	9307      	str	r3, [sp, #28]
   ba0f2:	2300      	movs	r3, #0
   ba0f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba0f6:	1c51      	adds	r1, r2, #1
   ba0f8:	9117      	str	r1, [sp, #92]	; 0x5c
   ba0fa:	7852      	ldrb	r2, [r2, #1]
   ba0fc:	4618      	mov	r0, r3
   ba0fe:	e7c9      	b.n	ba094 <_strtod_l+0x1e4>
   ba100:	4638      	mov	r0, r7
   ba102:	e7d2      	b.n	ba0aa <_strtod_l+0x1fa>
   ba104:	2b08      	cmp	r3, #8
   ba106:	dc04      	bgt.n	ba112 <_strtod_l+0x262>
   ba108:	9e07      	ldr	r6, [sp, #28]
   ba10a:	434e      	muls	r6, r1
   ba10c:	9607      	str	r6, [sp, #28]
   ba10e:	3301      	adds	r3, #1
   ba110:	e7e2      	b.n	ba0d8 <_strtod_l+0x228>
   ba112:	f103 0c01 	add.w	ip, r3, #1
   ba116:	f1bc 0f10 	cmp.w	ip, #16
   ba11a:	bfd8      	it	le
   ba11c:	fb01 f909 	mulle.w	r9, r1, r9
   ba120:	e7f5      	b.n	ba10e <_strtod_l+0x25e>
   ba122:	2d10      	cmp	r5, #16
   ba124:	bfdc      	itt	le
   ba126:	230a      	movle	r3, #10
   ba128:	fb03 2909 	mlale	r9, r3, r9, r2
   ba12c:	e7e1      	b.n	ba0f2 <_strtod_l+0x242>
   ba12e:	2300      	movs	r3, #0
   ba130:	9305      	str	r3, [sp, #20]
   ba132:	2301      	movs	r3, #1
   ba134:	e77c      	b.n	ba030 <_strtod_l+0x180>
   ba136:	f04f 0c00 	mov.w	ip, #0
   ba13a:	f108 0202 	add.w	r2, r8, #2
   ba13e:	9217      	str	r2, [sp, #92]	; 0x5c
   ba140:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba144:	e785      	b.n	ba052 <_strtod_l+0x1a2>
   ba146:	f04f 0c01 	mov.w	ip, #1
   ba14a:	e7f6      	b.n	ba13a <_strtod_l+0x28a>
   ba14c:	000bd45c 	.word	0x000bd45c
   ba150:	000bd294 	.word	0x000bd294
   ba154:	7ff00000 	.word	0x7ff00000
   ba158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba15a:	1c51      	adds	r1, r2, #1
   ba15c:	9117      	str	r1, [sp, #92]	; 0x5c
   ba15e:	7852      	ldrb	r2, [r2, #1]
   ba160:	2a30      	cmp	r2, #48	; 0x30
   ba162:	d0f9      	beq.n	ba158 <_strtod_l+0x2a8>
   ba164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba168:	2908      	cmp	r1, #8
   ba16a:	f63f af79 	bhi.w	ba060 <_strtod_l+0x1b0>
   ba16e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba174:	9206      	str	r2, [sp, #24]
   ba176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba178:	1c51      	adds	r1, r2, #1
   ba17a:	9117      	str	r1, [sp, #92]	; 0x5c
   ba17c:	7852      	ldrb	r2, [r2, #1]
   ba17e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba182:	2e09      	cmp	r6, #9
   ba184:	d937      	bls.n	ba1f6 <_strtod_l+0x346>
   ba186:	9e06      	ldr	r6, [sp, #24]
   ba188:	1b89      	subs	r1, r1, r6
   ba18a:	2908      	cmp	r1, #8
   ba18c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba190:	dc02      	bgt.n	ba198 <_strtod_l+0x2e8>
   ba192:	4576      	cmp	r6, lr
   ba194:	bfa8      	it	ge
   ba196:	4676      	movge	r6, lr
   ba198:	f1bc 0f00 	cmp.w	ip, #0
   ba19c:	d000      	beq.n	ba1a0 <_strtod_l+0x2f0>
   ba19e:	4276      	negs	r6, r6
   ba1a0:	2d00      	cmp	r5, #0
   ba1a2:	d14d      	bne.n	ba240 <_strtod_l+0x390>
   ba1a4:	9904      	ldr	r1, [sp, #16]
   ba1a6:	4301      	orrs	r1, r0
   ba1a8:	f47f aec6 	bne.w	b9f38 <_strtod_l+0x88>
   ba1ac:	2b00      	cmp	r3, #0
   ba1ae:	f47f aee1 	bne.w	b9f74 <_strtod_l+0xc4>
   ba1b2:	2a69      	cmp	r2, #105	; 0x69
   ba1b4:	d027      	beq.n	ba206 <_strtod_l+0x356>
   ba1b6:	dc24      	bgt.n	ba202 <_strtod_l+0x352>
   ba1b8:	2a49      	cmp	r2, #73	; 0x49
   ba1ba:	d024      	beq.n	ba206 <_strtod_l+0x356>
   ba1bc:	2a4e      	cmp	r2, #78	; 0x4e
   ba1be:	f47f aed9 	bne.w	b9f74 <_strtod_l+0xc4>
   ba1c2:	499f      	ldr	r1, [pc, #636]	; (ba440 <_strtod_l+0x590>)
   ba1c4:	a817      	add	r0, sp, #92	; 0x5c
   ba1c6:	f001 f833 	bl	bb230 <__match>
   ba1ca:	2800      	cmp	r0, #0
   ba1cc:	f43f aed2 	beq.w	b9f74 <_strtod_l+0xc4>
   ba1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba1d2:	781b      	ldrb	r3, [r3, #0]
   ba1d4:	2b28      	cmp	r3, #40	; 0x28
   ba1d6:	d12d      	bne.n	ba234 <_strtod_l+0x384>
   ba1d8:	499a      	ldr	r1, [pc, #616]	; (ba444 <_strtod_l+0x594>)
   ba1da:	aa1a      	add	r2, sp, #104	; 0x68
   ba1dc:	a817      	add	r0, sp, #92	; 0x5c
   ba1de:	f001 f83b 	bl	bb258 <__hexnan>
   ba1e2:	2805      	cmp	r0, #5
   ba1e4:	d126      	bne.n	ba234 <_strtod_l+0x384>
   ba1e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba1e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba1ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba1f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba1f4:	e6a0      	b.n	b9f38 <_strtod_l+0x88>
   ba1f6:	210a      	movs	r1, #10
   ba1f8:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba1fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba200:	e7b9      	b.n	ba176 <_strtod_l+0x2c6>
   ba202:	2a6e      	cmp	r2, #110	; 0x6e
   ba204:	e7db      	b.n	ba1be <_strtod_l+0x30e>
   ba206:	4990      	ldr	r1, [pc, #576]	; (ba448 <_strtod_l+0x598>)
   ba208:	a817      	add	r0, sp, #92	; 0x5c
   ba20a:	f001 f811 	bl	bb230 <__match>
   ba20e:	2800      	cmp	r0, #0
   ba210:	f43f aeb0 	beq.w	b9f74 <_strtod_l+0xc4>
   ba214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba216:	498d      	ldr	r1, [pc, #564]	; (ba44c <_strtod_l+0x59c>)
   ba218:	3b01      	subs	r3, #1
   ba21a:	a817      	add	r0, sp, #92	; 0x5c
   ba21c:	9317      	str	r3, [sp, #92]	; 0x5c
   ba21e:	f001 f807 	bl	bb230 <__match>
   ba222:	b910      	cbnz	r0, ba22a <_strtod_l+0x37a>
   ba224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba226:	3301      	adds	r3, #1
   ba228:	9317      	str	r3, [sp, #92]	; 0x5c
   ba22a:	f8df b230 	ldr.w	fp, [pc, #560]	; ba45c <_strtod_l+0x5ac>
   ba22e:	f04f 0a00 	mov.w	sl, #0
   ba232:	e681      	b.n	b9f38 <_strtod_l+0x88>
   ba234:	4886      	ldr	r0, [pc, #536]	; (ba450 <_strtod_l+0x5a0>)
   ba236:	f001 fd93 	bl	bbd60 <nan>
   ba23a:	ec5b ab10 	vmov	sl, fp, d0
   ba23e:	e67b      	b.n	b9f38 <_strtod_l+0x88>
   ba240:	9b05      	ldr	r3, [sp, #20]
   ba242:	9807      	ldr	r0, [sp, #28]
   ba244:	1af3      	subs	r3, r6, r3
   ba246:	2f00      	cmp	r7, #0
   ba248:	bf08      	it	eq
   ba24a:	462f      	moveq	r7, r5
   ba24c:	2d10      	cmp	r5, #16
   ba24e:	9306      	str	r3, [sp, #24]
   ba250:	46a8      	mov	r8, r5
   ba252:	bfa8      	it	ge
   ba254:	f04f 0810 	movge.w	r8, #16
   ba258:	f7fa f824 	bl	b42a4 <__aeabi_ui2d>
   ba25c:	2d09      	cmp	r5, #9
   ba25e:	4682      	mov	sl, r0
   ba260:	468b      	mov	fp, r1
   ba262:	dd13      	ble.n	ba28c <_strtod_l+0x3dc>
   ba264:	4b7b      	ldr	r3, [pc, #492]	; (ba454 <_strtod_l+0x5a4>)
   ba266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba26a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba26e:	f7fa f893 	bl	b4398 <__aeabi_dmul>
   ba272:	4682      	mov	sl, r0
   ba274:	4648      	mov	r0, r9
   ba276:	468b      	mov	fp, r1
   ba278:	f7fa f814 	bl	b42a4 <__aeabi_ui2d>
   ba27c:	4602      	mov	r2, r0
   ba27e:	460b      	mov	r3, r1
   ba280:	4650      	mov	r0, sl
   ba282:	4659      	mov	r1, fp
   ba284:	f7f9 fed2 	bl	b402c <__adddf3>
   ba288:	4682      	mov	sl, r0
   ba28a:	468b      	mov	fp, r1
   ba28c:	2d0f      	cmp	r5, #15
   ba28e:	dc38      	bgt.n	ba302 <_strtod_l+0x452>
   ba290:	9b06      	ldr	r3, [sp, #24]
   ba292:	2b00      	cmp	r3, #0
   ba294:	f43f ae50 	beq.w	b9f38 <_strtod_l+0x88>
   ba298:	dd24      	ble.n	ba2e4 <_strtod_l+0x434>
   ba29a:	2b16      	cmp	r3, #22
   ba29c:	dc0b      	bgt.n	ba2b6 <_strtod_l+0x406>
   ba29e:	496d      	ldr	r1, [pc, #436]	; (ba454 <_strtod_l+0x5a4>)
   ba2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba2a8:	4652      	mov	r2, sl
   ba2aa:	465b      	mov	r3, fp
   ba2ac:	f7fa f874 	bl	b4398 <__aeabi_dmul>
   ba2b0:	4682      	mov	sl, r0
   ba2b2:	468b      	mov	fp, r1
   ba2b4:	e640      	b.n	b9f38 <_strtod_l+0x88>
   ba2b6:	9a06      	ldr	r2, [sp, #24]
   ba2b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba2bc:	4293      	cmp	r3, r2
   ba2be:	db20      	blt.n	ba302 <_strtod_l+0x452>
   ba2c0:	4c64      	ldr	r4, [pc, #400]	; (ba454 <_strtod_l+0x5a4>)
   ba2c2:	f1c5 050f 	rsb	r5, r5, #15
   ba2c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba2ca:	4652      	mov	r2, sl
   ba2cc:	465b      	mov	r3, fp
   ba2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba2d2:	f7fa f861 	bl	b4398 <__aeabi_dmul>
   ba2d6:	9b06      	ldr	r3, [sp, #24]
   ba2d8:	1b5d      	subs	r5, r3, r5
   ba2da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba2de:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba2e2:	e7e3      	b.n	ba2ac <_strtod_l+0x3fc>
   ba2e4:	9b06      	ldr	r3, [sp, #24]
   ba2e6:	3316      	adds	r3, #22
   ba2e8:	db0b      	blt.n	ba302 <_strtod_l+0x452>
   ba2ea:	9b05      	ldr	r3, [sp, #20]
   ba2ec:	1b9e      	subs	r6, r3, r6
   ba2ee:	4b59      	ldr	r3, [pc, #356]	; (ba454 <_strtod_l+0x5a4>)
   ba2f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba2f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba2f8:	4650      	mov	r0, sl
   ba2fa:	4659      	mov	r1, fp
   ba2fc:	f7fa f976 	bl	b45ec <__aeabi_ddiv>
   ba300:	e7d6      	b.n	ba2b0 <_strtod_l+0x400>
   ba302:	9b06      	ldr	r3, [sp, #24]
   ba304:	eba5 0808 	sub.w	r8, r5, r8
   ba308:	4498      	add	r8, r3
   ba30a:	f1b8 0f00 	cmp.w	r8, #0
   ba30e:	dd74      	ble.n	ba3fa <_strtod_l+0x54a>
   ba310:	f018 030f 	ands.w	r3, r8, #15
   ba314:	d00a      	beq.n	ba32c <_strtod_l+0x47c>
   ba316:	494f      	ldr	r1, [pc, #316]	; (ba454 <_strtod_l+0x5a4>)
   ba318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba31c:	4652      	mov	r2, sl
   ba31e:	465b      	mov	r3, fp
   ba320:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba324:	f7fa f838 	bl	b4398 <__aeabi_dmul>
   ba328:	4682      	mov	sl, r0
   ba32a:	468b      	mov	fp, r1
   ba32c:	f038 080f 	bics.w	r8, r8, #15
   ba330:	d04f      	beq.n	ba3d2 <_strtod_l+0x522>
   ba332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba336:	dd22      	ble.n	ba37e <_strtod_l+0x4ce>
   ba338:	2500      	movs	r5, #0
   ba33a:	462e      	mov	r6, r5
   ba33c:	9507      	str	r5, [sp, #28]
   ba33e:	9505      	str	r5, [sp, #20]
   ba340:	2322      	movs	r3, #34	; 0x22
   ba342:	f8df b118 	ldr.w	fp, [pc, #280]	; ba45c <_strtod_l+0x5ac>
   ba346:	6023      	str	r3, [r4, #0]
   ba348:	f04f 0a00 	mov.w	sl, #0
   ba34c:	9b07      	ldr	r3, [sp, #28]
   ba34e:	2b00      	cmp	r3, #0
   ba350:	f43f adf2 	beq.w	b9f38 <_strtod_l+0x88>
   ba354:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba356:	4620      	mov	r0, r4
   ba358:	f001 f870 	bl	bb43c <_Bfree>
   ba35c:	9905      	ldr	r1, [sp, #20]
   ba35e:	4620      	mov	r0, r4
   ba360:	f001 f86c 	bl	bb43c <_Bfree>
   ba364:	4631      	mov	r1, r6
   ba366:	4620      	mov	r0, r4
   ba368:	f001 f868 	bl	bb43c <_Bfree>
   ba36c:	9907      	ldr	r1, [sp, #28]
   ba36e:	4620      	mov	r0, r4
   ba370:	f001 f864 	bl	bb43c <_Bfree>
   ba374:	4629      	mov	r1, r5
   ba376:	4620      	mov	r0, r4
   ba378:	f001 f860 	bl	bb43c <_Bfree>
   ba37c:	e5dc      	b.n	b9f38 <_strtod_l+0x88>
   ba37e:	4b36      	ldr	r3, [pc, #216]	; (ba458 <_strtod_l+0x5a8>)
   ba380:	9304      	str	r3, [sp, #16]
   ba382:	2300      	movs	r3, #0
   ba384:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba388:	4650      	mov	r0, sl
   ba38a:	4659      	mov	r1, fp
   ba38c:	4699      	mov	r9, r3
   ba38e:	f1b8 0f01 	cmp.w	r8, #1
   ba392:	dc21      	bgt.n	ba3d8 <_strtod_l+0x528>
   ba394:	b10b      	cbz	r3, ba39a <_strtod_l+0x4ea>
   ba396:	4682      	mov	sl, r0
   ba398:	468b      	mov	fp, r1
   ba39a:	4b2f      	ldr	r3, [pc, #188]	; (ba458 <_strtod_l+0x5a8>)
   ba39c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba3a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba3a4:	4652      	mov	r2, sl
   ba3a6:	465b      	mov	r3, fp
   ba3a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba3ac:	f7f9 fff4 	bl	b4398 <__aeabi_dmul>
   ba3b0:	4b2a      	ldr	r3, [pc, #168]	; (ba45c <_strtod_l+0x5ac>)
   ba3b2:	460a      	mov	r2, r1
   ba3b4:	400b      	ands	r3, r1
   ba3b6:	492a      	ldr	r1, [pc, #168]	; (ba460 <_strtod_l+0x5b0>)
   ba3b8:	428b      	cmp	r3, r1
   ba3ba:	4682      	mov	sl, r0
   ba3bc:	d8bc      	bhi.n	ba338 <_strtod_l+0x488>
   ba3be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba3c2:	428b      	cmp	r3, r1
   ba3c4:	bf86      	itte	hi
   ba3c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba464 <_strtod_l+0x5b4>
   ba3ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba3ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba3d2:	2300      	movs	r3, #0
   ba3d4:	9304      	str	r3, [sp, #16]
   ba3d6:	e084      	b.n	ba4e2 <_strtod_l+0x632>
   ba3d8:	f018 0f01 	tst.w	r8, #1
   ba3dc:	d005      	beq.n	ba3ea <_strtod_l+0x53a>
   ba3de:	9b04      	ldr	r3, [sp, #16]
   ba3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3e4:	f7f9 ffd8 	bl	b4398 <__aeabi_dmul>
   ba3e8:	2301      	movs	r3, #1
   ba3ea:	9a04      	ldr	r2, [sp, #16]
   ba3ec:	3208      	adds	r2, #8
   ba3ee:	f109 0901 	add.w	r9, r9, #1
   ba3f2:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba3f6:	9204      	str	r2, [sp, #16]
   ba3f8:	e7c9      	b.n	ba38e <_strtod_l+0x4de>
   ba3fa:	d0ea      	beq.n	ba3d2 <_strtod_l+0x522>
   ba3fc:	f1c8 0800 	rsb	r8, r8, #0
   ba400:	f018 020f 	ands.w	r2, r8, #15
   ba404:	d00a      	beq.n	ba41c <_strtod_l+0x56c>
   ba406:	4b13      	ldr	r3, [pc, #76]	; (ba454 <_strtod_l+0x5a4>)
   ba408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba40c:	4650      	mov	r0, sl
   ba40e:	4659      	mov	r1, fp
   ba410:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba414:	f7fa f8ea 	bl	b45ec <__aeabi_ddiv>
   ba418:	4682      	mov	sl, r0
   ba41a:	468b      	mov	fp, r1
   ba41c:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba420:	d0d7      	beq.n	ba3d2 <_strtod_l+0x522>
   ba422:	f1b8 0f1f 	cmp.w	r8, #31
   ba426:	dd1f      	ble.n	ba468 <_strtod_l+0x5b8>
   ba428:	2500      	movs	r5, #0
   ba42a:	462e      	mov	r6, r5
   ba42c:	9507      	str	r5, [sp, #28]
   ba42e:	9505      	str	r5, [sp, #20]
   ba430:	2322      	movs	r3, #34	; 0x22
   ba432:	f04f 0a00 	mov.w	sl, #0
   ba436:	f04f 0b00 	mov.w	fp, #0
   ba43a:	6023      	str	r3, [r4, #0]
   ba43c:	e786      	b.n	ba34c <_strtod_l+0x49c>
   ba43e:	bf00      	nop
   ba440:	000bcfdd 	.word	0x000bcfdd
   ba444:	000bd2a8 	.word	0x000bd2a8
   ba448:	000bcfe1 	.word	0x000bcfe1
   ba44c:	000bd28d 	.word	0x000bd28d
   ba450:	000bbed7 	.word	0x000bbed7
   ba454:	000bd4f8 	.word	0x000bd4f8
   ba458:	000bd4d0 	.word	0x000bd4d0
   ba45c:	7ff00000 	.word	0x7ff00000
   ba460:	7ca00000 	.word	0x7ca00000
   ba464:	7fefffff 	.word	0x7fefffff
   ba468:	f018 0310 	ands.w	r3, r8, #16
   ba46c:	bf18      	it	ne
   ba46e:	236a      	movne	r3, #106	; 0x6a
   ba470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba820 <_strtod_l+0x970>
   ba474:	9304      	str	r3, [sp, #16]
   ba476:	4650      	mov	r0, sl
   ba478:	4659      	mov	r1, fp
   ba47a:	2300      	movs	r3, #0
   ba47c:	f018 0f01 	tst.w	r8, #1
   ba480:	d004      	beq.n	ba48c <_strtod_l+0x5dc>
   ba482:	e9d9 2300 	ldrd	r2, r3, [r9]
   ba486:	f7f9 ff87 	bl	b4398 <__aeabi_dmul>
   ba48a:	2301      	movs	r3, #1
   ba48c:	ea5f 0868 	movs.w	r8, r8, asr #1
   ba490:	f109 0908 	add.w	r9, r9, #8
   ba494:	d1f2      	bne.n	ba47c <_strtod_l+0x5cc>
   ba496:	b10b      	cbz	r3, ba49c <_strtod_l+0x5ec>
   ba498:	4682      	mov	sl, r0
   ba49a:	468b      	mov	fp, r1
   ba49c:	9b04      	ldr	r3, [sp, #16]
   ba49e:	b1c3      	cbz	r3, ba4d2 <_strtod_l+0x622>
   ba4a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   ba4a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   ba4a8:	2b00      	cmp	r3, #0
   ba4aa:	4659      	mov	r1, fp
   ba4ac:	dd11      	ble.n	ba4d2 <_strtod_l+0x622>
   ba4ae:	2b1f      	cmp	r3, #31
   ba4b0:	f340 8124 	ble.w	ba6fc <_strtod_l+0x84c>
   ba4b4:	2b34      	cmp	r3, #52	; 0x34
   ba4b6:	bfde      	ittt	le
   ba4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   ba4bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   ba4c0:	fa03 f202 	lslle.w	r2, r3, r2
   ba4c4:	f04f 0a00 	mov.w	sl, #0
   ba4c8:	bfcc      	ite	gt
   ba4ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ba4ce:	ea02 0b01 	andle.w	fp, r2, r1
   ba4d2:	2200      	movs	r2, #0
   ba4d4:	2300      	movs	r3, #0
   ba4d6:	4650      	mov	r0, sl
   ba4d8:	4659      	mov	r1, fp
   ba4da:	f7fa f9c5 	bl	b4868 <__aeabi_dcmpeq>
   ba4de:	2800      	cmp	r0, #0
   ba4e0:	d1a2      	bne.n	ba428 <_strtod_l+0x578>
   ba4e2:	9b07      	ldr	r3, [sp, #28]
   ba4e4:	9300      	str	r3, [sp, #0]
   ba4e6:	9908      	ldr	r1, [sp, #32]
   ba4e8:	462b      	mov	r3, r5
   ba4ea:	463a      	mov	r2, r7
   ba4ec:	4620      	mov	r0, r4
   ba4ee:	f001 f80d 	bl	bb50c <__s2b>
   ba4f2:	9007      	str	r0, [sp, #28]
   ba4f4:	2800      	cmp	r0, #0
   ba4f6:	f43f af1f 	beq.w	ba338 <_strtod_l+0x488>
   ba4fa:	9b05      	ldr	r3, [sp, #20]
   ba4fc:	1b9e      	subs	r6, r3, r6
   ba4fe:	9b06      	ldr	r3, [sp, #24]
   ba500:	2b00      	cmp	r3, #0
   ba502:	bfb4      	ite	lt
   ba504:	4633      	movlt	r3, r6
   ba506:	2300      	movge	r3, #0
   ba508:	930c      	str	r3, [sp, #48]	; 0x30
   ba50a:	9b06      	ldr	r3, [sp, #24]
   ba50c:	2500      	movs	r5, #0
   ba50e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba512:	9312      	str	r3, [sp, #72]	; 0x48
   ba514:	462e      	mov	r6, r5
   ba516:	9b07      	ldr	r3, [sp, #28]
   ba518:	4620      	mov	r0, r4
   ba51a:	6859      	ldr	r1, [r3, #4]
   ba51c:	f000 ff4e 	bl	bb3bc <_Balloc>
   ba520:	9005      	str	r0, [sp, #20]
   ba522:	2800      	cmp	r0, #0
   ba524:	f43f af0c 	beq.w	ba340 <_strtod_l+0x490>
   ba528:	9b07      	ldr	r3, [sp, #28]
   ba52a:	691a      	ldr	r2, [r3, #16]
   ba52c:	3202      	adds	r2, #2
   ba52e:	f103 010c 	add.w	r1, r3, #12
   ba532:	0092      	lsls	r2, r2, #2
   ba534:	300c      	adds	r0, #12
   ba536:	f7ff fc32 	bl	b9d9e <memcpy>
   ba53a:	ec4b ab10 	vmov	d0, sl, fp
   ba53e:	aa1a      	add	r2, sp, #104	; 0x68
   ba540:	a919      	add	r1, sp, #100	; 0x64
   ba542:	4620      	mov	r0, r4
   ba544:	f001 fb28 	bl	bbb98 <__d2b>
   ba548:	ec4b ab18 	vmov	d8, sl, fp
   ba54c:	9018      	str	r0, [sp, #96]	; 0x60
   ba54e:	2800      	cmp	r0, #0
   ba550:	f43f aef6 	beq.w	ba340 <_strtod_l+0x490>
   ba554:	2101      	movs	r1, #1
   ba556:	4620      	mov	r0, r4
   ba558:	f001 f872 	bl	bb640 <__i2b>
   ba55c:	4606      	mov	r6, r0
   ba55e:	2800      	cmp	r0, #0
   ba560:	f43f aeee 	beq.w	ba340 <_strtod_l+0x490>
   ba564:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba566:	9904      	ldr	r1, [sp, #16]
   ba568:	2b00      	cmp	r3, #0
   ba56a:	bfab      	itete	ge
   ba56c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   ba56e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ba570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   ba572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   ba576:	bfac      	ite	ge
   ba578:	eb03 0902 	addge.w	r9, r3, r2
   ba57c:	1ad7      	sublt	r7, r2, r3
   ba57e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba580:	eba3 0801 	sub.w	r8, r3, r1
   ba584:	4490      	add	r8, r2
   ba586:	4ba1      	ldr	r3, [pc, #644]	; (ba80c <_strtod_l+0x95c>)
   ba588:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba58c:	4598      	cmp	r8, r3
   ba58e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   ba592:	f280 80c7 	bge.w	ba724 <_strtod_l+0x874>
   ba596:	eba3 0308 	sub.w	r3, r3, r8
   ba59a:	2b1f      	cmp	r3, #31
   ba59c:	eba2 0203 	sub.w	r2, r2, r3
   ba5a0:	f04f 0101 	mov.w	r1, #1
   ba5a4:	f300 80b1 	bgt.w	ba70a <_strtod_l+0x85a>
   ba5a8:	fa01 f303 	lsl.w	r3, r1, r3
   ba5ac:	930d      	str	r3, [sp, #52]	; 0x34
   ba5ae:	2300      	movs	r3, #0
   ba5b0:	9308      	str	r3, [sp, #32]
   ba5b2:	eb09 0802 	add.w	r8, r9, r2
   ba5b6:	9b04      	ldr	r3, [sp, #16]
   ba5b8:	45c1      	cmp	r9, r8
   ba5ba:	4417      	add	r7, r2
   ba5bc:	441f      	add	r7, r3
   ba5be:	464b      	mov	r3, r9
   ba5c0:	bfa8      	it	ge
   ba5c2:	4643      	movge	r3, r8
   ba5c4:	42bb      	cmp	r3, r7
   ba5c6:	bfa8      	it	ge
   ba5c8:	463b      	movge	r3, r7
   ba5ca:	2b00      	cmp	r3, #0
   ba5cc:	bfc2      	ittt	gt
   ba5ce:	eba8 0803 	subgt.w	r8, r8, r3
   ba5d2:	1aff      	subgt	r7, r7, r3
   ba5d4:	eba9 0903 	subgt.w	r9, r9, r3
   ba5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba5da:	2b00      	cmp	r3, #0
   ba5dc:	dd17      	ble.n	ba60e <_strtod_l+0x75e>
   ba5de:	4631      	mov	r1, r6
   ba5e0:	461a      	mov	r2, r3
   ba5e2:	4620      	mov	r0, r4
   ba5e4:	f001 f8ec 	bl	bb7c0 <__pow5mult>
   ba5e8:	4606      	mov	r6, r0
   ba5ea:	2800      	cmp	r0, #0
   ba5ec:	f43f aea8 	beq.w	ba340 <_strtod_l+0x490>
   ba5f0:	4601      	mov	r1, r0
   ba5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba5f4:	4620      	mov	r0, r4
   ba5f6:	f001 f839 	bl	bb66c <__multiply>
   ba5fa:	900b      	str	r0, [sp, #44]	; 0x2c
   ba5fc:	2800      	cmp	r0, #0
   ba5fe:	f43f ae9f 	beq.w	ba340 <_strtod_l+0x490>
   ba602:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba604:	4620      	mov	r0, r4
   ba606:	f000 ff19 	bl	bb43c <_Bfree>
   ba60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba60c:	9318      	str	r3, [sp, #96]	; 0x60
   ba60e:	f1b8 0f00 	cmp.w	r8, #0
   ba612:	f300 808c 	bgt.w	ba72e <_strtod_l+0x87e>
   ba616:	9b06      	ldr	r3, [sp, #24]
   ba618:	2b00      	cmp	r3, #0
   ba61a:	dd08      	ble.n	ba62e <_strtod_l+0x77e>
   ba61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba61e:	9905      	ldr	r1, [sp, #20]
   ba620:	4620      	mov	r0, r4
   ba622:	f001 f8cd 	bl	bb7c0 <__pow5mult>
   ba626:	9005      	str	r0, [sp, #20]
   ba628:	2800      	cmp	r0, #0
   ba62a:	f43f ae89 	beq.w	ba340 <_strtod_l+0x490>
   ba62e:	2f00      	cmp	r7, #0
   ba630:	dd08      	ble.n	ba644 <_strtod_l+0x794>
   ba632:	9905      	ldr	r1, [sp, #20]
   ba634:	463a      	mov	r2, r7
   ba636:	4620      	mov	r0, r4
   ba638:	f001 f91c 	bl	bb874 <__lshift>
   ba63c:	9005      	str	r0, [sp, #20]
   ba63e:	2800      	cmp	r0, #0
   ba640:	f43f ae7e 	beq.w	ba340 <_strtod_l+0x490>
   ba644:	f1b9 0f00 	cmp.w	r9, #0
   ba648:	dd08      	ble.n	ba65c <_strtod_l+0x7ac>
   ba64a:	4631      	mov	r1, r6
   ba64c:	464a      	mov	r2, r9
   ba64e:	4620      	mov	r0, r4
   ba650:	f001 f910 	bl	bb874 <__lshift>
   ba654:	4606      	mov	r6, r0
   ba656:	2800      	cmp	r0, #0
   ba658:	f43f ae72 	beq.w	ba340 <_strtod_l+0x490>
   ba65c:	9a05      	ldr	r2, [sp, #20]
   ba65e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba660:	4620      	mov	r0, r4
   ba662:	f001 f993 	bl	bb98c <__mdiff>
   ba666:	4605      	mov	r5, r0
   ba668:	2800      	cmp	r0, #0
   ba66a:	f43f ae69 	beq.w	ba340 <_strtod_l+0x490>
   ba66e:	68c3      	ldr	r3, [r0, #12]
   ba670:	930b      	str	r3, [sp, #44]	; 0x2c
   ba672:	2300      	movs	r3, #0
   ba674:	60c3      	str	r3, [r0, #12]
   ba676:	4631      	mov	r1, r6
   ba678:	f001 f96c 	bl	bb954 <__mcmp>
   ba67c:	2800      	cmp	r0, #0
   ba67e:	da60      	bge.n	ba742 <_strtod_l+0x892>
   ba680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba682:	ea53 030a 	orrs.w	r3, r3, sl
   ba686:	f040 8082 	bne.w	ba78e <_strtod_l+0x8de>
   ba68a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba68e:	2b00      	cmp	r3, #0
   ba690:	d17d      	bne.n	ba78e <_strtod_l+0x8de>
   ba692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba696:	0d1b      	lsrs	r3, r3, #20
   ba698:	051b      	lsls	r3, r3, #20
   ba69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba69e:	d976      	bls.n	ba78e <_strtod_l+0x8de>
   ba6a0:	696b      	ldr	r3, [r5, #20]
   ba6a2:	b913      	cbnz	r3, ba6aa <_strtod_l+0x7fa>
   ba6a4:	692b      	ldr	r3, [r5, #16]
   ba6a6:	2b01      	cmp	r3, #1
   ba6a8:	dd71      	ble.n	ba78e <_strtod_l+0x8de>
   ba6aa:	4629      	mov	r1, r5
   ba6ac:	2201      	movs	r2, #1
   ba6ae:	4620      	mov	r0, r4
   ba6b0:	f001 f8e0 	bl	bb874 <__lshift>
   ba6b4:	4631      	mov	r1, r6
   ba6b6:	4605      	mov	r5, r0
   ba6b8:	f001 f94c 	bl	bb954 <__mcmp>
   ba6bc:	2800      	cmp	r0, #0
   ba6be:	dd66      	ble.n	ba78e <_strtod_l+0x8de>
   ba6c0:	9904      	ldr	r1, [sp, #16]
   ba6c2:	4a53      	ldr	r2, [pc, #332]	; (ba810 <_strtod_l+0x960>)
   ba6c4:	465b      	mov	r3, fp
   ba6c6:	2900      	cmp	r1, #0
   ba6c8:	f000 8081 	beq.w	ba7ce <_strtod_l+0x91e>
   ba6cc:	ea02 010b 	and.w	r1, r2, fp
   ba6d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba6d4:	dc7b      	bgt.n	ba7ce <_strtod_l+0x91e>
   ba6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba6da:	f77f aea9 	ble.w	ba430 <_strtod_l+0x580>
   ba6de:	4b4d      	ldr	r3, [pc, #308]	; (ba814 <_strtod_l+0x964>)
   ba6e0:	4650      	mov	r0, sl
   ba6e2:	4659      	mov	r1, fp
   ba6e4:	2200      	movs	r2, #0
   ba6e6:	f7f9 fe57 	bl	b4398 <__aeabi_dmul>
   ba6ea:	460b      	mov	r3, r1
   ba6ec:	4303      	orrs	r3, r0
   ba6ee:	bf08      	it	eq
   ba6f0:	2322      	moveq	r3, #34	; 0x22
   ba6f2:	4682      	mov	sl, r0
   ba6f4:	468b      	mov	fp, r1
   ba6f6:	bf08      	it	eq
   ba6f8:	6023      	streq	r3, [r4, #0]
   ba6fa:	e62b      	b.n	ba354 <_strtod_l+0x4a4>
   ba6fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba700:	fa02 f303 	lsl.w	r3, r2, r3
   ba704:	ea03 0a0a 	and.w	sl, r3, sl
   ba708:	e6e3      	b.n	ba4d2 <_strtod_l+0x622>
   ba70a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba70e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba71a:	fa01 f308 	lsl.w	r3, r1, r8
   ba71e:	9308      	str	r3, [sp, #32]
   ba720:	910d      	str	r1, [sp, #52]	; 0x34
   ba722:	e746      	b.n	ba5b2 <_strtod_l+0x702>
   ba724:	2300      	movs	r3, #0
   ba726:	9308      	str	r3, [sp, #32]
   ba728:	2301      	movs	r3, #1
   ba72a:	930d      	str	r3, [sp, #52]	; 0x34
   ba72c:	e741      	b.n	ba5b2 <_strtod_l+0x702>
   ba72e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba730:	4642      	mov	r2, r8
   ba732:	4620      	mov	r0, r4
   ba734:	f001 f89e 	bl	bb874 <__lshift>
   ba738:	9018      	str	r0, [sp, #96]	; 0x60
   ba73a:	2800      	cmp	r0, #0
   ba73c:	f47f af6b 	bne.w	ba616 <_strtod_l+0x766>
   ba740:	e5fe      	b.n	ba340 <_strtod_l+0x490>
   ba742:	465f      	mov	r7, fp
   ba744:	d16e      	bne.n	ba824 <_strtod_l+0x974>
   ba746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba748:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba74c:	b342      	cbz	r2, ba7a0 <_strtod_l+0x8f0>
   ba74e:	4a32      	ldr	r2, [pc, #200]	; (ba818 <_strtod_l+0x968>)
   ba750:	4293      	cmp	r3, r2
   ba752:	d128      	bne.n	ba7a6 <_strtod_l+0x8f6>
   ba754:	9b04      	ldr	r3, [sp, #16]
   ba756:	4651      	mov	r1, sl
   ba758:	b1eb      	cbz	r3, ba796 <_strtod_l+0x8e6>
   ba75a:	4b2d      	ldr	r3, [pc, #180]	; (ba810 <_strtod_l+0x960>)
   ba75c:	403b      	ands	r3, r7
   ba75e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba766:	d819      	bhi.n	ba79c <_strtod_l+0x8ec>
   ba768:	0d1b      	lsrs	r3, r3, #20
   ba76a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba76e:	fa02 f303 	lsl.w	r3, r2, r3
   ba772:	4299      	cmp	r1, r3
   ba774:	d117      	bne.n	ba7a6 <_strtod_l+0x8f6>
   ba776:	4b29      	ldr	r3, [pc, #164]	; (ba81c <_strtod_l+0x96c>)
   ba778:	429f      	cmp	r7, r3
   ba77a:	d102      	bne.n	ba782 <_strtod_l+0x8d2>
   ba77c:	3101      	adds	r1, #1
   ba77e:	f43f addf 	beq.w	ba340 <_strtod_l+0x490>
   ba782:	4b23      	ldr	r3, [pc, #140]	; (ba810 <_strtod_l+0x960>)
   ba784:	403b      	ands	r3, r7
   ba786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba78a:	f04f 0a00 	mov.w	sl, #0
   ba78e:	9b04      	ldr	r3, [sp, #16]
   ba790:	2b00      	cmp	r3, #0
   ba792:	d1a4      	bne.n	ba6de <_strtod_l+0x82e>
   ba794:	e5de      	b.n	ba354 <_strtod_l+0x4a4>
   ba796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba79a:	e7ea      	b.n	ba772 <_strtod_l+0x8c2>
   ba79c:	4613      	mov	r3, r2
   ba79e:	e7e8      	b.n	ba772 <_strtod_l+0x8c2>
   ba7a0:	ea53 030a 	orrs.w	r3, r3, sl
   ba7a4:	d08c      	beq.n	ba6c0 <_strtod_l+0x810>
   ba7a6:	9b08      	ldr	r3, [sp, #32]
   ba7a8:	b1db      	cbz	r3, ba7e2 <_strtod_l+0x932>
   ba7aa:	423b      	tst	r3, r7
   ba7ac:	d0ef      	beq.n	ba78e <_strtod_l+0x8de>
   ba7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba7b0:	9a04      	ldr	r2, [sp, #16]
   ba7b2:	4650      	mov	r0, sl
   ba7b4:	4659      	mov	r1, fp
   ba7b6:	b1c3      	cbz	r3, ba7ea <_strtod_l+0x93a>
   ba7b8:	f7ff fb5d 	bl	b9e76 <sulp>
   ba7bc:	4602      	mov	r2, r0
   ba7be:	460b      	mov	r3, r1
   ba7c0:	ec51 0b18 	vmov	r0, r1, d8
   ba7c4:	f7f9 fc32 	bl	b402c <__adddf3>
   ba7c8:	4682      	mov	sl, r0
   ba7ca:	468b      	mov	fp, r1
   ba7cc:	e7df      	b.n	ba78e <_strtod_l+0x8de>
   ba7ce:	4013      	ands	r3, r2
   ba7d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba7d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba7d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba7dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba7e0:	e7d5      	b.n	ba78e <_strtod_l+0x8de>
   ba7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba7e4:	ea13 0f0a 	tst.w	r3, sl
   ba7e8:	e7e0      	b.n	ba7ac <_strtod_l+0x8fc>
   ba7ea:	f7ff fb44 	bl	b9e76 <sulp>
   ba7ee:	4602      	mov	r2, r0
   ba7f0:	460b      	mov	r3, r1
   ba7f2:	ec51 0b18 	vmov	r0, r1, d8
   ba7f6:	f7f9 fc17 	bl	b4028 <__aeabi_dsub>
   ba7fa:	2200      	movs	r2, #0
   ba7fc:	2300      	movs	r3, #0
   ba7fe:	4682      	mov	sl, r0
   ba800:	468b      	mov	fp, r1
   ba802:	f7fa f831 	bl	b4868 <__aeabi_dcmpeq>
   ba806:	2800      	cmp	r0, #0
   ba808:	d0c1      	beq.n	ba78e <_strtod_l+0x8de>
   ba80a:	e611      	b.n	ba430 <_strtod_l+0x580>
   ba80c:	fffffc02 	.word	0xfffffc02
   ba810:	7ff00000 	.word	0x7ff00000
   ba814:	39500000 	.word	0x39500000
   ba818:	000fffff 	.word	0x000fffff
   ba81c:	7fefffff 	.word	0x7fefffff
   ba820:	000bd2c0 	.word	0x000bd2c0
   ba824:	4631      	mov	r1, r6
   ba826:	4628      	mov	r0, r5
   ba828:	f001 fa12 	bl	bbc50 <__ratio>
   ba82c:	ec59 8b10 	vmov	r8, r9, d0
   ba830:	ee10 0a10 	vmov	r0, s0
   ba834:	2200      	movs	r2, #0
   ba836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba83a:	4649      	mov	r1, r9
   ba83c:	f7fa f828 	bl	b4890 <__aeabi_dcmple>
   ba840:	2800      	cmp	r0, #0
   ba842:	d07a      	beq.n	ba93a <_strtod_l+0xa8a>
   ba844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba846:	2b00      	cmp	r3, #0
   ba848:	d04a      	beq.n	ba8e0 <_strtod_l+0xa30>
   ba84a:	4b95      	ldr	r3, [pc, #596]	; (baaa0 <_strtod_l+0xbf0>)
   ba84c:	2200      	movs	r2, #0
   ba84e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba852:	f8df 924c 	ldr.w	r9, [pc, #588]	; baaa0 <_strtod_l+0xbf0>
   ba856:	f04f 0800 	mov.w	r8, #0
   ba85a:	4b92      	ldr	r3, [pc, #584]	; (baaa4 <_strtod_l+0xbf4>)
   ba85c:	403b      	ands	r3, r7
   ba85e:	930d      	str	r3, [sp, #52]	; 0x34
   ba860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba862:	4b91      	ldr	r3, [pc, #580]	; (baaa8 <_strtod_l+0xbf8>)
   ba864:	429a      	cmp	r2, r3
   ba866:	f040 80b0 	bne.w	ba9ca <_strtod_l+0xb1a>
   ba86a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba86e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba872:	ec4b ab10 	vmov	d0, sl, fp
   ba876:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba87a:	f001 f911 	bl	bbaa0 <__ulp>
   ba87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba882:	ec53 2b10 	vmov	r2, r3, d0
   ba886:	f7f9 fd87 	bl	b4398 <__aeabi_dmul>
   ba88a:	4652      	mov	r2, sl
   ba88c:	465b      	mov	r3, fp
   ba88e:	f7f9 fbcd 	bl	b402c <__adddf3>
   ba892:	460b      	mov	r3, r1
   ba894:	4983      	ldr	r1, [pc, #524]	; (baaa4 <_strtod_l+0xbf4>)
   ba896:	4a85      	ldr	r2, [pc, #532]	; (baaac <_strtod_l+0xbfc>)
   ba898:	4019      	ands	r1, r3
   ba89a:	4291      	cmp	r1, r2
   ba89c:	4682      	mov	sl, r0
   ba89e:	d960      	bls.n	ba962 <_strtod_l+0xab2>
   ba8a0:	ee18 3a90 	vmov	r3, s17
   ba8a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba8a8:	4293      	cmp	r3, r2
   ba8aa:	d104      	bne.n	ba8b6 <_strtod_l+0xa06>
   ba8ac:	ee18 3a10 	vmov	r3, s16
   ba8b0:	3301      	adds	r3, #1
   ba8b2:	f43f ad45 	beq.w	ba340 <_strtod_l+0x490>
   ba8b6:	f8df b200 	ldr.w	fp, [pc, #512]	; baab8 <_strtod_l+0xc08>
   ba8ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba8be:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	f000 fdbb 	bl	bb43c <_Bfree>
   ba8c6:	9905      	ldr	r1, [sp, #20]
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	f000 fdb7 	bl	bb43c <_Bfree>
   ba8ce:	4631      	mov	r1, r6
   ba8d0:	4620      	mov	r0, r4
   ba8d2:	f000 fdb3 	bl	bb43c <_Bfree>
   ba8d6:	4629      	mov	r1, r5
   ba8d8:	4620      	mov	r0, r4
   ba8da:	f000 fdaf 	bl	bb43c <_Bfree>
   ba8de:	e61a      	b.n	ba516 <_strtod_l+0x666>
   ba8e0:	f1ba 0f00 	cmp.w	sl, #0
   ba8e4:	d11b      	bne.n	ba91e <_strtod_l+0xa6e>
   ba8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba8ea:	b9f3      	cbnz	r3, ba92a <_strtod_l+0xa7a>
   ba8ec:	4b6c      	ldr	r3, [pc, #432]	; (baaa0 <_strtod_l+0xbf0>)
   ba8ee:	2200      	movs	r2, #0
   ba8f0:	4640      	mov	r0, r8
   ba8f2:	4649      	mov	r1, r9
   ba8f4:	f7f9 ffc2 	bl	b487c <__aeabi_dcmplt>
   ba8f8:	b9d0      	cbnz	r0, ba930 <_strtod_l+0xa80>
   ba8fa:	4640      	mov	r0, r8
   ba8fc:	4649      	mov	r1, r9
   ba8fe:	4b6c      	ldr	r3, [pc, #432]	; (baab0 <_strtod_l+0xc00>)
   ba900:	2200      	movs	r2, #0
   ba902:	f7f9 fd49 	bl	b4398 <__aeabi_dmul>
   ba906:	4680      	mov	r8, r0
   ba908:	4689      	mov	r9, r1
   ba90a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba90e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba912:	9315      	str	r3, [sp, #84]	; 0x54
   ba914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba918:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba91c:	e79d      	b.n	ba85a <_strtod_l+0x9aa>
   ba91e:	f1ba 0f01 	cmp.w	sl, #1
   ba922:	d102      	bne.n	ba92a <_strtod_l+0xa7a>
   ba924:	2f00      	cmp	r7, #0
   ba926:	f43f ad83 	beq.w	ba430 <_strtod_l+0x580>
   ba92a:	4b62      	ldr	r3, [pc, #392]	; (baab4 <_strtod_l+0xc04>)
   ba92c:	2200      	movs	r2, #0
   ba92e:	e78e      	b.n	ba84e <_strtod_l+0x99e>
   ba930:	f8df 917c 	ldr.w	r9, [pc, #380]	; baab0 <_strtod_l+0xc00>
   ba934:	f04f 0800 	mov.w	r8, #0
   ba938:	e7e7      	b.n	ba90a <_strtod_l+0xa5a>
   ba93a:	4b5d      	ldr	r3, [pc, #372]	; (baab0 <_strtod_l+0xc00>)
   ba93c:	4640      	mov	r0, r8
   ba93e:	4649      	mov	r1, r9
   ba940:	2200      	movs	r2, #0
   ba942:	f7f9 fd29 	bl	b4398 <__aeabi_dmul>
   ba946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba948:	4680      	mov	r8, r0
   ba94a:	4689      	mov	r9, r1
   ba94c:	b933      	cbnz	r3, ba95c <_strtod_l+0xaac>
   ba94e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba952:	900e      	str	r0, [sp, #56]	; 0x38
   ba954:	930f      	str	r3, [sp, #60]	; 0x3c
   ba956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba95a:	e7dd      	b.n	ba918 <_strtod_l+0xa68>
   ba95c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba960:	e7f9      	b.n	ba956 <_strtod_l+0xaa6>
   ba962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba966:	9b04      	ldr	r3, [sp, #16]
   ba968:	2b00      	cmp	r3, #0
   ba96a:	d1a8      	bne.n	ba8be <_strtod_l+0xa0e>
   ba96c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba972:	0d1b      	lsrs	r3, r3, #20
   ba974:	051b      	lsls	r3, r3, #20
   ba976:	429a      	cmp	r2, r3
   ba978:	d1a1      	bne.n	ba8be <_strtod_l+0xa0e>
   ba97a:	4640      	mov	r0, r8
   ba97c:	4649      	mov	r1, r9
   ba97e:	f7fa f883 	bl	b4a88 <__aeabi_d2lz>
   ba982:	f7f9 fcdb 	bl	b433c <__aeabi_l2d>
   ba986:	4602      	mov	r2, r0
   ba988:	460b      	mov	r3, r1
   ba98a:	4640      	mov	r0, r8
   ba98c:	4649      	mov	r1, r9
   ba98e:	f7f9 fb4b 	bl	b4028 <__aeabi_dsub>
   ba992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba994:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba998:	ea43 030a 	orr.w	r3, r3, sl
   ba99c:	4313      	orrs	r3, r2
   ba99e:	4680      	mov	r8, r0
   ba9a0:	4689      	mov	r9, r1
   ba9a2:	d055      	beq.n	baa50 <_strtod_l+0xba0>
   ba9a4:	a336      	add	r3, pc, #216	; (adr r3, baa80 <_strtod_l+0xbd0>)
   ba9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9aa:	f7f9 ff67 	bl	b487c <__aeabi_dcmplt>
   ba9ae:	2800      	cmp	r0, #0
   ba9b0:	f47f acd0 	bne.w	ba354 <_strtod_l+0x4a4>
   ba9b4:	a334      	add	r3, pc, #208	; (adr r3, baa88 <_strtod_l+0xbd8>)
   ba9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9ba:	4640      	mov	r0, r8
   ba9bc:	4649      	mov	r1, r9
   ba9be:	f7f9 ff7b 	bl	b48b8 <__aeabi_dcmpgt>
   ba9c2:	2800      	cmp	r0, #0
   ba9c4:	f43f af7b 	beq.w	ba8be <_strtod_l+0xa0e>
   ba9c8:	e4c4      	b.n	ba354 <_strtod_l+0x4a4>
   ba9ca:	9b04      	ldr	r3, [sp, #16]
   ba9cc:	b333      	cbz	r3, baa1c <_strtod_l+0xb6c>
   ba9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba9d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba9d4:	d822      	bhi.n	baa1c <_strtod_l+0xb6c>
   ba9d6:	a32e      	add	r3, pc, #184	; (adr r3, baa90 <_strtod_l+0xbe0>)
   ba9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9dc:	4640      	mov	r0, r8
   ba9de:	4649      	mov	r1, r9
   ba9e0:	f7f9 ff56 	bl	b4890 <__aeabi_dcmple>
   ba9e4:	b1a0      	cbz	r0, baa10 <_strtod_l+0xb60>
   ba9e6:	4649      	mov	r1, r9
   ba9e8:	4640      	mov	r0, r8
   ba9ea:	f7f9 ffad 	bl	b4948 <__aeabi_d2uiz>
   ba9ee:	2801      	cmp	r0, #1
   ba9f0:	bf38      	it	cc
   ba9f2:	2001      	movcc	r0, #1
   ba9f4:	f7f9 fc56 	bl	b42a4 <__aeabi_ui2d>
   ba9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba9fa:	4680      	mov	r8, r0
   ba9fc:	4689      	mov	r9, r1
   ba9fe:	bb23      	cbnz	r3, baa4a <_strtod_l+0xb9a>
   baa00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baa04:	9010      	str	r0, [sp, #64]	; 0x40
   baa06:	9311      	str	r3, [sp, #68]	; 0x44
   baa08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   baa0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baa12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baa14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   baa18:	1a9b      	subs	r3, r3, r2
   baa1a:	9309      	str	r3, [sp, #36]	; 0x24
   baa1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baa20:	eeb0 0a48 	vmov.f32	s0, s16
   baa24:	eef0 0a68 	vmov.f32	s1, s17
   baa28:	e9cd 0108 	strd	r0, r1, [sp, #32]
   baa2c:	f001 f838 	bl	bbaa0 <__ulp>
   baa30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baa34:	ec53 2b10 	vmov	r2, r3, d0
   baa38:	f7f9 fcae 	bl	b4398 <__aeabi_dmul>
   baa3c:	ec53 2b18 	vmov	r2, r3, d8
   baa40:	f7f9 faf4 	bl	b402c <__adddf3>
   baa44:	4682      	mov	sl, r0
   baa46:	468b      	mov	fp, r1
   baa48:	e78d      	b.n	ba966 <_strtod_l+0xab6>
   baa4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   baa4e:	e7db      	b.n	baa08 <_strtod_l+0xb58>
   baa50:	a311      	add	r3, pc, #68	; (adr r3, baa98 <_strtod_l+0xbe8>)
   baa52:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa56:	f7f9 ff11 	bl	b487c <__aeabi_dcmplt>
   baa5a:	e7b2      	b.n	ba9c2 <_strtod_l+0xb12>
   baa5c:	2300      	movs	r3, #0
   baa5e:	930a      	str	r3, [sp, #40]	; 0x28
   baa60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   baa62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baa64:	6013      	str	r3, [r2, #0]
   baa66:	f7ff ba6b 	b.w	b9f40 <_strtod_l+0x90>
   baa6a:	2a65      	cmp	r2, #101	; 0x65
   baa6c:	f43f ab5f 	beq.w	ba12e <_strtod_l+0x27e>
   baa70:	2a45      	cmp	r2, #69	; 0x45
   baa72:	f43f ab5c 	beq.w	ba12e <_strtod_l+0x27e>
   baa76:	2301      	movs	r3, #1
   baa78:	f7ff bb94 	b.w	ba1a4 <_strtod_l+0x2f4>
   baa7c:	f3af 8000 	nop.w
   baa80:	94a03595 	.word	0x94a03595
   baa84:	3fdfffff 	.word	0x3fdfffff
   baa88:	35afe535 	.word	0x35afe535
   baa8c:	3fe00000 	.word	0x3fe00000
   baa90:	ffc00000 	.word	0xffc00000
   baa94:	41dfffff 	.word	0x41dfffff
   baa98:	94a03595 	.word	0x94a03595
   baa9c:	3fcfffff 	.word	0x3fcfffff
   baaa0:	3ff00000 	.word	0x3ff00000
   baaa4:	7ff00000 	.word	0x7ff00000
   baaa8:	7fe00000 	.word	0x7fe00000
   baaac:	7c9fffff 	.word	0x7c9fffff
   baab0:	3fe00000 	.word	0x3fe00000
   baab4:	bff00000 	.word	0xbff00000
   baab8:	7fefffff 	.word	0x7fefffff

000baabc <strtod>:
   baabc:	460a      	mov	r2, r1
   baabe:	4601      	mov	r1, r0
   baac0:	4802      	ldr	r0, [pc, #8]	; (baacc <strtod+0x10>)
   baac2:	4b03      	ldr	r3, [pc, #12]	; (baad0 <strtod+0x14>)
   baac4:	6800      	ldr	r0, [r0, #0]
   baac6:	f7ff b9f3 	b.w	b9eb0 <_strtod_l>
   baaca:	bf00      	nop
   baacc:	2003e318 	.word	0x2003e318
   baad0:	2003e384 	.word	0x2003e384

000baad4 <_strtol_l.constprop.0>:
   baad4:	2b01      	cmp	r3, #1
   baad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baada:	d001      	beq.n	baae0 <_strtol_l.constprop.0+0xc>
   baadc:	2b24      	cmp	r3, #36	; 0x24
   baade:	d906      	bls.n	baaee <_strtol_l.constprop.0+0x1a>
   baae0:	f7fd fd3a 	bl	b8558 <__errno>
   baae4:	2316      	movs	r3, #22
   baae6:	6003      	str	r3, [r0, #0]
   baae8:	2000      	movs	r0, #0
   baaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baaee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; babd4 <_strtol_l.constprop.0+0x100>
   baaf2:	460d      	mov	r5, r1
   baaf4:	462e      	mov	r6, r5
   baaf6:	f815 4b01 	ldrb.w	r4, [r5], #1
   baafa:	f814 700c 	ldrb.w	r7, [r4, ip]
   baafe:	f017 0708 	ands.w	r7, r7, #8
   bab02:	d1f7      	bne.n	baaf4 <_strtol_l.constprop.0+0x20>
   bab04:	2c2d      	cmp	r4, #45	; 0x2d
   bab06:	d132      	bne.n	bab6e <_strtol_l.constprop.0+0x9a>
   bab08:	782c      	ldrb	r4, [r5, #0]
   bab0a:	2701      	movs	r7, #1
   bab0c:	1cb5      	adds	r5, r6, #2
   bab0e:	2b00      	cmp	r3, #0
   bab10:	d05b      	beq.n	babca <_strtol_l.constprop.0+0xf6>
   bab12:	2b10      	cmp	r3, #16
   bab14:	d109      	bne.n	bab2a <_strtol_l.constprop.0+0x56>
   bab16:	2c30      	cmp	r4, #48	; 0x30
   bab18:	d107      	bne.n	bab2a <_strtol_l.constprop.0+0x56>
   bab1a:	782c      	ldrb	r4, [r5, #0]
   bab1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bab20:	2c58      	cmp	r4, #88	; 0x58
   bab22:	d14d      	bne.n	babc0 <_strtol_l.constprop.0+0xec>
   bab24:	786c      	ldrb	r4, [r5, #1]
   bab26:	2310      	movs	r3, #16
   bab28:	3502      	adds	r5, #2
   bab2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bab2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bab32:	f04f 0c00 	mov.w	ip, #0
   bab36:	fbb8 f9f3 	udiv	r9, r8, r3
   bab3a:	4666      	mov	r6, ip
   bab3c:	fb03 8a19 	mls	sl, r3, r9, r8
   bab40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bab44:	f1be 0f09 	cmp.w	lr, #9
   bab48:	d816      	bhi.n	bab78 <_strtol_l.constprop.0+0xa4>
   bab4a:	4674      	mov	r4, lr
   bab4c:	42a3      	cmp	r3, r4
   bab4e:	dd24      	ble.n	bab9a <_strtol_l.constprop.0+0xc6>
   bab50:	f1bc 0f00 	cmp.w	ip, #0
   bab54:	db1e      	blt.n	bab94 <_strtol_l.constprop.0+0xc0>
   bab56:	45b1      	cmp	r9, r6
   bab58:	d31c      	bcc.n	bab94 <_strtol_l.constprop.0+0xc0>
   bab5a:	d101      	bne.n	bab60 <_strtol_l.constprop.0+0x8c>
   bab5c:	45a2      	cmp	sl, r4
   bab5e:	db19      	blt.n	bab94 <_strtol_l.constprop.0+0xc0>
   bab60:	fb06 4603 	mla	r6, r6, r3, r4
   bab64:	f04f 0c01 	mov.w	ip, #1
   bab68:	f815 4b01 	ldrb.w	r4, [r5], #1
   bab6c:	e7e8      	b.n	bab40 <_strtol_l.constprop.0+0x6c>
   bab6e:	2c2b      	cmp	r4, #43	; 0x2b
   bab70:	bf04      	itt	eq
   bab72:	782c      	ldrbeq	r4, [r5, #0]
   bab74:	1cb5      	addeq	r5, r6, #2
   bab76:	e7ca      	b.n	bab0e <_strtol_l.constprop.0+0x3a>
   bab78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bab7c:	f1be 0f19 	cmp.w	lr, #25
   bab80:	d801      	bhi.n	bab86 <_strtol_l.constprop.0+0xb2>
   bab82:	3c37      	subs	r4, #55	; 0x37
   bab84:	e7e2      	b.n	bab4c <_strtol_l.constprop.0+0x78>
   bab86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bab8a:	f1be 0f19 	cmp.w	lr, #25
   bab8e:	d804      	bhi.n	bab9a <_strtol_l.constprop.0+0xc6>
   bab90:	3c57      	subs	r4, #87	; 0x57
   bab92:	e7db      	b.n	bab4c <_strtol_l.constprop.0+0x78>
   bab94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bab98:	e7e6      	b.n	bab68 <_strtol_l.constprop.0+0x94>
   bab9a:	f1bc 0f00 	cmp.w	ip, #0
   bab9e:	da05      	bge.n	babac <_strtol_l.constprop.0+0xd8>
   baba0:	2322      	movs	r3, #34	; 0x22
   baba2:	6003      	str	r3, [r0, #0]
   baba4:	4646      	mov	r6, r8
   baba6:	b942      	cbnz	r2, babba <_strtol_l.constprop.0+0xe6>
   baba8:	4630      	mov	r0, r6
   babaa:	e79e      	b.n	baaea <_strtol_l.constprop.0+0x16>
   babac:	b107      	cbz	r7, babb0 <_strtol_l.constprop.0+0xdc>
   babae:	4276      	negs	r6, r6
   babb0:	2a00      	cmp	r2, #0
   babb2:	d0f9      	beq.n	baba8 <_strtol_l.constprop.0+0xd4>
   babb4:	f1bc 0f00 	cmp.w	ip, #0
   babb8:	d000      	beq.n	babbc <_strtol_l.constprop.0+0xe8>
   babba:	1e69      	subs	r1, r5, #1
   babbc:	6011      	str	r1, [r2, #0]
   babbe:	e7f3      	b.n	baba8 <_strtol_l.constprop.0+0xd4>
   babc0:	2430      	movs	r4, #48	; 0x30
   babc2:	2b00      	cmp	r3, #0
   babc4:	d1b1      	bne.n	bab2a <_strtol_l.constprop.0+0x56>
   babc6:	2308      	movs	r3, #8
   babc8:	e7af      	b.n	bab2a <_strtol_l.constprop.0+0x56>
   babca:	2c30      	cmp	r4, #48	; 0x30
   babcc:	d0a5      	beq.n	bab1a <_strtol_l.constprop.0+0x46>
   babce:	230a      	movs	r3, #10
   babd0:	e7ab      	b.n	bab2a <_strtol_l.constprop.0+0x56>
   babd2:	bf00      	nop
   babd4:	000bd2e9 	.word	0x000bd2e9

000babd8 <strtol>:
   babd8:	4613      	mov	r3, r2
   babda:	460a      	mov	r2, r1
   babdc:	4601      	mov	r1, r0
   babde:	4802      	ldr	r0, [pc, #8]	; (babe8 <strtol+0x10>)
   babe0:	6800      	ldr	r0, [r0, #0]
   babe2:	f7ff bf77 	b.w	baad4 <_strtol_l.constprop.0>
   babe6:	bf00      	nop
   babe8:	2003e318 	.word	0x2003e318

000babec <__register_exitproc>:
   babec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   babf0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bacac <__register_exitproc+0xc0>
   babf4:	4606      	mov	r6, r0
   babf6:	f8d8 0000 	ldr.w	r0, [r8]
   babfa:	461f      	mov	r7, r3
   babfc:	460d      	mov	r5, r1
   babfe:	4691      	mov	r9, r2
   bac00:	f000 fbc6 	bl	bb390 <__retarget_lock_acquire_recursive>
   bac04:	4b25      	ldr	r3, [pc, #148]	; (bac9c <__register_exitproc+0xb0>)
   bac06:	681c      	ldr	r4, [r3, #0]
   bac08:	b934      	cbnz	r4, bac18 <__register_exitproc+0x2c>
   bac0a:	4c25      	ldr	r4, [pc, #148]	; (baca0 <__register_exitproc+0xb4>)
   bac0c:	601c      	str	r4, [r3, #0]
   bac0e:	4b25      	ldr	r3, [pc, #148]	; (baca4 <__register_exitproc+0xb8>)
   bac10:	b113      	cbz	r3, bac18 <__register_exitproc+0x2c>
   bac12:	681b      	ldr	r3, [r3, #0]
   bac14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bac18:	6863      	ldr	r3, [r4, #4]
   bac1a:	2b1f      	cmp	r3, #31
   bac1c:	dd07      	ble.n	bac2e <__register_exitproc+0x42>
   bac1e:	f8d8 0000 	ldr.w	r0, [r8]
   bac22:	f000 fbb7 	bl	bb394 <__retarget_lock_release_recursive>
   bac26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bac2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bac2e:	b34e      	cbz	r6, bac84 <__register_exitproc+0x98>
   bac30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bac34:	b988      	cbnz	r0, bac5a <__register_exitproc+0x6e>
   bac36:	4b1c      	ldr	r3, [pc, #112]	; (baca8 <__register_exitproc+0xbc>)
   bac38:	b923      	cbnz	r3, bac44 <__register_exitproc+0x58>
   bac3a:	f8d8 0000 	ldr.w	r0, [r8]
   bac3e:	f000 fba8 	bl	bb392 <__retarget_lock_release>
   bac42:	e7f0      	b.n	bac26 <__register_exitproc+0x3a>
   bac44:	f44f 7084 	mov.w	r0, #264	; 0x108
   bac48:	f7fd fc56 	bl	b84f8 <malloc>
   bac4c:	2800      	cmp	r0, #0
   bac4e:	d0f4      	beq.n	bac3a <__register_exitproc+0x4e>
   bac50:	2300      	movs	r3, #0
   bac52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bac56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bac5a:	6863      	ldr	r3, [r4, #4]
   bac5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bac60:	2201      	movs	r2, #1
   bac62:	409a      	lsls	r2, r3
   bac64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bac68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bac6c:	4313      	orrs	r3, r2
   bac6e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bac72:	2e02      	cmp	r6, #2
   bac74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bac78:	bf02      	ittt	eq
   bac7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bac7e:	4313      	orreq	r3, r2
   bac80:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bac84:	6863      	ldr	r3, [r4, #4]
   bac86:	f8d8 0000 	ldr.w	r0, [r8]
   bac8a:	1c5a      	adds	r2, r3, #1
   bac8c:	3302      	adds	r3, #2
   bac8e:	6062      	str	r2, [r4, #4]
   bac90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bac94:	f000 fb7e 	bl	bb394 <__retarget_lock_release_recursive>
   bac98:	2000      	movs	r0, #0
   bac9a:	e7c6      	b.n	bac2a <__register_exitproc+0x3e>
   bac9c:	2003e7e8 	.word	0x2003e7e8
   baca0:	2003e75c 	.word	0x2003e75c
   baca4:	00000000 	.word	0x00000000
   baca8:	000b84f9 	.word	0x000b84f9
   bacac:	2003e37c 	.word	0x2003e37c

000bacb0 <rshift>:
   bacb0:	6903      	ldr	r3, [r0, #16]
   bacb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bacb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bacba:	ea4f 1261 	mov.w	r2, r1, asr #5
   bacbe:	f100 0414 	add.w	r4, r0, #20
   bacc2:	dd45      	ble.n	bad50 <rshift+0xa0>
   bacc4:	f011 011f 	ands.w	r1, r1, #31
   bacc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   baccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bacd0:	d10c      	bne.n	bacec <rshift+0x3c>
   bacd2:	f100 0710 	add.w	r7, r0, #16
   bacd6:	4629      	mov	r1, r5
   bacd8:	42b1      	cmp	r1, r6
   bacda:	d334      	bcc.n	bad46 <rshift+0x96>
   bacdc:	1a9b      	subs	r3, r3, r2
   bacde:	009b      	lsls	r3, r3, #2
   bace0:	1eea      	subs	r2, r5, #3
   bace2:	4296      	cmp	r6, r2
   bace4:	bf38      	it	cc
   bace6:	2300      	movcc	r3, #0
   bace8:	4423      	add	r3, r4
   bacea:	e015      	b.n	bad18 <rshift+0x68>
   bacec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bacf0:	f1c1 0820 	rsb	r8, r1, #32
   bacf4:	40cf      	lsrs	r7, r1
   bacf6:	f105 0e04 	add.w	lr, r5, #4
   bacfa:	46a1      	mov	r9, r4
   bacfc:	4576      	cmp	r6, lr
   bacfe:	46f4      	mov	ip, lr
   bad00:	d815      	bhi.n	bad2e <rshift+0x7e>
   bad02:	1a9a      	subs	r2, r3, r2
   bad04:	0092      	lsls	r2, r2, #2
   bad06:	3a04      	subs	r2, #4
   bad08:	3501      	adds	r5, #1
   bad0a:	42ae      	cmp	r6, r5
   bad0c:	bf38      	it	cc
   bad0e:	2200      	movcc	r2, #0
   bad10:	18a3      	adds	r3, r4, r2
   bad12:	50a7      	str	r7, [r4, r2]
   bad14:	b107      	cbz	r7, bad18 <rshift+0x68>
   bad16:	3304      	adds	r3, #4
   bad18:	1b1a      	subs	r2, r3, r4
   bad1a:	42a3      	cmp	r3, r4
   bad1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bad20:	bf08      	it	eq
   bad22:	2300      	moveq	r3, #0
   bad24:	6102      	str	r2, [r0, #16]
   bad26:	bf08      	it	eq
   bad28:	6143      	streq	r3, [r0, #20]
   bad2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bad2e:	f8dc c000 	ldr.w	ip, [ip]
   bad32:	fa0c fc08 	lsl.w	ip, ip, r8
   bad36:	ea4c 0707 	orr.w	r7, ip, r7
   bad3a:	f849 7b04 	str.w	r7, [r9], #4
   bad3e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bad42:	40cf      	lsrs	r7, r1
   bad44:	e7da      	b.n	bacfc <rshift+0x4c>
   bad46:	f851 cb04 	ldr.w	ip, [r1], #4
   bad4a:	f847 cf04 	str.w	ip, [r7, #4]!
   bad4e:	e7c3      	b.n	bacd8 <rshift+0x28>
   bad50:	4623      	mov	r3, r4
   bad52:	e7e1      	b.n	bad18 <rshift+0x68>

000bad54 <__hexdig_fun>:
   bad54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bad58:	2b09      	cmp	r3, #9
   bad5a:	d802      	bhi.n	bad62 <__hexdig_fun+0xe>
   bad5c:	3820      	subs	r0, #32
   bad5e:	b2c0      	uxtb	r0, r0
   bad60:	4770      	bx	lr
   bad62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bad66:	2b05      	cmp	r3, #5
   bad68:	d801      	bhi.n	bad6e <__hexdig_fun+0x1a>
   bad6a:	3847      	subs	r0, #71	; 0x47
   bad6c:	e7f7      	b.n	bad5e <__hexdig_fun+0xa>
   bad6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bad72:	2b05      	cmp	r3, #5
   bad74:	d801      	bhi.n	bad7a <__hexdig_fun+0x26>
   bad76:	3827      	subs	r0, #39	; 0x27
   bad78:	e7f1      	b.n	bad5e <__hexdig_fun+0xa>
   bad7a:	2000      	movs	r0, #0
   bad7c:	4770      	bx	lr
	...

000bad80 <__gethex>:
   bad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bad84:	ed2d 8b02 	vpush	{d8}
   bad88:	b089      	sub	sp, #36	; 0x24
   bad8a:	ee08 0a10 	vmov	s16, r0
   bad8e:	9304      	str	r3, [sp, #16]
   bad90:	4bb4      	ldr	r3, [pc, #720]	; (bb064 <__gethex+0x2e4>)
   bad92:	681b      	ldr	r3, [r3, #0]
   bad94:	9301      	str	r3, [sp, #4]
   bad96:	4618      	mov	r0, r3
   bad98:	468b      	mov	fp, r1
   bad9a:	4690      	mov	r8, r2
   bad9c:	f7f9 fe6c 	bl	b4a78 <strlen>
   bada0:	9b01      	ldr	r3, [sp, #4]
   bada2:	f8db 2000 	ldr.w	r2, [fp]
   bada6:	4403      	add	r3, r0
   bada8:	4682      	mov	sl, r0
   badaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   badae:	9305      	str	r3, [sp, #20]
   badb0:	1c93      	adds	r3, r2, #2
   badb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   badb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   badba:	32fe      	adds	r2, #254	; 0xfe
   badbc:	18d1      	adds	r1, r2, r3
   badbe:	461f      	mov	r7, r3
   badc0:	f813 0b01 	ldrb.w	r0, [r3], #1
   badc4:	9100      	str	r1, [sp, #0]
   badc6:	2830      	cmp	r0, #48	; 0x30
   badc8:	d0f8      	beq.n	badbc <__gethex+0x3c>
   badca:	f7ff ffc3 	bl	bad54 <__hexdig_fun>
   badce:	4604      	mov	r4, r0
   badd0:	2800      	cmp	r0, #0
   badd2:	d13a      	bne.n	bae4a <__gethex+0xca>
   badd4:	9901      	ldr	r1, [sp, #4]
   badd6:	4652      	mov	r2, sl
   badd8:	4638      	mov	r0, r7
   badda:	f7ff f825 	bl	b9e28 <strncmp>
   badde:	4605      	mov	r5, r0
   bade0:	2800      	cmp	r0, #0
   bade2:	d168      	bne.n	baeb6 <__gethex+0x136>
   bade4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bade8:	eb07 060a 	add.w	r6, r7, sl
   badec:	f7ff ffb2 	bl	bad54 <__hexdig_fun>
   badf0:	2800      	cmp	r0, #0
   badf2:	d062      	beq.n	baeba <__gethex+0x13a>
   badf4:	4633      	mov	r3, r6
   badf6:	7818      	ldrb	r0, [r3, #0]
   badf8:	2830      	cmp	r0, #48	; 0x30
   badfa:	461f      	mov	r7, r3
   badfc:	f103 0301 	add.w	r3, r3, #1
   bae00:	d0f9      	beq.n	badf6 <__gethex+0x76>
   bae02:	f7ff ffa7 	bl	bad54 <__hexdig_fun>
   bae06:	2301      	movs	r3, #1
   bae08:	fab0 f480 	clz	r4, r0
   bae0c:	0964      	lsrs	r4, r4, #5
   bae0e:	4635      	mov	r5, r6
   bae10:	9300      	str	r3, [sp, #0]
   bae12:	463a      	mov	r2, r7
   bae14:	4616      	mov	r6, r2
   bae16:	3201      	adds	r2, #1
   bae18:	7830      	ldrb	r0, [r6, #0]
   bae1a:	f7ff ff9b 	bl	bad54 <__hexdig_fun>
   bae1e:	2800      	cmp	r0, #0
   bae20:	d1f8      	bne.n	bae14 <__gethex+0x94>
   bae22:	9901      	ldr	r1, [sp, #4]
   bae24:	4652      	mov	r2, sl
   bae26:	4630      	mov	r0, r6
   bae28:	f7fe fffe 	bl	b9e28 <strncmp>
   bae2c:	b980      	cbnz	r0, bae50 <__gethex+0xd0>
   bae2e:	b94d      	cbnz	r5, bae44 <__gethex+0xc4>
   bae30:	eb06 050a 	add.w	r5, r6, sl
   bae34:	462a      	mov	r2, r5
   bae36:	4616      	mov	r6, r2
   bae38:	3201      	adds	r2, #1
   bae3a:	7830      	ldrb	r0, [r6, #0]
   bae3c:	f7ff ff8a 	bl	bad54 <__hexdig_fun>
   bae40:	2800      	cmp	r0, #0
   bae42:	d1f8      	bne.n	bae36 <__gethex+0xb6>
   bae44:	1bad      	subs	r5, r5, r6
   bae46:	00ad      	lsls	r5, r5, #2
   bae48:	e004      	b.n	bae54 <__gethex+0xd4>
   bae4a:	2400      	movs	r4, #0
   bae4c:	4625      	mov	r5, r4
   bae4e:	e7e0      	b.n	bae12 <__gethex+0x92>
   bae50:	2d00      	cmp	r5, #0
   bae52:	d1f7      	bne.n	bae44 <__gethex+0xc4>
   bae54:	7833      	ldrb	r3, [r6, #0]
   bae56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bae5a:	2b50      	cmp	r3, #80	; 0x50
   bae5c:	d13b      	bne.n	baed6 <__gethex+0x156>
   bae5e:	7873      	ldrb	r3, [r6, #1]
   bae60:	2b2b      	cmp	r3, #43	; 0x2b
   bae62:	d02c      	beq.n	baebe <__gethex+0x13e>
   bae64:	2b2d      	cmp	r3, #45	; 0x2d
   bae66:	d02e      	beq.n	baec6 <__gethex+0x146>
   bae68:	1c71      	adds	r1, r6, #1
   bae6a:	f04f 0900 	mov.w	r9, #0
   bae6e:	7808      	ldrb	r0, [r1, #0]
   bae70:	f7ff ff70 	bl	bad54 <__hexdig_fun>
   bae74:	1e43      	subs	r3, r0, #1
   bae76:	b2db      	uxtb	r3, r3
   bae78:	2b18      	cmp	r3, #24
   bae7a:	d82c      	bhi.n	baed6 <__gethex+0x156>
   bae7c:	f1a0 0210 	sub.w	r2, r0, #16
   bae80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bae84:	f7ff ff66 	bl	bad54 <__hexdig_fun>
   bae88:	1e43      	subs	r3, r0, #1
   bae8a:	b2db      	uxtb	r3, r3
   bae8c:	2b18      	cmp	r3, #24
   bae8e:	d91d      	bls.n	baecc <__gethex+0x14c>
   bae90:	f1b9 0f00 	cmp.w	r9, #0
   bae94:	d000      	beq.n	bae98 <__gethex+0x118>
   bae96:	4252      	negs	r2, r2
   bae98:	4415      	add	r5, r2
   bae9a:	f8cb 1000 	str.w	r1, [fp]
   bae9e:	b1e4      	cbz	r4, baeda <__gethex+0x15a>
   baea0:	9b00      	ldr	r3, [sp, #0]
   baea2:	2b00      	cmp	r3, #0
   baea4:	bf14      	ite	ne
   baea6:	2700      	movne	r7, #0
   baea8:	2706      	moveq	r7, #6
   baeaa:	4638      	mov	r0, r7
   baeac:	b009      	add	sp, #36	; 0x24
   baeae:	ecbd 8b02 	vpop	{d8}
   baeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baeb6:	463e      	mov	r6, r7
   baeb8:	4625      	mov	r5, r4
   baeba:	2401      	movs	r4, #1
   baebc:	e7ca      	b.n	bae54 <__gethex+0xd4>
   baebe:	f04f 0900 	mov.w	r9, #0
   baec2:	1cb1      	adds	r1, r6, #2
   baec4:	e7d3      	b.n	bae6e <__gethex+0xee>
   baec6:	f04f 0901 	mov.w	r9, #1
   baeca:	e7fa      	b.n	baec2 <__gethex+0x142>
   baecc:	230a      	movs	r3, #10
   baece:	fb03 0202 	mla	r2, r3, r2, r0
   baed2:	3a10      	subs	r2, #16
   baed4:	e7d4      	b.n	bae80 <__gethex+0x100>
   baed6:	4631      	mov	r1, r6
   baed8:	e7df      	b.n	bae9a <__gethex+0x11a>
   baeda:	1bf3      	subs	r3, r6, r7
   baedc:	3b01      	subs	r3, #1
   baede:	4621      	mov	r1, r4
   baee0:	2b07      	cmp	r3, #7
   baee2:	dc0b      	bgt.n	baefc <__gethex+0x17c>
   baee4:	ee18 0a10 	vmov	r0, s16
   baee8:	f000 fa68 	bl	bb3bc <_Balloc>
   baeec:	4604      	mov	r4, r0
   baeee:	b940      	cbnz	r0, baf02 <__gethex+0x182>
   baef0:	4b5d      	ldr	r3, [pc, #372]	; (bb068 <__gethex+0x2e8>)
   baef2:	4602      	mov	r2, r0
   baef4:	21de      	movs	r1, #222	; 0xde
   baef6:	485d      	ldr	r0, [pc, #372]	; (bb06c <__gethex+0x2ec>)
   baef8:	f7fd fb36 	bl	b8568 <__assert_func>
   baefc:	3101      	adds	r1, #1
   baefe:	105b      	asrs	r3, r3, #1
   baf00:	e7ee      	b.n	baee0 <__gethex+0x160>
   baf02:	f100 0914 	add.w	r9, r0, #20
   baf06:	f04f 0b00 	mov.w	fp, #0
   baf0a:	f1ca 0301 	rsb	r3, sl, #1
   baf0e:	f8cd 9008 	str.w	r9, [sp, #8]
   baf12:	f8cd b000 	str.w	fp, [sp]
   baf16:	9306      	str	r3, [sp, #24]
   baf18:	42b7      	cmp	r7, r6
   baf1a:	d340      	bcc.n	baf9e <__gethex+0x21e>
   baf1c:	9802      	ldr	r0, [sp, #8]
   baf1e:	9b00      	ldr	r3, [sp, #0]
   baf20:	f840 3b04 	str.w	r3, [r0], #4
   baf24:	eba0 0009 	sub.w	r0, r0, r9
   baf28:	1080      	asrs	r0, r0, #2
   baf2a:	0146      	lsls	r6, r0, #5
   baf2c:	6120      	str	r0, [r4, #16]
   baf2e:	4618      	mov	r0, r3
   baf30:	f000 fb36 	bl	bb5a0 <__hi0bits>
   baf34:	1a30      	subs	r0, r6, r0
   baf36:	f8d8 6000 	ldr.w	r6, [r8]
   baf3a:	42b0      	cmp	r0, r6
   baf3c:	dd63      	ble.n	bb006 <__gethex+0x286>
   baf3e:	1b87      	subs	r7, r0, r6
   baf40:	4639      	mov	r1, r7
   baf42:	4620      	mov	r0, r4
   baf44:	f000 feda 	bl	bbcfc <__any_on>
   baf48:	4682      	mov	sl, r0
   baf4a:	b1a8      	cbz	r0, baf78 <__gethex+0x1f8>
   baf4c:	1e7b      	subs	r3, r7, #1
   baf4e:	1159      	asrs	r1, r3, #5
   baf50:	f003 021f 	and.w	r2, r3, #31
   baf54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   baf58:	f04f 0a01 	mov.w	sl, #1
   baf5c:	fa0a f202 	lsl.w	r2, sl, r2
   baf60:	420a      	tst	r2, r1
   baf62:	d009      	beq.n	baf78 <__gethex+0x1f8>
   baf64:	4553      	cmp	r3, sl
   baf66:	dd05      	ble.n	baf74 <__gethex+0x1f4>
   baf68:	1eb9      	subs	r1, r7, #2
   baf6a:	4620      	mov	r0, r4
   baf6c:	f000 fec6 	bl	bbcfc <__any_on>
   baf70:	2800      	cmp	r0, #0
   baf72:	d145      	bne.n	bb000 <__gethex+0x280>
   baf74:	f04f 0a02 	mov.w	sl, #2
   baf78:	4639      	mov	r1, r7
   baf7a:	4620      	mov	r0, r4
   baf7c:	f7ff fe98 	bl	bacb0 <rshift>
   baf80:	443d      	add	r5, r7
   baf82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   baf86:	42ab      	cmp	r3, r5
   baf88:	da4c      	bge.n	bb024 <__gethex+0x2a4>
   baf8a:	ee18 0a10 	vmov	r0, s16
   baf8e:	4621      	mov	r1, r4
   baf90:	f000 fa54 	bl	bb43c <_Bfree>
   baf94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   baf96:	2300      	movs	r3, #0
   baf98:	6013      	str	r3, [r2, #0]
   baf9a:	27a3      	movs	r7, #163	; 0xa3
   baf9c:	e785      	b.n	baeaa <__gethex+0x12a>
   baf9e:	1e73      	subs	r3, r6, #1
   bafa0:	9a05      	ldr	r2, [sp, #20]
   bafa2:	9303      	str	r3, [sp, #12]
   bafa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bafa8:	4293      	cmp	r3, r2
   bafaa:	d019      	beq.n	bafe0 <__gethex+0x260>
   bafac:	f1bb 0f20 	cmp.w	fp, #32
   bafb0:	d107      	bne.n	bafc2 <__gethex+0x242>
   bafb2:	9b02      	ldr	r3, [sp, #8]
   bafb4:	9a00      	ldr	r2, [sp, #0]
   bafb6:	f843 2b04 	str.w	r2, [r3], #4
   bafba:	9302      	str	r3, [sp, #8]
   bafbc:	2300      	movs	r3, #0
   bafbe:	9300      	str	r3, [sp, #0]
   bafc0:	469b      	mov	fp, r3
   bafc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bafc6:	f7ff fec5 	bl	bad54 <__hexdig_fun>
   bafca:	9b00      	ldr	r3, [sp, #0]
   bafcc:	f000 000f 	and.w	r0, r0, #15
   bafd0:	fa00 f00b 	lsl.w	r0, r0, fp
   bafd4:	4303      	orrs	r3, r0
   bafd6:	9300      	str	r3, [sp, #0]
   bafd8:	f10b 0b04 	add.w	fp, fp, #4
   bafdc:	9b03      	ldr	r3, [sp, #12]
   bafde:	e00d      	b.n	baffc <__gethex+0x27c>
   bafe0:	9b03      	ldr	r3, [sp, #12]
   bafe2:	9a06      	ldr	r2, [sp, #24]
   bafe4:	4413      	add	r3, r2
   bafe6:	42bb      	cmp	r3, r7
   bafe8:	d3e0      	bcc.n	bafac <__gethex+0x22c>
   bafea:	4618      	mov	r0, r3
   bafec:	9901      	ldr	r1, [sp, #4]
   bafee:	9307      	str	r3, [sp, #28]
   baff0:	4652      	mov	r2, sl
   baff2:	f7fe ff19 	bl	b9e28 <strncmp>
   baff6:	9b07      	ldr	r3, [sp, #28]
   baff8:	2800      	cmp	r0, #0
   baffa:	d1d7      	bne.n	bafac <__gethex+0x22c>
   baffc:	461e      	mov	r6, r3
   baffe:	e78b      	b.n	baf18 <__gethex+0x198>
   bb000:	f04f 0a03 	mov.w	sl, #3
   bb004:	e7b8      	b.n	baf78 <__gethex+0x1f8>
   bb006:	da0a      	bge.n	bb01e <__gethex+0x29e>
   bb008:	1a37      	subs	r7, r6, r0
   bb00a:	4621      	mov	r1, r4
   bb00c:	ee18 0a10 	vmov	r0, s16
   bb010:	463a      	mov	r2, r7
   bb012:	f000 fc2f 	bl	bb874 <__lshift>
   bb016:	1bed      	subs	r5, r5, r7
   bb018:	4604      	mov	r4, r0
   bb01a:	f100 0914 	add.w	r9, r0, #20
   bb01e:	f04f 0a00 	mov.w	sl, #0
   bb022:	e7ae      	b.n	baf82 <__gethex+0x202>
   bb024:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb028:	42a8      	cmp	r0, r5
   bb02a:	dd72      	ble.n	bb112 <__gethex+0x392>
   bb02c:	1b45      	subs	r5, r0, r5
   bb02e:	42ae      	cmp	r6, r5
   bb030:	dc36      	bgt.n	bb0a0 <__gethex+0x320>
   bb032:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb036:	2b02      	cmp	r3, #2
   bb038:	d02a      	beq.n	bb090 <__gethex+0x310>
   bb03a:	2b03      	cmp	r3, #3
   bb03c:	d02c      	beq.n	bb098 <__gethex+0x318>
   bb03e:	2b01      	cmp	r3, #1
   bb040:	d11c      	bne.n	bb07c <__gethex+0x2fc>
   bb042:	42ae      	cmp	r6, r5
   bb044:	d11a      	bne.n	bb07c <__gethex+0x2fc>
   bb046:	2e01      	cmp	r6, #1
   bb048:	d112      	bne.n	bb070 <__gethex+0x2f0>
   bb04a:	9a04      	ldr	r2, [sp, #16]
   bb04c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb050:	6013      	str	r3, [r2, #0]
   bb052:	2301      	movs	r3, #1
   bb054:	6123      	str	r3, [r4, #16]
   bb056:	f8c9 3000 	str.w	r3, [r9]
   bb05a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb05c:	2762      	movs	r7, #98	; 0x62
   bb05e:	601c      	str	r4, [r3, #0]
   bb060:	e723      	b.n	baeaa <__gethex+0x12a>
   bb062:	bf00      	nop
   bb064:	000bd45c 	.word	0x000bd45c
   bb068:	000bd3e9 	.word	0x000bd3e9
   bb06c:	000bd3fa 	.word	0x000bd3fa
   bb070:	1e71      	subs	r1, r6, #1
   bb072:	4620      	mov	r0, r4
   bb074:	f000 fe42 	bl	bbcfc <__any_on>
   bb078:	2800      	cmp	r0, #0
   bb07a:	d1e6      	bne.n	bb04a <__gethex+0x2ca>
   bb07c:	ee18 0a10 	vmov	r0, s16
   bb080:	4621      	mov	r1, r4
   bb082:	f000 f9db 	bl	bb43c <_Bfree>
   bb086:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb088:	2300      	movs	r3, #0
   bb08a:	6013      	str	r3, [r2, #0]
   bb08c:	2750      	movs	r7, #80	; 0x50
   bb08e:	e70c      	b.n	baeaa <__gethex+0x12a>
   bb090:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb092:	2b00      	cmp	r3, #0
   bb094:	d1f2      	bne.n	bb07c <__gethex+0x2fc>
   bb096:	e7d8      	b.n	bb04a <__gethex+0x2ca>
   bb098:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb09a:	2b00      	cmp	r3, #0
   bb09c:	d1d5      	bne.n	bb04a <__gethex+0x2ca>
   bb09e:	e7ed      	b.n	bb07c <__gethex+0x2fc>
   bb0a0:	1e6f      	subs	r7, r5, #1
   bb0a2:	f1ba 0f00 	cmp.w	sl, #0
   bb0a6:	d131      	bne.n	bb10c <__gethex+0x38c>
   bb0a8:	b127      	cbz	r7, bb0b4 <__gethex+0x334>
   bb0aa:	4639      	mov	r1, r7
   bb0ac:	4620      	mov	r0, r4
   bb0ae:	f000 fe25 	bl	bbcfc <__any_on>
   bb0b2:	4682      	mov	sl, r0
   bb0b4:	117b      	asrs	r3, r7, #5
   bb0b6:	2101      	movs	r1, #1
   bb0b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb0bc:	f007 071f 	and.w	r7, r7, #31
   bb0c0:	fa01 f707 	lsl.w	r7, r1, r7
   bb0c4:	421f      	tst	r7, r3
   bb0c6:	4629      	mov	r1, r5
   bb0c8:	4620      	mov	r0, r4
   bb0ca:	bf18      	it	ne
   bb0cc:	f04a 0a02 	orrne.w	sl, sl, #2
   bb0d0:	1b76      	subs	r6, r6, r5
   bb0d2:	f7ff fded 	bl	bacb0 <rshift>
   bb0d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb0da:	2702      	movs	r7, #2
   bb0dc:	f1ba 0f00 	cmp.w	sl, #0
   bb0e0:	d048      	beq.n	bb174 <__gethex+0x3f4>
   bb0e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb0e6:	2b02      	cmp	r3, #2
   bb0e8:	d015      	beq.n	bb116 <__gethex+0x396>
   bb0ea:	2b03      	cmp	r3, #3
   bb0ec:	d017      	beq.n	bb11e <__gethex+0x39e>
   bb0ee:	2b01      	cmp	r3, #1
   bb0f0:	d109      	bne.n	bb106 <__gethex+0x386>
   bb0f2:	f01a 0f02 	tst.w	sl, #2
   bb0f6:	d006      	beq.n	bb106 <__gethex+0x386>
   bb0f8:	f8d9 0000 	ldr.w	r0, [r9]
   bb0fc:	ea4a 0a00 	orr.w	sl, sl, r0
   bb100:	f01a 0f01 	tst.w	sl, #1
   bb104:	d10e      	bne.n	bb124 <__gethex+0x3a4>
   bb106:	f047 0710 	orr.w	r7, r7, #16
   bb10a:	e033      	b.n	bb174 <__gethex+0x3f4>
   bb10c:	f04f 0a01 	mov.w	sl, #1
   bb110:	e7d0      	b.n	bb0b4 <__gethex+0x334>
   bb112:	2701      	movs	r7, #1
   bb114:	e7e2      	b.n	bb0dc <__gethex+0x35c>
   bb116:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb118:	f1c3 0301 	rsb	r3, r3, #1
   bb11c:	9315      	str	r3, [sp, #84]	; 0x54
   bb11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb120:	2b00      	cmp	r3, #0
   bb122:	d0f0      	beq.n	bb106 <__gethex+0x386>
   bb124:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb128:	f104 0314 	add.w	r3, r4, #20
   bb12c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb130:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb134:	f04f 0c00 	mov.w	ip, #0
   bb138:	4618      	mov	r0, r3
   bb13a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb13e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb142:	d01c      	beq.n	bb17e <__gethex+0x3fe>
   bb144:	3201      	adds	r2, #1
   bb146:	6002      	str	r2, [r0, #0]
   bb148:	2f02      	cmp	r7, #2
   bb14a:	f104 0314 	add.w	r3, r4, #20
   bb14e:	d13f      	bne.n	bb1d0 <__gethex+0x450>
   bb150:	f8d8 2000 	ldr.w	r2, [r8]
   bb154:	3a01      	subs	r2, #1
   bb156:	42b2      	cmp	r2, r6
   bb158:	d10a      	bne.n	bb170 <__gethex+0x3f0>
   bb15a:	1171      	asrs	r1, r6, #5
   bb15c:	2201      	movs	r2, #1
   bb15e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb162:	f006 061f 	and.w	r6, r6, #31
   bb166:	fa02 f606 	lsl.w	r6, r2, r6
   bb16a:	421e      	tst	r6, r3
   bb16c:	bf18      	it	ne
   bb16e:	4617      	movne	r7, r2
   bb170:	f047 0720 	orr.w	r7, r7, #32
   bb174:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb176:	601c      	str	r4, [r3, #0]
   bb178:	9b04      	ldr	r3, [sp, #16]
   bb17a:	601d      	str	r5, [r3, #0]
   bb17c:	e695      	b.n	baeaa <__gethex+0x12a>
   bb17e:	4299      	cmp	r1, r3
   bb180:	f843 cc04 	str.w	ip, [r3, #-4]
   bb184:	d8d8      	bhi.n	bb138 <__gethex+0x3b8>
   bb186:	68a3      	ldr	r3, [r4, #8]
   bb188:	459b      	cmp	fp, r3
   bb18a:	db19      	blt.n	bb1c0 <__gethex+0x440>
   bb18c:	6861      	ldr	r1, [r4, #4]
   bb18e:	ee18 0a10 	vmov	r0, s16
   bb192:	3101      	adds	r1, #1
   bb194:	f000 f912 	bl	bb3bc <_Balloc>
   bb198:	4681      	mov	r9, r0
   bb19a:	b918      	cbnz	r0, bb1a4 <__gethex+0x424>
   bb19c:	4b1a      	ldr	r3, [pc, #104]	; (bb208 <__gethex+0x488>)
   bb19e:	4602      	mov	r2, r0
   bb1a0:	2184      	movs	r1, #132	; 0x84
   bb1a2:	e6a8      	b.n	baef6 <__gethex+0x176>
   bb1a4:	6922      	ldr	r2, [r4, #16]
   bb1a6:	3202      	adds	r2, #2
   bb1a8:	f104 010c 	add.w	r1, r4, #12
   bb1ac:	0092      	lsls	r2, r2, #2
   bb1ae:	300c      	adds	r0, #12
   bb1b0:	f7fe fdf5 	bl	b9d9e <memcpy>
   bb1b4:	4621      	mov	r1, r4
   bb1b6:	ee18 0a10 	vmov	r0, s16
   bb1ba:	f000 f93f 	bl	bb43c <_Bfree>
   bb1be:	464c      	mov	r4, r9
   bb1c0:	6923      	ldr	r3, [r4, #16]
   bb1c2:	1c5a      	adds	r2, r3, #1
   bb1c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb1c8:	6122      	str	r2, [r4, #16]
   bb1ca:	2201      	movs	r2, #1
   bb1cc:	615a      	str	r2, [r3, #20]
   bb1ce:	e7bb      	b.n	bb148 <__gethex+0x3c8>
   bb1d0:	6922      	ldr	r2, [r4, #16]
   bb1d2:	455a      	cmp	r2, fp
   bb1d4:	dd0b      	ble.n	bb1ee <__gethex+0x46e>
   bb1d6:	2101      	movs	r1, #1
   bb1d8:	4620      	mov	r0, r4
   bb1da:	f7ff fd69 	bl	bacb0 <rshift>
   bb1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb1e2:	3501      	adds	r5, #1
   bb1e4:	42ab      	cmp	r3, r5
   bb1e6:	f6ff aed0 	blt.w	baf8a <__gethex+0x20a>
   bb1ea:	2701      	movs	r7, #1
   bb1ec:	e7c0      	b.n	bb170 <__gethex+0x3f0>
   bb1ee:	f016 061f 	ands.w	r6, r6, #31
   bb1f2:	d0fa      	beq.n	bb1ea <__gethex+0x46a>
   bb1f4:	4453      	add	r3, sl
   bb1f6:	f1c6 0620 	rsb	r6, r6, #32
   bb1fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb1fe:	f000 f9cf 	bl	bb5a0 <__hi0bits>
   bb202:	42b0      	cmp	r0, r6
   bb204:	dbe7      	blt.n	bb1d6 <__gethex+0x456>
   bb206:	e7f0      	b.n	bb1ea <__gethex+0x46a>
   bb208:	000bd3e9 	.word	0x000bd3e9

000bb20c <L_shift>:
   bb20c:	f1c2 0208 	rsb	r2, r2, #8
   bb210:	0092      	lsls	r2, r2, #2
   bb212:	b570      	push	{r4, r5, r6, lr}
   bb214:	f1c2 0620 	rsb	r6, r2, #32
   bb218:	6843      	ldr	r3, [r0, #4]
   bb21a:	6804      	ldr	r4, [r0, #0]
   bb21c:	fa03 f506 	lsl.w	r5, r3, r6
   bb220:	432c      	orrs	r4, r5
   bb222:	40d3      	lsrs	r3, r2
   bb224:	6004      	str	r4, [r0, #0]
   bb226:	f840 3f04 	str.w	r3, [r0, #4]!
   bb22a:	4288      	cmp	r0, r1
   bb22c:	d3f4      	bcc.n	bb218 <L_shift+0xc>
   bb22e:	bd70      	pop	{r4, r5, r6, pc}

000bb230 <__match>:
   bb230:	b530      	push	{r4, r5, lr}
   bb232:	6803      	ldr	r3, [r0, #0]
   bb234:	3301      	adds	r3, #1
   bb236:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb23a:	b914      	cbnz	r4, bb242 <__match+0x12>
   bb23c:	6003      	str	r3, [r0, #0]
   bb23e:	2001      	movs	r0, #1
   bb240:	bd30      	pop	{r4, r5, pc}
   bb242:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb246:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb24a:	2d19      	cmp	r5, #25
   bb24c:	bf98      	it	ls
   bb24e:	3220      	addls	r2, #32
   bb250:	42a2      	cmp	r2, r4
   bb252:	d0f0      	beq.n	bb236 <__match+0x6>
   bb254:	2000      	movs	r0, #0
   bb256:	e7f3      	b.n	bb240 <__match+0x10>

000bb258 <__hexnan>:
   bb258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb25c:	680b      	ldr	r3, [r1, #0]
   bb25e:	115e      	asrs	r6, r3, #5
   bb260:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb264:	f013 031f 	ands.w	r3, r3, #31
   bb268:	b087      	sub	sp, #28
   bb26a:	bf18      	it	ne
   bb26c:	3604      	addne	r6, #4
   bb26e:	2500      	movs	r5, #0
   bb270:	1f37      	subs	r7, r6, #4
   bb272:	4690      	mov	r8, r2
   bb274:	6802      	ldr	r2, [r0, #0]
   bb276:	9301      	str	r3, [sp, #4]
   bb278:	4682      	mov	sl, r0
   bb27a:	f846 5c04 	str.w	r5, [r6, #-4]
   bb27e:	46b9      	mov	r9, r7
   bb280:	463c      	mov	r4, r7
   bb282:	9502      	str	r5, [sp, #8]
   bb284:	46ab      	mov	fp, r5
   bb286:	7851      	ldrb	r1, [r2, #1]
   bb288:	1c53      	adds	r3, r2, #1
   bb28a:	9303      	str	r3, [sp, #12]
   bb28c:	b341      	cbz	r1, bb2e0 <__hexnan+0x88>
   bb28e:	4608      	mov	r0, r1
   bb290:	9205      	str	r2, [sp, #20]
   bb292:	9104      	str	r1, [sp, #16]
   bb294:	f7ff fd5e 	bl	bad54 <__hexdig_fun>
   bb298:	2800      	cmp	r0, #0
   bb29a:	d14f      	bne.n	bb33c <__hexnan+0xe4>
   bb29c:	9904      	ldr	r1, [sp, #16]
   bb29e:	9a05      	ldr	r2, [sp, #20]
   bb2a0:	2920      	cmp	r1, #32
   bb2a2:	d818      	bhi.n	bb2d6 <__hexnan+0x7e>
   bb2a4:	9b02      	ldr	r3, [sp, #8]
   bb2a6:	459b      	cmp	fp, r3
   bb2a8:	dd13      	ble.n	bb2d2 <__hexnan+0x7a>
   bb2aa:	454c      	cmp	r4, r9
   bb2ac:	d206      	bcs.n	bb2bc <__hexnan+0x64>
   bb2ae:	2d07      	cmp	r5, #7
   bb2b0:	dc04      	bgt.n	bb2bc <__hexnan+0x64>
   bb2b2:	462a      	mov	r2, r5
   bb2b4:	4649      	mov	r1, r9
   bb2b6:	4620      	mov	r0, r4
   bb2b8:	f7ff ffa8 	bl	bb20c <L_shift>
   bb2bc:	4544      	cmp	r4, r8
   bb2be:	d950      	bls.n	bb362 <__hexnan+0x10a>
   bb2c0:	2300      	movs	r3, #0
   bb2c2:	f1a4 0904 	sub.w	r9, r4, #4
   bb2c6:	f844 3c04 	str.w	r3, [r4, #-4]
   bb2ca:	f8cd b008 	str.w	fp, [sp, #8]
   bb2ce:	464c      	mov	r4, r9
   bb2d0:	461d      	mov	r5, r3
   bb2d2:	9a03      	ldr	r2, [sp, #12]
   bb2d4:	e7d7      	b.n	bb286 <__hexnan+0x2e>
   bb2d6:	2929      	cmp	r1, #41	; 0x29
   bb2d8:	d156      	bne.n	bb388 <__hexnan+0x130>
   bb2da:	3202      	adds	r2, #2
   bb2dc:	f8ca 2000 	str.w	r2, [sl]
   bb2e0:	f1bb 0f00 	cmp.w	fp, #0
   bb2e4:	d050      	beq.n	bb388 <__hexnan+0x130>
   bb2e6:	454c      	cmp	r4, r9
   bb2e8:	d206      	bcs.n	bb2f8 <__hexnan+0xa0>
   bb2ea:	2d07      	cmp	r5, #7
   bb2ec:	dc04      	bgt.n	bb2f8 <__hexnan+0xa0>
   bb2ee:	462a      	mov	r2, r5
   bb2f0:	4649      	mov	r1, r9
   bb2f2:	4620      	mov	r0, r4
   bb2f4:	f7ff ff8a 	bl	bb20c <L_shift>
   bb2f8:	4544      	cmp	r4, r8
   bb2fa:	d934      	bls.n	bb366 <__hexnan+0x10e>
   bb2fc:	f1a8 0204 	sub.w	r2, r8, #4
   bb300:	4623      	mov	r3, r4
   bb302:	f853 1b04 	ldr.w	r1, [r3], #4
   bb306:	f842 1f04 	str.w	r1, [r2, #4]!
   bb30a:	429f      	cmp	r7, r3
   bb30c:	d2f9      	bcs.n	bb302 <__hexnan+0xaa>
   bb30e:	1b3b      	subs	r3, r7, r4
   bb310:	f023 0303 	bic.w	r3, r3, #3
   bb314:	3304      	adds	r3, #4
   bb316:	3401      	adds	r4, #1
   bb318:	3e03      	subs	r6, #3
   bb31a:	42b4      	cmp	r4, r6
   bb31c:	bf88      	it	hi
   bb31e:	2304      	movhi	r3, #4
   bb320:	4443      	add	r3, r8
   bb322:	2200      	movs	r2, #0
   bb324:	f843 2b04 	str.w	r2, [r3], #4
   bb328:	429f      	cmp	r7, r3
   bb32a:	d2fb      	bcs.n	bb324 <__hexnan+0xcc>
   bb32c:	683b      	ldr	r3, [r7, #0]
   bb32e:	b91b      	cbnz	r3, bb338 <__hexnan+0xe0>
   bb330:	4547      	cmp	r7, r8
   bb332:	d127      	bne.n	bb384 <__hexnan+0x12c>
   bb334:	2301      	movs	r3, #1
   bb336:	603b      	str	r3, [r7, #0]
   bb338:	2005      	movs	r0, #5
   bb33a:	e026      	b.n	bb38a <__hexnan+0x132>
   bb33c:	3501      	adds	r5, #1
   bb33e:	2d08      	cmp	r5, #8
   bb340:	f10b 0b01 	add.w	fp, fp, #1
   bb344:	dd06      	ble.n	bb354 <__hexnan+0xfc>
   bb346:	4544      	cmp	r4, r8
   bb348:	d9c3      	bls.n	bb2d2 <__hexnan+0x7a>
   bb34a:	2300      	movs	r3, #0
   bb34c:	f844 3c04 	str.w	r3, [r4, #-4]
   bb350:	2501      	movs	r5, #1
   bb352:	3c04      	subs	r4, #4
   bb354:	6822      	ldr	r2, [r4, #0]
   bb356:	f000 000f 	and.w	r0, r0, #15
   bb35a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb35e:	6022      	str	r2, [r4, #0]
   bb360:	e7b7      	b.n	bb2d2 <__hexnan+0x7a>
   bb362:	2508      	movs	r5, #8
   bb364:	e7b5      	b.n	bb2d2 <__hexnan+0x7a>
   bb366:	9b01      	ldr	r3, [sp, #4]
   bb368:	2b00      	cmp	r3, #0
   bb36a:	d0df      	beq.n	bb32c <__hexnan+0xd4>
   bb36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb370:	f1c3 0320 	rsb	r3, r3, #32
   bb374:	fa22 f303 	lsr.w	r3, r2, r3
   bb378:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb37c:	401a      	ands	r2, r3
   bb37e:	f846 2c04 	str.w	r2, [r6, #-4]
   bb382:	e7d3      	b.n	bb32c <__hexnan+0xd4>
   bb384:	3f04      	subs	r7, #4
   bb386:	e7d1      	b.n	bb32c <__hexnan+0xd4>
   bb388:	2004      	movs	r0, #4
   bb38a:	b007      	add	sp, #28
   bb38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb390 <__retarget_lock_acquire_recursive>:
   bb390:	4770      	bx	lr

000bb392 <__retarget_lock_release>:
   bb392:	4770      	bx	lr

000bb394 <__retarget_lock_release_recursive>:
   bb394:	4770      	bx	lr

000bb396 <__ascii_mbtowc>:
   bb396:	b082      	sub	sp, #8
   bb398:	b901      	cbnz	r1, bb39c <__ascii_mbtowc+0x6>
   bb39a:	a901      	add	r1, sp, #4
   bb39c:	b142      	cbz	r2, bb3b0 <__ascii_mbtowc+0x1a>
   bb39e:	b14b      	cbz	r3, bb3b4 <__ascii_mbtowc+0x1e>
   bb3a0:	7813      	ldrb	r3, [r2, #0]
   bb3a2:	600b      	str	r3, [r1, #0]
   bb3a4:	7812      	ldrb	r2, [r2, #0]
   bb3a6:	1e10      	subs	r0, r2, #0
   bb3a8:	bf18      	it	ne
   bb3aa:	2001      	movne	r0, #1
   bb3ac:	b002      	add	sp, #8
   bb3ae:	4770      	bx	lr
   bb3b0:	4610      	mov	r0, r2
   bb3b2:	e7fb      	b.n	bb3ac <__ascii_mbtowc+0x16>
   bb3b4:	f06f 0001 	mvn.w	r0, #1
   bb3b8:	e7f8      	b.n	bb3ac <__ascii_mbtowc+0x16>
	...

000bb3bc <_Balloc>:
   bb3bc:	b570      	push	{r4, r5, r6, lr}
   bb3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb3c0:	4604      	mov	r4, r0
   bb3c2:	460d      	mov	r5, r1
   bb3c4:	b976      	cbnz	r6, bb3e4 <_Balloc+0x28>
   bb3c6:	2010      	movs	r0, #16
   bb3c8:	f7fd f896 	bl	b84f8 <malloc>
   bb3cc:	4602      	mov	r2, r0
   bb3ce:	6260      	str	r0, [r4, #36]	; 0x24
   bb3d0:	b920      	cbnz	r0, bb3dc <_Balloc+0x20>
   bb3d2:	4b18      	ldr	r3, [pc, #96]	; (bb434 <_Balloc+0x78>)
   bb3d4:	4818      	ldr	r0, [pc, #96]	; (bb438 <_Balloc+0x7c>)
   bb3d6:	2166      	movs	r1, #102	; 0x66
   bb3d8:	f7fd f8c6 	bl	b8568 <__assert_func>
   bb3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb3e0:	6006      	str	r6, [r0, #0]
   bb3e2:	60c6      	str	r6, [r0, #12]
   bb3e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb3e6:	68f3      	ldr	r3, [r6, #12]
   bb3e8:	b183      	cbz	r3, bb40c <_Balloc+0x50>
   bb3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb3ec:	68db      	ldr	r3, [r3, #12]
   bb3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb3f2:	b9b8      	cbnz	r0, bb424 <_Balloc+0x68>
   bb3f4:	2101      	movs	r1, #1
   bb3f6:	fa01 f605 	lsl.w	r6, r1, r5
   bb3fa:	1d72      	adds	r2, r6, #5
   bb3fc:	0092      	lsls	r2, r2, #2
   bb3fe:	4620      	mov	r0, r4
   bb400:	f000 fc9d 	bl	bbd3e <_calloc_r>
   bb404:	b160      	cbz	r0, bb420 <_Balloc+0x64>
   bb406:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb40a:	e00e      	b.n	bb42a <_Balloc+0x6e>
   bb40c:	2221      	movs	r2, #33	; 0x21
   bb40e:	2104      	movs	r1, #4
   bb410:	4620      	mov	r0, r4
   bb412:	f000 fc94 	bl	bbd3e <_calloc_r>
   bb416:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb418:	60f0      	str	r0, [r6, #12]
   bb41a:	68db      	ldr	r3, [r3, #12]
   bb41c:	2b00      	cmp	r3, #0
   bb41e:	d1e4      	bne.n	bb3ea <_Balloc+0x2e>
   bb420:	2000      	movs	r0, #0
   bb422:	bd70      	pop	{r4, r5, r6, pc}
   bb424:	6802      	ldr	r2, [r0, #0]
   bb426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb42a:	2300      	movs	r3, #0
   bb42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb430:	e7f7      	b.n	bb422 <_Balloc+0x66>
   bb432:	bf00      	nop
   bb434:	000bd21d 	.word	0x000bd21d
   bb438:	000bd470 	.word	0x000bd470

000bb43c <_Bfree>:
   bb43c:	b570      	push	{r4, r5, r6, lr}
   bb43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb440:	4605      	mov	r5, r0
   bb442:	460c      	mov	r4, r1
   bb444:	b976      	cbnz	r6, bb464 <_Bfree+0x28>
   bb446:	2010      	movs	r0, #16
   bb448:	f7fd f856 	bl	b84f8 <malloc>
   bb44c:	4602      	mov	r2, r0
   bb44e:	6268      	str	r0, [r5, #36]	; 0x24
   bb450:	b920      	cbnz	r0, bb45c <_Bfree+0x20>
   bb452:	4b09      	ldr	r3, [pc, #36]	; (bb478 <_Bfree+0x3c>)
   bb454:	4809      	ldr	r0, [pc, #36]	; (bb47c <_Bfree+0x40>)
   bb456:	218a      	movs	r1, #138	; 0x8a
   bb458:	f7fd f886 	bl	b8568 <__assert_func>
   bb45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb460:	6006      	str	r6, [r0, #0]
   bb462:	60c6      	str	r6, [r0, #12]
   bb464:	b13c      	cbz	r4, bb476 <_Bfree+0x3a>
   bb466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb468:	6862      	ldr	r2, [r4, #4]
   bb46a:	68db      	ldr	r3, [r3, #12]
   bb46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb470:	6021      	str	r1, [r4, #0]
   bb472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb476:	bd70      	pop	{r4, r5, r6, pc}
   bb478:	000bd21d 	.word	0x000bd21d
   bb47c:	000bd470 	.word	0x000bd470

000bb480 <__multadd>:
   bb480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb484:	690d      	ldr	r5, [r1, #16]
   bb486:	4607      	mov	r7, r0
   bb488:	460c      	mov	r4, r1
   bb48a:	461e      	mov	r6, r3
   bb48c:	f101 0c14 	add.w	ip, r1, #20
   bb490:	2000      	movs	r0, #0
   bb492:	f8dc 3000 	ldr.w	r3, [ip]
   bb496:	b299      	uxth	r1, r3
   bb498:	fb02 6101 	mla	r1, r2, r1, r6
   bb49c:	0c1e      	lsrs	r6, r3, #16
   bb49e:	0c0b      	lsrs	r3, r1, #16
   bb4a0:	fb02 3306 	mla	r3, r2, r6, r3
   bb4a4:	b289      	uxth	r1, r1
   bb4a6:	3001      	adds	r0, #1
   bb4a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bb4ac:	4285      	cmp	r5, r0
   bb4ae:	f84c 1b04 	str.w	r1, [ip], #4
   bb4b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bb4b6:	dcec      	bgt.n	bb492 <__multadd+0x12>
   bb4b8:	b30e      	cbz	r6, bb4fe <__multadd+0x7e>
   bb4ba:	68a3      	ldr	r3, [r4, #8]
   bb4bc:	42ab      	cmp	r3, r5
   bb4be:	dc19      	bgt.n	bb4f4 <__multadd+0x74>
   bb4c0:	6861      	ldr	r1, [r4, #4]
   bb4c2:	4638      	mov	r0, r7
   bb4c4:	3101      	adds	r1, #1
   bb4c6:	f7ff ff79 	bl	bb3bc <_Balloc>
   bb4ca:	4680      	mov	r8, r0
   bb4cc:	b928      	cbnz	r0, bb4da <__multadd+0x5a>
   bb4ce:	4602      	mov	r2, r0
   bb4d0:	4b0c      	ldr	r3, [pc, #48]	; (bb504 <__multadd+0x84>)
   bb4d2:	480d      	ldr	r0, [pc, #52]	; (bb508 <__multadd+0x88>)
   bb4d4:	21b5      	movs	r1, #181	; 0xb5
   bb4d6:	f7fd f847 	bl	b8568 <__assert_func>
   bb4da:	6922      	ldr	r2, [r4, #16]
   bb4dc:	3202      	adds	r2, #2
   bb4de:	f104 010c 	add.w	r1, r4, #12
   bb4e2:	0092      	lsls	r2, r2, #2
   bb4e4:	300c      	adds	r0, #12
   bb4e6:	f7fe fc5a 	bl	b9d9e <memcpy>
   bb4ea:	4621      	mov	r1, r4
   bb4ec:	4638      	mov	r0, r7
   bb4ee:	f7ff ffa5 	bl	bb43c <_Bfree>
   bb4f2:	4644      	mov	r4, r8
   bb4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bb4f8:	3501      	adds	r5, #1
   bb4fa:	615e      	str	r6, [r3, #20]
   bb4fc:	6125      	str	r5, [r4, #16]
   bb4fe:	4620      	mov	r0, r4
   bb500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb504:	000bd3e9 	.word	0x000bd3e9
   bb508:	000bd470 	.word	0x000bd470

000bb50c <__s2b>:
   bb50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb510:	460c      	mov	r4, r1
   bb512:	4615      	mov	r5, r2
   bb514:	461f      	mov	r7, r3
   bb516:	2209      	movs	r2, #9
   bb518:	3308      	adds	r3, #8
   bb51a:	4606      	mov	r6, r0
   bb51c:	fb93 f3f2 	sdiv	r3, r3, r2
   bb520:	2100      	movs	r1, #0
   bb522:	2201      	movs	r2, #1
   bb524:	429a      	cmp	r2, r3
   bb526:	db09      	blt.n	bb53c <__s2b+0x30>
   bb528:	4630      	mov	r0, r6
   bb52a:	f7ff ff47 	bl	bb3bc <_Balloc>
   bb52e:	b940      	cbnz	r0, bb542 <__s2b+0x36>
   bb530:	4602      	mov	r2, r0
   bb532:	4b19      	ldr	r3, [pc, #100]	; (bb598 <__s2b+0x8c>)
   bb534:	4819      	ldr	r0, [pc, #100]	; (bb59c <__s2b+0x90>)
   bb536:	21ce      	movs	r1, #206	; 0xce
   bb538:	f7fd f816 	bl	b8568 <__assert_func>
   bb53c:	0052      	lsls	r2, r2, #1
   bb53e:	3101      	adds	r1, #1
   bb540:	e7f0      	b.n	bb524 <__s2b+0x18>
   bb542:	9b08      	ldr	r3, [sp, #32]
   bb544:	6143      	str	r3, [r0, #20]
   bb546:	2d09      	cmp	r5, #9
   bb548:	f04f 0301 	mov.w	r3, #1
   bb54c:	6103      	str	r3, [r0, #16]
   bb54e:	dd16      	ble.n	bb57e <__s2b+0x72>
   bb550:	f104 0909 	add.w	r9, r4, #9
   bb554:	46c8      	mov	r8, r9
   bb556:	442c      	add	r4, r5
   bb558:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb55c:	4601      	mov	r1, r0
   bb55e:	3b30      	subs	r3, #48	; 0x30
   bb560:	220a      	movs	r2, #10
   bb562:	4630      	mov	r0, r6
   bb564:	f7ff ff8c 	bl	bb480 <__multadd>
   bb568:	45a0      	cmp	r8, r4
   bb56a:	d1f5      	bne.n	bb558 <__s2b+0x4c>
   bb56c:	f1a5 0408 	sub.w	r4, r5, #8
   bb570:	444c      	add	r4, r9
   bb572:	1b2d      	subs	r5, r5, r4
   bb574:	1963      	adds	r3, r4, r5
   bb576:	42bb      	cmp	r3, r7
   bb578:	db04      	blt.n	bb584 <__s2b+0x78>
   bb57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb57e:	340a      	adds	r4, #10
   bb580:	2509      	movs	r5, #9
   bb582:	e7f6      	b.n	bb572 <__s2b+0x66>
   bb584:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb588:	4601      	mov	r1, r0
   bb58a:	3b30      	subs	r3, #48	; 0x30
   bb58c:	220a      	movs	r2, #10
   bb58e:	4630      	mov	r0, r6
   bb590:	f7ff ff76 	bl	bb480 <__multadd>
   bb594:	e7ee      	b.n	bb574 <__s2b+0x68>
   bb596:	bf00      	nop
   bb598:	000bd3e9 	.word	0x000bd3e9
   bb59c:	000bd470 	.word	0x000bd470

000bb5a0 <__hi0bits>:
   bb5a0:	0c03      	lsrs	r3, r0, #16
   bb5a2:	041b      	lsls	r3, r3, #16
   bb5a4:	b9d3      	cbnz	r3, bb5dc <__hi0bits+0x3c>
   bb5a6:	0400      	lsls	r0, r0, #16
   bb5a8:	2310      	movs	r3, #16
   bb5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bb5ae:	bf04      	itt	eq
   bb5b0:	0200      	lsleq	r0, r0, #8
   bb5b2:	3308      	addeq	r3, #8
   bb5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bb5b8:	bf04      	itt	eq
   bb5ba:	0100      	lsleq	r0, r0, #4
   bb5bc:	3304      	addeq	r3, #4
   bb5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bb5c2:	bf04      	itt	eq
   bb5c4:	0080      	lsleq	r0, r0, #2
   bb5c6:	3302      	addeq	r3, #2
   bb5c8:	2800      	cmp	r0, #0
   bb5ca:	db05      	blt.n	bb5d8 <__hi0bits+0x38>
   bb5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bb5d0:	f103 0301 	add.w	r3, r3, #1
   bb5d4:	bf08      	it	eq
   bb5d6:	2320      	moveq	r3, #32
   bb5d8:	4618      	mov	r0, r3
   bb5da:	4770      	bx	lr
   bb5dc:	2300      	movs	r3, #0
   bb5de:	e7e4      	b.n	bb5aa <__hi0bits+0xa>

000bb5e0 <__lo0bits>:
   bb5e0:	6803      	ldr	r3, [r0, #0]
   bb5e2:	f013 0207 	ands.w	r2, r3, #7
   bb5e6:	4601      	mov	r1, r0
   bb5e8:	d00b      	beq.n	bb602 <__lo0bits+0x22>
   bb5ea:	07da      	lsls	r2, r3, #31
   bb5ec:	d423      	bmi.n	bb636 <__lo0bits+0x56>
   bb5ee:	0798      	lsls	r0, r3, #30
   bb5f0:	bf49      	itett	mi
   bb5f2:	085b      	lsrmi	r3, r3, #1
   bb5f4:	089b      	lsrpl	r3, r3, #2
   bb5f6:	2001      	movmi	r0, #1
   bb5f8:	600b      	strmi	r3, [r1, #0]
   bb5fa:	bf5c      	itt	pl
   bb5fc:	600b      	strpl	r3, [r1, #0]
   bb5fe:	2002      	movpl	r0, #2
   bb600:	4770      	bx	lr
   bb602:	b298      	uxth	r0, r3
   bb604:	b9a8      	cbnz	r0, bb632 <__lo0bits+0x52>
   bb606:	0c1b      	lsrs	r3, r3, #16
   bb608:	2010      	movs	r0, #16
   bb60a:	b2da      	uxtb	r2, r3
   bb60c:	b90a      	cbnz	r2, bb612 <__lo0bits+0x32>
   bb60e:	3008      	adds	r0, #8
   bb610:	0a1b      	lsrs	r3, r3, #8
   bb612:	071a      	lsls	r2, r3, #28
   bb614:	bf04      	itt	eq
   bb616:	091b      	lsreq	r3, r3, #4
   bb618:	3004      	addeq	r0, #4
   bb61a:	079a      	lsls	r2, r3, #30
   bb61c:	bf04      	itt	eq
   bb61e:	089b      	lsreq	r3, r3, #2
   bb620:	3002      	addeq	r0, #2
   bb622:	07da      	lsls	r2, r3, #31
   bb624:	d403      	bmi.n	bb62e <__lo0bits+0x4e>
   bb626:	085b      	lsrs	r3, r3, #1
   bb628:	f100 0001 	add.w	r0, r0, #1
   bb62c:	d005      	beq.n	bb63a <__lo0bits+0x5a>
   bb62e:	600b      	str	r3, [r1, #0]
   bb630:	4770      	bx	lr
   bb632:	4610      	mov	r0, r2
   bb634:	e7e9      	b.n	bb60a <__lo0bits+0x2a>
   bb636:	2000      	movs	r0, #0
   bb638:	4770      	bx	lr
   bb63a:	2020      	movs	r0, #32
   bb63c:	4770      	bx	lr
	...

000bb640 <__i2b>:
   bb640:	b510      	push	{r4, lr}
   bb642:	460c      	mov	r4, r1
   bb644:	2101      	movs	r1, #1
   bb646:	f7ff feb9 	bl	bb3bc <_Balloc>
   bb64a:	4602      	mov	r2, r0
   bb64c:	b928      	cbnz	r0, bb65a <__i2b+0x1a>
   bb64e:	4b05      	ldr	r3, [pc, #20]	; (bb664 <__i2b+0x24>)
   bb650:	4805      	ldr	r0, [pc, #20]	; (bb668 <__i2b+0x28>)
   bb652:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb656:	f7fc ff87 	bl	b8568 <__assert_func>
   bb65a:	2301      	movs	r3, #1
   bb65c:	6144      	str	r4, [r0, #20]
   bb65e:	6103      	str	r3, [r0, #16]
   bb660:	bd10      	pop	{r4, pc}
   bb662:	bf00      	nop
   bb664:	000bd3e9 	.word	0x000bd3e9
   bb668:	000bd470 	.word	0x000bd470

000bb66c <__multiply>:
   bb66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb670:	4691      	mov	r9, r2
   bb672:	690a      	ldr	r2, [r1, #16]
   bb674:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb678:	429a      	cmp	r2, r3
   bb67a:	bfb8      	it	lt
   bb67c:	460b      	movlt	r3, r1
   bb67e:	460c      	mov	r4, r1
   bb680:	bfbc      	itt	lt
   bb682:	464c      	movlt	r4, r9
   bb684:	4699      	movlt	r9, r3
   bb686:	6927      	ldr	r7, [r4, #16]
   bb688:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb68c:	68a3      	ldr	r3, [r4, #8]
   bb68e:	6861      	ldr	r1, [r4, #4]
   bb690:	eb07 060a 	add.w	r6, r7, sl
   bb694:	42b3      	cmp	r3, r6
   bb696:	b085      	sub	sp, #20
   bb698:	bfb8      	it	lt
   bb69a:	3101      	addlt	r1, #1
   bb69c:	f7ff fe8e 	bl	bb3bc <_Balloc>
   bb6a0:	b930      	cbnz	r0, bb6b0 <__multiply+0x44>
   bb6a2:	4602      	mov	r2, r0
   bb6a4:	4b44      	ldr	r3, [pc, #272]	; (bb7b8 <__multiply+0x14c>)
   bb6a6:	4845      	ldr	r0, [pc, #276]	; (bb7bc <__multiply+0x150>)
   bb6a8:	f240 115d 	movw	r1, #349	; 0x15d
   bb6ac:	f7fc ff5c 	bl	b8568 <__assert_func>
   bb6b0:	f100 0514 	add.w	r5, r0, #20
   bb6b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb6b8:	462b      	mov	r3, r5
   bb6ba:	2200      	movs	r2, #0
   bb6bc:	4543      	cmp	r3, r8
   bb6be:	d321      	bcc.n	bb704 <__multiply+0x98>
   bb6c0:	f104 0314 	add.w	r3, r4, #20
   bb6c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb6c8:	f109 0314 	add.w	r3, r9, #20
   bb6cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb6d0:	9202      	str	r2, [sp, #8]
   bb6d2:	1b3a      	subs	r2, r7, r4
   bb6d4:	3a15      	subs	r2, #21
   bb6d6:	f022 0203 	bic.w	r2, r2, #3
   bb6da:	3204      	adds	r2, #4
   bb6dc:	f104 0115 	add.w	r1, r4, #21
   bb6e0:	428f      	cmp	r7, r1
   bb6e2:	bf38      	it	cc
   bb6e4:	2204      	movcc	r2, #4
   bb6e6:	9201      	str	r2, [sp, #4]
   bb6e8:	9a02      	ldr	r2, [sp, #8]
   bb6ea:	9303      	str	r3, [sp, #12]
   bb6ec:	429a      	cmp	r2, r3
   bb6ee:	d80c      	bhi.n	bb70a <__multiply+0x9e>
   bb6f0:	2e00      	cmp	r6, #0
   bb6f2:	dd03      	ble.n	bb6fc <__multiply+0x90>
   bb6f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb6f8:	2b00      	cmp	r3, #0
   bb6fa:	d05a      	beq.n	bb7b2 <__multiply+0x146>
   bb6fc:	6106      	str	r6, [r0, #16]
   bb6fe:	b005      	add	sp, #20
   bb700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb704:	f843 2b04 	str.w	r2, [r3], #4
   bb708:	e7d8      	b.n	bb6bc <__multiply+0x50>
   bb70a:	f8b3 a000 	ldrh.w	sl, [r3]
   bb70e:	f1ba 0f00 	cmp.w	sl, #0
   bb712:	d024      	beq.n	bb75e <__multiply+0xf2>
   bb714:	f104 0e14 	add.w	lr, r4, #20
   bb718:	46a9      	mov	r9, r5
   bb71a:	f04f 0c00 	mov.w	ip, #0
   bb71e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb722:	f8d9 1000 	ldr.w	r1, [r9]
   bb726:	fa1f fb82 	uxth.w	fp, r2
   bb72a:	b289      	uxth	r1, r1
   bb72c:	fb0a 110b 	mla	r1, sl, fp, r1
   bb730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb734:	f8d9 2000 	ldr.w	r2, [r9]
   bb738:	4461      	add	r1, ip
   bb73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb73e:	fb0a c20b 	mla	r2, sl, fp, ip
   bb742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb746:	b289      	uxth	r1, r1
   bb748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb74c:	4577      	cmp	r7, lr
   bb74e:	f849 1b04 	str.w	r1, [r9], #4
   bb752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb756:	d8e2      	bhi.n	bb71e <__multiply+0xb2>
   bb758:	9a01      	ldr	r2, [sp, #4]
   bb75a:	f845 c002 	str.w	ip, [r5, r2]
   bb75e:	9a03      	ldr	r2, [sp, #12]
   bb760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb764:	3304      	adds	r3, #4
   bb766:	f1b9 0f00 	cmp.w	r9, #0
   bb76a:	d020      	beq.n	bb7ae <__multiply+0x142>
   bb76c:	6829      	ldr	r1, [r5, #0]
   bb76e:	f104 0c14 	add.w	ip, r4, #20
   bb772:	46ae      	mov	lr, r5
   bb774:	f04f 0a00 	mov.w	sl, #0
   bb778:	f8bc b000 	ldrh.w	fp, [ip]
   bb77c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb780:	fb09 220b 	mla	r2, r9, fp, r2
   bb784:	4492      	add	sl, r2
   bb786:	b289      	uxth	r1, r1
   bb788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb78c:	f84e 1b04 	str.w	r1, [lr], #4
   bb790:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb794:	f8be 1000 	ldrh.w	r1, [lr]
   bb798:	0c12      	lsrs	r2, r2, #16
   bb79a:	fb09 1102 	mla	r1, r9, r2, r1
   bb79e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb7a2:	4567      	cmp	r7, ip
   bb7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb7a8:	d8e6      	bhi.n	bb778 <__multiply+0x10c>
   bb7aa:	9a01      	ldr	r2, [sp, #4]
   bb7ac:	50a9      	str	r1, [r5, r2]
   bb7ae:	3504      	adds	r5, #4
   bb7b0:	e79a      	b.n	bb6e8 <__multiply+0x7c>
   bb7b2:	3e01      	subs	r6, #1
   bb7b4:	e79c      	b.n	bb6f0 <__multiply+0x84>
   bb7b6:	bf00      	nop
   bb7b8:	000bd3e9 	.word	0x000bd3e9
   bb7bc:	000bd470 	.word	0x000bd470

000bb7c0 <__pow5mult>:
   bb7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb7c4:	4615      	mov	r5, r2
   bb7c6:	f012 0203 	ands.w	r2, r2, #3
   bb7ca:	4606      	mov	r6, r0
   bb7cc:	460f      	mov	r7, r1
   bb7ce:	d007      	beq.n	bb7e0 <__pow5mult+0x20>
   bb7d0:	4c25      	ldr	r4, [pc, #148]	; (bb868 <__pow5mult+0xa8>)
   bb7d2:	3a01      	subs	r2, #1
   bb7d4:	2300      	movs	r3, #0
   bb7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb7da:	f7ff fe51 	bl	bb480 <__multadd>
   bb7de:	4607      	mov	r7, r0
   bb7e0:	10ad      	asrs	r5, r5, #2
   bb7e2:	d03d      	beq.n	bb860 <__pow5mult+0xa0>
   bb7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb7e6:	b97c      	cbnz	r4, bb808 <__pow5mult+0x48>
   bb7e8:	2010      	movs	r0, #16
   bb7ea:	f7fc fe85 	bl	b84f8 <malloc>
   bb7ee:	4602      	mov	r2, r0
   bb7f0:	6270      	str	r0, [r6, #36]	; 0x24
   bb7f2:	b928      	cbnz	r0, bb800 <__pow5mult+0x40>
   bb7f4:	4b1d      	ldr	r3, [pc, #116]	; (bb86c <__pow5mult+0xac>)
   bb7f6:	481e      	ldr	r0, [pc, #120]	; (bb870 <__pow5mult+0xb0>)
   bb7f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb7fc:	f7fc feb4 	bl	b8568 <__assert_func>
   bb800:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb804:	6004      	str	r4, [r0, #0]
   bb806:	60c4      	str	r4, [r0, #12]
   bb808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb80c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb810:	b94c      	cbnz	r4, bb826 <__pow5mult+0x66>
   bb812:	f240 2171 	movw	r1, #625	; 0x271
   bb816:	4630      	mov	r0, r6
   bb818:	f7ff ff12 	bl	bb640 <__i2b>
   bb81c:	2300      	movs	r3, #0
   bb81e:	f8c8 0008 	str.w	r0, [r8, #8]
   bb822:	4604      	mov	r4, r0
   bb824:	6003      	str	r3, [r0, #0]
   bb826:	f04f 0900 	mov.w	r9, #0
   bb82a:	07eb      	lsls	r3, r5, #31
   bb82c:	d50a      	bpl.n	bb844 <__pow5mult+0x84>
   bb82e:	4639      	mov	r1, r7
   bb830:	4622      	mov	r2, r4
   bb832:	4630      	mov	r0, r6
   bb834:	f7ff ff1a 	bl	bb66c <__multiply>
   bb838:	4639      	mov	r1, r7
   bb83a:	4680      	mov	r8, r0
   bb83c:	4630      	mov	r0, r6
   bb83e:	f7ff fdfd 	bl	bb43c <_Bfree>
   bb842:	4647      	mov	r7, r8
   bb844:	106d      	asrs	r5, r5, #1
   bb846:	d00b      	beq.n	bb860 <__pow5mult+0xa0>
   bb848:	6820      	ldr	r0, [r4, #0]
   bb84a:	b938      	cbnz	r0, bb85c <__pow5mult+0x9c>
   bb84c:	4622      	mov	r2, r4
   bb84e:	4621      	mov	r1, r4
   bb850:	4630      	mov	r0, r6
   bb852:	f7ff ff0b 	bl	bb66c <__multiply>
   bb856:	6020      	str	r0, [r4, #0]
   bb858:	f8c0 9000 	str.w	r9, [r0]
   bb85c:	4604      	mov	r4, r0
   bb85e:	e7e4      	b.n	bb82a <__pow5mult+0x6a>
   bb860:	4638      	mov	r0, r7
   bb862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb866:	bf00      	nop
   bb868:	000bd5c0 	.word	0x000bd5c0
   bb86c:	000bd21d 	.word	0x000bd21d
   bb870:	000bd470 	.word	0x000bd470

000bb874 <__lshift>:
   bb874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb878:	460c      	mov	r4, r1
   bb87a:	6849      	ldr	r1, [r1, #4]
   bb87c:	6923      	ldr	r3, [r4, #16]
   bb87e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb882:	68a3      	ldr	r3, [r4, #8]
   bb884:	4607      	mov	r7, r0
   bb886:	4691      	mov	r9, r2
   bb888:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb88c:	f108 0601 	add.w	r6, r8, #1
   bb890:	42b3      	cmp	r3, r6
   bb892:	db0b      	blt.n	bb8ac <__lshift+0x38>
   bb894:	4638      	mov	r0, r7
   bb896:	f7ff fd91 	bl	bb3bc <_Balloc>
   bb89a:	4605      	mov	r5, r0
   bb89c:	b948      	cbnz	r0, bb8b2 <__lshift+0x3e>
   bb89e:	4602      	mov	r2, r0
   bb8a0:	4b2a      	ldr	r3, [pc, #168]	; (bb94c <__lshift+0xd8>)
   bb8a2:	482b      	ldr	r0, [pc, #172]	; (bb950 <__lshift+0xdc>)
   bb8a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb8a8:	f7fc fe5e 	bl	b8568 <__assert_func>
   bb8ac:	3101      	adds	r1, #1
   bb8ae:	005b      	lsls	r3, r3, #1
   bb8b0:	e7ee      	b.n	bb890 <__lshift+0x1c>
   bb8b2:	2300      	movs	r3, #0
   bb8b4:	f100 0114 	add.w	r1, r0, #20
   bb8b8:	f100 0210 	add.w	r2, r0, #16
   bb8bc:	4618      	mov	r0, r3
   bb8be:	4553      	cmp	r3, sl
   bb8c0:	db37      	blt.n	bb932 <__lshift+0xbe>
   bb8c2:	6920      	ldr	r0, [r4, #16]
   bb8c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb8c8:	f104 0314 	add.w	r3, r4, #20
   bb8cc:	f019 091f 	ands.w	r9, r9, #31
   bb8d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb8d8:	d02f      	beq.n	bb93a <__lshift+0xc6>
   bb8da:	f1c9 0e20 	rsb	lr, r9, #32
   bb8de:	468a      	mov	sl, r1
   bb8e0:	f04f 0c00 	mov.w	ip, #0
   bb8e4:	681a      	ldr	r2, [r3, #0]
   bb8e6:	fa02 f209 	lsl.w	r2, r2, r9
   bb8ea:	ea42 020c 	orr.w	r2, r2, ip
   bb8ee:	f84a 2b04 	str.w	r2, [sl], #4
   bb8f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb8f6:	4298      	cmp	r0, r3
   bb8f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb8fc:	d8f2      	bhi.n	bb8e4 <__lshift+0x70>
   bb8fe:	1b03      	subs	r3, r0, r4
   bb900:	3b15      	subs	r3, #21
   bb902:	f023 0303 	bic.w	r3, r3, #3
   bb906:	3304      	adds	r3, #4
   bb908:	f104 0215 	add.w	r2, r4, #21
   bb90c:	4290      	cmp	r0, r2
   bb90e:	bf38      	it	cc
   bb910:	2304      	movcc	r3, #4
   bb912:	f841 c003 	str.w	ip, [r1, r3]
   bb916:	f1bc 0f00 	cmp.w	ip, #0
   bb91a:	d001      	beq.n	bb920 <__lshift+0xac>
   bb91c:	f108 0602 	add.w	r6, r8, #2
   bb920:	3e01      	subs	r6, #1
   bb922:	4638      	mov	r0, r7
   bb924:	612e      	str	r6, [r5, #16]
   bb926:	4621      	mov	r1, r4
   bb928:	f7ff fd88 	bl	bb43c <_Bfree>
   bb92c:	4628      	mov	r0, r5
   bb92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb932:	f842 0f04 	str.w	r0, [r2, #4]!
   bb936:	3301      	adds	r3, #1
   bb938:	e7c1      	b.n	bb8be <__lshift+0x4a>
   bb93a:	3904      	subs	r1, #4
   bb93c:	f853 2b04 	ldr.w	r2, [r3], #4
   bb940:	f841 2f04 	str.w	r2, [r1, #4]!
   bb944:	4298      	cmp	r0, r3
   bb946:	d8f9      	bhi.n	bb93c <__lshift+0xc8>
   bb948:	e7ea      	b.n	bb920 <__lshift+0xac>
   bb94a:	bf00      	nop
   bb94c:	000bd3e9 	.word	0x000bd3e9
   bb950:	000bd470 	.word	0x000bd470

000bb954 <__mcmp>:
   bb954:	b530      	push	{r4, r5, lr}
   bb956:	6902      	ldr	r2, [r0, #16]
   bb958:	690c      	ldr	r4, [r1, #16]
   bb95a:	1b12      	subs	r2, r2, r4
   bb95c:	d10e      	bne.n	bb97c <__mcmp+0x28>
   bb95e:	f100 0314 	add.w	r3, r0, #20
   bb962:	3114      	adds	r1, #20
   bb964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb96c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb974:	42a5      	cmp	r5, r4
   bb976:	d003      	beq.n	bb980 <__mcmp+0x2c>
   bb978:	d305      	bcc.n	bb986 <__mcmp+0x32>
   bb97a:	2201      	movs	r2, #1
   bb97c:	4610      	mov	r0, r2
   bb97e:	bd30      	pop	{r4, r5, pc}
   bb980:	4283      	cmp	r3, r0
   bb982:	d3f3      	bcc.n	bb96c <__mcmp+0x18>
   bb984:	e7fa      	b.n	bb97c <__mcmp+0x28>
   bb986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb98a:	e7f7      	b.n	bb97c <__mcmp+0x28>

000bb98c <__mdiff>:
   bb98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb990:	460c      	mov	r4, r1
   bb992:	4606      	mov	r6, r0
   bb994:	4611      	mov	r1, r2
   bb996:	4620      	mov	r0, r4
   bb998:	4690      	mov	r8, r2
   bb99a:	f7ff ffdb 	bl	bb954 <__mcmp>
   bb99e:	1e05      	subs	r5, r0, #0
   bb9a0:	d110      	bne.n	bb9c4 <__mdiff+0x38>
   bb9a2:	4629      	mov	r1, r5
   bb9a4:	4630      	mov	r0, r6
   bb9a6:	f7ff fd09 	bl	bb3bc <_Balloc>
   bb9aa:	b930      	cbnz	r0, bb9ba <__mdiff+0x2e>
   bb9ac:	4b3a      	ldr	r3, [pc, #232]	; (bba98 <__mdiff+0x10c>)
   bb9ae:	4602      	mov	r2, r0
   bb9b0:	f240 2132 	movw	r1, #562	; 0x232
   bb9b4:	4839      	ldr	r0, [pc, #228]	; (bba9c <__mdiff+0x110>)
   bb9b6:	f7fc fdd7 	bl	b8568 <__assert_func>
   bb9ba:	2301      	movs	r3, #1
   bb9bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb9c4:	bfa4      	itt	ge
   bb9c6:	4643      	movge	r3, r8
   bb9c8:	46a0      	movge	r8, r4
   bb9ca:	4630      	mov	r0, r6
   bb9cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb9d0:	bfa6      	itte	ge
   bb9d2:	461c      	movge	r4, r3
   bb9d4:	2500      	movge	r5, #0
   bb9d6:	2501      	movlt	r5, #1
   bb9d8:	f7ff fcf0 	bl	bb3bc <_Balloc>
   bb9dc:	b920      	cbnz	r0, bb9e8 <__mdiff+0x5c>
   bb9de:	4b2e      	ldr	r3, [pc, #184]	; (bba98 <__mdiff+0x10c>)
   bb9e0:	4602      	mov	r2, r0
   bb9e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb9e6:	e7e5      	b.n	bb9b4 <__mdiff+0x28>
   bb9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb9ec:	6926      	ldr	r6, [r4, #16]
   bb9ee:	60c5      	str	r5, [r0, #12]
   bb9f0:	f104 0914 	add.w	r9, r4, #20
   bb9f4:	f108 0514 	add.w	r5, r8, #20
   bb9f8:	f100 0e14 	add.w	lr, r0, #20
   bb9fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bba00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bba04:	f108 0210 	add.w	r2, r8, #16
   bba08:	46f2      	mov	sl, lr
   bba0a:	2100      	movs	r1, #0
   bba0c:	f859 3b04 	ldr.w	r3, [r9], #4
   bba10:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bba14:	fa1f f883 	uxth.w	r8, r3
   bba18:	fa11 f18b 	uxtah	r1, r1, fp
   bba1c:	0c1b      	lsrs	r3, r3, #16
   bba1e:	eba1 0808 	sub.w	r8, r1, r8
   bba22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bba26:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bba2a:	fa1f f888 	uxth.w	r8, r8
   bba2e:	1419      	asrs	r1, r3, #16
   bba30:	454e      	cmp	r6, r9
   bba32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bba36:	f84a 3b04 	str.w	r3, [sl], #4
   bba3a:	d8e7      	bhi.n	bba0c <__mdiff+0x80>
   bba3c:	1b33      	subs	r3, r6, r4
   bba3e:	3b15      	subs	r3, #21
   bba40:	f023 0303 	bic.w	r3, r3, #3
   bba44:	3304      	adds	r3, #4
   bba46:	3415      	adds	r4, #21
   bba48:	42a6      	cmp	r6, r4
   bba4a:	bf38      	it	cc
   bba4c:	2304      	movcc	r3, #4
   bba4e:	441d      	add	r5, r3
   bba50:	4473      	add	r3, lr
   bba52:	469e      	mov	lr, r3
   bba54:	462e      	mov	r6, r5
   bba56:	4566      	cmp	r6, ip
   bba58:	d30e      	bcc.n	bba78 <__mdiff+0xec>
   bba5a:	f10c 0203 	add.w	r2, ip, #3
   bba5e:	1b52      	subs	r2, r2, r5
   bba60:	f022 0203 	bic.w	r2, r2, #3
   bba64:	3d03      	subs	r5, #3
   bba66:	45ac      	cmp	ip, r5
   bba68:	bf38      	it	cc
   bba6a:	2200      	movcc	r2, #0
   bba6c:	441a      	add	r2, r3
   bba6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bba72:	b17b      	cbz	r3, bba94 <__mdiff+0x108>
   bba74:	6107      	str	r7, [r0, #16]
   bba76:	e7a3      	b.n	bb9c0 <__mdiff+0x34>
   bba78:	f856 8b04 	ldr.w	r8, [r6], #4
   bba7c:	fa11 f288 	uxtah	r2, r1, r8
   bba80:	1414      	asrs	r4, r2, #16
   bba82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bba86:	b292      	uxth	r2, r2
   bba88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bba8c:	f84e 2b04 	str.w	r2, [lr], #4
   bba90:	1421      	asrs	r1, r4, #16
   bba92:	e7e0      	b.n	bba56 <__mdiff+0xca>
   bba94:	3f01      	subs	r7, #1
   bba96:	e7ea      	b.n	bba6e <__mdiff+0xe2>
   bba98:	000bd3e9 	.word	0x000bd3e9
   bba9c:	000bd470 	.word	0x000bd470

000bbaa0 <__ulp>:
   bbaa0:	b082      	sub	sp, #8
   bbaa2:	ed8d 0b00 	vstr	d0, [sp]
   bbaa6:	9b01      	ldr	r3, [sp, #4]
   bbaa8:	4912      	ldr	r1, [pc, #72]	; (bbaf4 <__ulp+0x54>)
   bbaaa:	4019      	ands	r1, r3
   bbaac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bbab0:	2900      	cmp	r1, #0
   bbab2:	dd05      	ble.n	bbac0 <__ulp+0x20>
   bbab4:	2200      	movs	r2, #0
   bbab6:	460b      	mov	r3, r1
   bbab8:	ec43 2b10 	vmov	d0, r2, r3
   bbabc:	b002      	add	sp, #8
   bbabe:	4770      	bx	lr
   bbac0:	4249      	negs	r1, r1
   bbac2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bbac6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bbaca:	f04f 0200 	mov.w	r2, #0
   bbace:	f04f 0300 	mov.w	r3, #0
   bbad2:	da04      	bge.n	bbade <__ulp+0x3e>
   bbad4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bbad8:	fa41 f300 	asr.w	r3, r1, r0
   bbadc:	e7ec      	b.n	bbab8 <__ulp+0x18>
   bbade:	f1a0 0114 	sub.w	r1, r0, #20
   bbae2:	291e      	cmp	r1, #30
   bbae4:	bfda      	itte	le
   bbae6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bbaea:	fa20 f101 	lsrle.w	r1, r0, r1
   bbaee:	2101      	movgt	r1, #1
   bbaf0:	460a      	mov	r2, r1
   bbaf2:	e7e1      	b.n	bbab8 <__ulp+0x18>
   bbaf4:	7ff00000 	.word	0x7ff00000

000bbaf8 <__b2d>:
   bbaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbafa:	6905      	ldr	r5, [r0, #16]
   bbafc:	f100 0714 	add.w	r7, r0, #20
   bbb00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bbb04:	1f2e      	subs	r6, r5, #4
   bbb06:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bbb0a:	4620      	mov	r0, r4
   bbb0c:	f7ff fd48 	bl	bb5a0 <__hi0bits>
   bbb10:	f1c0 0320 	rsb	r3, r0, #32
   bbb14:	280a      	cmp	r0, #10
   bbb16:	f8df c07c 	ldr.w	ip, [pc, #124]	; bbb94 <__b2d+0x9c>
   bbb1a:	600b      	str	r3, [r1, #0]
   bbb1c:	dc14      	bgt.n	bbb48 <__b2d+0x50>
   bbb1e:	f1c0 0e0b 	rsb	lr, r0, #11
   bbb22:	fa24 f10e 	lsr.w	r1, r4, lr
   bbb26:	42b7      	cmp	r7, r6
   bbb28:	ea41 030c 	orr.w	r3, r1, ip
   bbb2c:	bf34      	ite	cc
   bbb2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbb32:	2100      	movcs	r1, #0
   bbb34:	3015      	adds	r0, #21
   bbb36:	fa04 f000 	lsl.w	r0, r4, r0
   bbb3a:	fa21 f10e 	lsr.w	r1, r1, lr
   bbb3e:	ea40 0201 	orr.w	r2, r0, r1
   bbb42:	ec43 2b10 	vmov	d0, r2, r3
   bbb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbb48:	42b7      	cmp	r7, r6
   bbb4a:	bf3a      	itte	cc
   bbb4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbb50:	f1a5 0608 	subcc.w	r6, r5, #8
   bbb54:	2100      	movcs	r1, #0
   bbb56:	380b      	subs	r0, #11
   bbb58:	d017      	beq.n	bbb8a <__b2d+0x92>
   bbb5a:	f1c0 0c20 	rsb	ip, r0, #32
   bbb5e:	fa04 f500 	lsl.w	r5, r4, r0
   bbb62:	42be      	cmp	r6, r7
   bbb64:	fa21 f40c 	lsr.w	r4, r1, ip
   bbb68:	ea45 0504 	orr.w	r5, r5, r4
   bbb6c:	bf8c      	ite	hi
   bbb6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bbb72:	2400      	movls	r4, #0
   bbb74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bbb78:	fa01 f000 	lsl.w	r0, r1, r0
   bbb7c:	fa24 f40c 	lsr.w	r4, r4, ip
   bbb80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bbb84:	ea40 0204 	orr.w	r2, r0, r4
   bbb88:	e7db      	b.n	bbb42 <__b2d+0x4a>
   bbb8a:	ea44 030c 	orr.w	r3, r4, ip
   bbb8e:	460a      	mov	r2, r1
   bbb90:	e7d7      	b.n	bbb42 <__b2d+0x4a>
   bbb92:	bf00      	nop
   bbb94:	3ff00000 	.word	0x3ff00000

000bbb98 <__d2b>:
   bbb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bbb9c:	4689      	mov	r9, r1
   bbb9e:	2101      	movs	r1, #1
   bbba0:	ec57 6b10 	vmov	r6, r7, d0
   bbba4:	4690      	mov	r8, r2
   bbba6:	f7ff fc09 	bl	bb3bc <_Balloc>
   bbbaa:	4604      	mov	r4, r0
   bbbac:	b930      	cbnz	r0, bbbbc <__d2b+0x24>
   bbbae:	4602      	mov	r2, r0
   bbbb0:	4b25      	ldr	r3, [pc, #148]	; (bbc48 <__d2b+0xb0>)
   bbbb2:	4826      	ldr	r0, [pc, #152]	; (bbc4c <__d2b+0xb4>)
   bbbb4:	f240 310a 	movw	r1, #778	; 0x30a
   bbbb8:	f7fc fcd6 	bl	b8568 <__assert_func>
   bbbbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bbbc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bbbc4:	bb35      	cbnz	r5, bbc14 <__d2b+0x7c>
   bbbc6:	2e00      	cmp	r6, #0
   bbbc8:	9301      	str	r3, [sp, #4]
   bbbca:	d028      	beq.n	bbc1e <__d2b+0x86>
   bbbcc:	4668      	mov	r0, sp
   bbbce:	9600      	str	r6, [sp, #0]
   bbbd0:	f7ff fd06 	bl	bb5e0 <__lo0bits>
   bbbd4:	9900      	ldr	r1, [sp, #0]
   bbbd6:	b300      	cbz	r0, bbc1a <__d2b+0x82>
   bbbd8:	9a01      	ldr	r2, [sp, #4]
   bbbda:	f1c0 0320 	rsb	r3, r0, #32
   bbbde:	fa02 f303 	lsl.w	r3, r2, r3
   bbbe2:	430b      	orrs	r3, r1
   bbbe4:	40c2      	lsrs	r2, r0
   bbbe6:	6163      	str	r3, [r4, #20]
   bbbe8:	9201      	str	r2, [sp, #4]
   bbbea:	9b01      	ldr	r3, [sp, #4]
   bbbec:	61a3      	str	r3, [r4, #24]
   bbbee:	2b00      	cmp	r3, #0
   bbbf0:	bf14      	ite	ne
   bbbf2:	2202      	movne	r2, #2
   bbbf4:	2201      	moveq	r2, #1
   bbbf6:	6122      	str	r2, [r4, #16]
   bbbf8:	b1d5      	cbz	r5, bbc30 <__d2b+0x98>
   bbbfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bbbfe:	4405      	add	r5, r0
   bbc00:	f8c9 5000 	str.w	r5, [r9]
   bbc04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bbc08:	f8c8 0000 	str.w	r0, [r8]
   bbc0c:	4620      	mov	r0, r4
   bbc0e:	b003      	add	sp, #12
   bbc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbc18:	e7d5      	b.n	bbbc6 <__d2b+0x2e>
   bbc1a:	6161      	str	r1, [r4, #20]
   bbc1c:	e7e5      	b.n	bbbea <__d2b+0x52>
   bbc1e:	a801      	add	r0, sp, #4
   bbc20:	f7ff fcde 	bl	bb5e0 <__lo0bits>
   bbc24:	9b01      	ldr	r3, [sp, #4]
   bbc26:	6163      	str	r3, [r4, #20]
   bbc28:	2201      	movs	r2, #1
   bbc2a:	6122      	str	r2, [r4, #16]
   bbc2c:	3020      	adds	r0, #32
   bbc2e:	e7e3      	b.n	bbbf8 <__d2b+0x60>
   bbc30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bbc34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bbc38:	f8c9 0000 	str.w	r0, [r9]
   bbc3c:	6918      	ldr	r0, [r3, #16]
   bbc3e:	f7ff fcaf 	bl	bb5a0 <__hi0bits>
   bbc42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bbc46:	e7df      	b.n	bbc08 <__d2b+0x70>
   bbc48:	000bd3e9 	.word	0x000bd3e9
   bbc4c:	000bd470 	.word	0x000bd470

000bbc50 <__ratio>:
   bbc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbc54:	4688      	mov	r8, r1
   bbc56:	4669      	mov	r1, sp
   bbc58:	4681      	mov	r9, r0
   bbc5a:	f7ff ff4d 	bl	bbaf8 <__b2d>
   bbc5e:	a901      	add	r1, sp, #4
   bbc60:	4640      	mov	r0, r8
   bbc62:	ec55 4b10 	vmov	r4, r5, d0
   bbc66:	f7ff ff47 	bl	bbaf8 <__b2d>
   bbc6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbc6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bbc72:	eba3 0c02 	sub.w	ip, r3, r2
   bbc76:	e9dd 3200 	ldrd	r3, r2, [sp]
   bbc7a:	1a9b      	subs	r3, r3, r2
   bbc7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bbc80:	ec51 0b10 	vmov	r0, r1, d0
   bbc84:	2b00      	cmp	r3, #0
   bbc86:	bfd6      	itet	le
   bbc88:	460a      	movle	r2, r1
   bbc8a:	462a      	movgt	r2, r5
   bbc8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bbc90:	468b      	mov	fp, r1
   bbc92:	462f      	mov	r7, r5
   bbc94:	bfd4      	ite	le
   bbc96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bbc9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bbc9e:	4620      	mov	r0, r4
   bbca0:	ee10 2a10 	vmov	r2, s0
   bbca4:	465b      	mov	r3, fp
   bbca6:	4639      	mov	r1, r7
   bbca8:	f7f8 fca0 	bl	b45ec <__aeabi_ddiv>
   bbcac:	ec41 0b10 	vmov	d0, r0, r1
   bbcb0:	b003      	add	sp, #12
   bbcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbcb6 <__copybits>:
   bbcb6:	3901      	subs	r1, #1
   bbcb8:	b570      	push	{r4, r5, r6, lr}
   bbcba:	1149      	asrs	r1, r1, #5
   bbcbc:	6914      	ldr	r4, [r2, #16]
   bbcbe:	3101      	adds	r1, #1
   bbcc0:	f102 0314 	add.w	r3, r2, #20
   bbcc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bbcc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bbccc:	1f05      	subs	r5, r0, #4
   bbcce:	42a3      	cmp	r3, r4
   bbcd0:	d30c      	bcc.n	bbcec <__copybits+0x36>
   bbcd2:	1aa3      	subs	r3, r4, r2
   bbcd4:	3b11      	subs	r3, #17
   bbcd6:	f023 0303 	bic.w	r3, r3, #3
   bbcda:	3211      	adds	r2, #17
   bbcdc:	42a2      	cmp	r2, r4
   bbcde:	bf88      	it	hi
   bbce0:	2300      	movhi	r3, #0
   bbce2:	4418      	add	r0, r3
   bbce4:	2300      	movs	r3, #0
   bbce6:	4288      	cmp	r0, r1
   bbce8:	d305      	bcc.n	bbcf6 <__copybits+0x40>
   bbcea:	bd70      	pop	{r4, r5, r6, pc}
   bbcec:	f853 6b04 	ldr.w	r6, [r3], #4
   bbcf0:	f845 6f04 	str.w	r6, [r5, #4]!
   bbcf4:	e7eb      	b.n	bbcce <__copybits+0x18>
   bbcf6:	f840 3b04 	str.w	r3, [r0], #4
   bbcfa:	e7f4      	b.n	bbce6 <__copybits+0x30>

000bbcfc <__any_on>:
   bbcfc:	f100 0214 	add.w	r2, r0, #20
   bbd00:	6900      	ldr	r0, [r0, #16]
   bbd02:	114b      	asrs	r3, r1, #5
   bbd04:	4298      	cmp	r0, r3
   bbd06:	b510      	push	{r4, lr}
   bbd08:	db11      	blt.n	bbd2e <__any_on+0x32>
   bbd0a:	dd0a      	ble.n	bbd22 <__any_on+0x26>
   bbd0c:	f011 011f 	ands.w	r1, r1, #31
   bbd10:	d007      	beq.n	bbd22 <__any_on+0x26>
   bbd12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bbd16:	fa24 f001 	lsr.w	r0, r4, r1
   bbd1a:	fa00 f101 	lsl.w	r1, r0, r1
   bbd1e:	428c      	cmp	r4, r1
   bbd20:	d10b      	bne.n	bbd3a <__any_on+0x3e>
   bbd22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bbd26:	4293      	cmp	r3, r2
   bbd28:	d803      	bhi.n	bbd32 <__any_on+0x36>
   bbd2a:	2000      	movs	r0, #0
   bbd2c:	bd10      	pop	{r4, pc}
   bbd2e:	4603      	mov	r3, r0
   bbd30:	e7f7      	b.n	bbd22 <__any_on+0x26>
   bbd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bbd36:	2900      	cmp	r1, #0
   bbd38:	d0f5      	beq.n	bbd26 <__any_on+0x2a>
   bbd3a:	2001      	movs	r0, #1
   bbd3c:	e7f6      	b.n	bbd2c <__any_on+0x30>

000bbd3e <_calloc_r>:
   bbd3e:	b513      	push	{r0, r1, r4, lr}
   bbd40:	434a      	muls	r2, r1
   bbd42:	4611      	mov	r1, r2
   bbd44:	9201      	str	r2, [sp, #4]
   bbd46:	f7fc fbff 	bl	b8548 <_malloc_r>
   bbd4a:	4604      	mov	r4, r0
   bbd4c:	b118      	cbz	r0, bbd56 <_calloc_r+0x18>
   bbd4e:	9a01      	ldr	r2, [sp, #4]
   bbd50:	2100      	movs	r1, #0
   bbd52:	f7fe f832 	bl	b9dba <memset>
   bbd56:	4620      	mov	r0, r4
   bbd58:	b002      	add	sp, #8
   bbd5a:	bd10      	pop	{r4, pc}
   bbd5c:	0000      	movs	r0, r0
	...

000bbd60 <nan>:
   bbd60:	ed9f 0b01 	vldr	d0, [pc, #4]	; bbd68 <nan+0x8>
   bbd64:	4770      	bx	lr
   bbd66:	bf00      	nop
   bbd68:	00000000 	.word	0x00000000
   bbd6c:	7ff80000 	.word	0x7ff80000

000bbd70 <__ascii_wctomb>:
   bbd70:	b149      	cbz	r1, bbd86 <__ascii_wctomb+0x16>
   bbd72:	2aff      	cmp	r2, #255	; 0xff
   bbd74:	bf85      	ittet	hi
   bbd76:	238a      	movhi	r3, #138	; 0x8a
   bbd78:	6003      	strhi	r3, [r0, #0]
   bbd7a:	700a      	strbls	r2, [r1, #0]
   bbd7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bbd80:	bf98      	it	ls
   bbd82:	2001      	movls	r0, #1
   bbd84:	4770      	bx	lr
   bbd86:	4608      	mov	r0, r1
   bbd88:	4770      	bx	lr

000bbd8a <link_code_end>:
	...

000bbd8c <link_const_data_start>:
   bbd8c:	514d0400 	.word	0x514d0400
   bbd90:	00045454 	.word	0x00045454
   bbd94:	49514d06 	.word	0x49514d06
   bbd98:	03706473 	.word	0x03706473

000bbd9c <dynalib_user>:
   bbd9c:	000b4ab9 000b4af5 000b4b1d 000b4b21     .J...J...K..!K..
   bbdac:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bbdbc:	72697620 6c617574 61655700 72656874      virtual.Weather
   bbdcc:	2f786f42 74736f50 61746144 6d65542f     Box/PostData/Tem
   bbddc:	61726570 65727574 61655700 72656874     perature.Weather
   bbdec:	2f786f42 74736f50 61746144 6e69572f     Box/PostData/Win
   bbdfc:	65705364 57006465 68746165 6f427265     dSpeed.WeatherBo
   bbe0c:	6f502f78 61447473 502f6174 69636572     x/PostData/Preci
   bbe1c:	61746970 6e6f6974 61655700 72656874     pitation.Weather
   bbe2c:	2f786f42 74736f50 61746144 6d75482f     Box/PostData/Hum
   bbe3c:	74696469 69250079 696c2500 6e6f4300     idity.%i.%li.Con
   bbe4c:	7463656e 00676e69 6e69002e 74756f00     necting...in.out
   bbe5c:	6d777000 00776400 74007761 006c706d     .pwm.dw.aw.tmpl.
   bbe6c:	4c504d54 47775532 6f6f4848 77760046     TMPL2UwGHHooF.vw
   bbe7c:	2e322500 25006637 66332e32 72616500     .%2.7f.%2.3f.ear
   bbe8c:	75716874 00656b61 74616557 42726568     thquake.WeatherB
   bbe9c:	472f786f 61447465 57006174 68746165     ox/GetData.Weath
   bbeac:	6f427265 6f502f78 61447473 2b2f6174     erBox/PostData/+
   bbebc:	6d655400 61726570 65727574 5700203a     .Temperature: .W
   bbecc:	20646e69 65657053 00203a64 0068706d     ind Speed: .mph.
   bbedc:	6e616843 66206563 5220726f 3a6e6961     Chance for Rain:
   bbeec:	00250020 696d7548 79746964 3500203a      .%.Humidity: .5
   bbefc:	62474b35 524a4443 6c576778 68734e64     5KGbCDJRxgWldNsh
   bbf0c:	334a434c 5464466a 6e626d53 006a656d     LCJ3jFdTSmbnmej.
   bbf1c:	6e796c62 6c632e6b 0064756f 2e62616c     blynk.cloud.lab.
   bbf2c:	77656874 632e6c63 00006d6f              thewcl.com..

000bbf38 <_ZTV5Timer>:
	...
   bbf40:	000b4d71 000b4db5 000b4c79              qM...M..yL..

000bbf4c <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   bbf4c:	6b6e6c62 00666e69 00726576 2e312e31     blnkinf.ver.1.1.
   bbf5c:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   bbf6c:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   bbf7c:	6c636974 72412065 006e6f67 742d7766     ticle Argon.fw-t
   bbf8c:	00657079 4c504d54 47775532 6f6f4848     ype.TMPL2UwGHHoo
   bbf9c:	75620046 00646c69 206c754a 32203231     F.build.Jul 12 2
   bbfac:	20333230 303a3331 30303a37               023 13:07:00...

000bbfbb <_ZL4font>:
   bbfbb:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bbfcb:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bbfdb:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bbfeb:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bbffb:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bc00b:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   bc01b:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   bc02b:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   bc03b:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   bc04b:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   bc05b:	00000000 5f000000 07000000 14000700     ......._........
   bc06b:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bc07b:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bc08b:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bc09b:	08080800 00000808 20006060 02040810     ........``. ....
   bc0ab:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bc0bb:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bc0cb:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bc0db:	00001e29 00000014 00003440 22140800     ).......@4....."
   bc0eb:	14141441 41001414 02081422 06095901     A......A"....Y..
   bc0fb:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bc10b:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bc11b:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bc12b:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   bc13b:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bc14b:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bc15b:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bc16b:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bc17b:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bc18b:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bc19b:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bc1ab:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bc1bb:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bc1cb:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bc1db:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bc1eb:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bc1fb:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bc20b:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   bc21b:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   bc22b:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   bc23b:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   bc24b:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   bc25b:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   bc26b:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bc27b:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   bc28b:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bc29b:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   bc2ab:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   bc2bb:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   bc2cb:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bc2db:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bc2eb:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bc2fb:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bc30b:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   bc31b:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   bc32b:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   bc33b:	00ff0000 ff101010 14141400 101000ff     ................
   bc34b:	10ff00ff f010f010 fc141414 f7141400     ................
   bc35b:	0000ff00 14ff00ff fc04f414 10171414     ................
   bc36b:	1f10101f 14141f10 10001f14 00f01010     ................
   bc37b:	1f000000 10101010 1010101f 0010f010     ................
   bc38b:	10ff0000 10101010 10101010 000010ff     ................
   bc39b:	0014ff00 ff00ff00 101f0000 fc000017     ................
   bc3ab:	1414f404 14171017 f404f414 00ff0000     ................
   bc3bb:	141414f7 14141414 14f700f7 14171414     ................
   bc3cb:	101f1010 1414141f 101014f4 00f010f0     ................
   bc3db:	1f101f00 1f000000 00000014 000014fc     ................
   bc3eb:	10f010f0 ff10ff10 ff141414 10101014     ................
   bc3fb:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   bc40b:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   bc41b:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   bc42b:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   bc43b:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   bc44b:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   bc45b:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   bc46b:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   bc47b:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   bc48b:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   bc49b:	00000018 30001010 0101ff40 01011f00     .......0@.......
   bc4ab:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000bc4bc <_ZTV12Adafruit_GFX>:
	...
   bc4cc:	000b6541 000b89c9 000b4b41 000b5f47     Ae......AK..G_..
   bc4dc:	000b5f49 000b5f7b 000b5f57 000b5f69     I_..{_..W_..i_..
   bc4ec:	000b5e89 000b5f47 000b6173 000b6171     .^..G_..sa..qa..
   bc4fc:	000b5f93 000b5fd1 000b600b 000b6051     ._..._...`..Q`..
   bc50c:	000b606d 000b60f1 61666564 20746c75     m`...`..default 
   bc51c:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   bc52c:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   bc53c:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   bc54c:	20732520 45444f4d 003e7525               %s MODE%u>.

000bc558 <_ZTVN8particle11SPISettingsE>:
	...
   bc560:	000b667d 000b664f 000b6651              }f..Of..Qf..

000bc56c <_ZL12splash1_data>:
   bc56c:	00000000 00800100 00000000 00000000     ................
   bc57c:	00008003 00000000 07000000 000000c0     ................
   bc58c:	00000000 c0070000 00000000 00000000     ................
   bc59c:	00c00f00 00000000 00000000 0000e01f     ................
   bc5ac:	00000000 1f000000 000000e0 00000000     ................
   bc5bc:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   bc5d4:	0000f07f 00000000 7ff81f00 000000f0     ................
   bc5e4:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bc5f4:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bc604:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bc614:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bc624:	00000000 fc030000 80ffff73 00000000     ........s.......
   bc634:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bc644:	000000ff 00000000 fc1ffe7f 00000000     ................
   bc654:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bc664:	0000e0ff 00000000 ff191f00 000000c0     ................
   bc674:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bc684:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bc694:	00000000 fcffff00 00000000 00000000     ................
   bc6a4:	00feffff 00000000 ff000000 0000feff     ................
   bc6b4:	00000000 efff0100 000000fe 00000000     ................
   bc6c4:	fecfff01 00000000 03000000 00fe07ff     ................
   bc6d4:	00000000 fc030000 0000fe07 00000000     ................
   bc6e4:	03f00300 000000fe 00000000 fe008001     ................
	...
   bc6fc:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bc714:	0000000c 07000000 00fc0080 00c00300     ................
   bc724:	80070000 0000fc01 0000c003 01800700     ................
   bc734:	030000fc 000000c0 e0018007 1e000000     ................
   bc744:	07000000 00e00180 001e0000 9ff7e37f     ................
   bc754:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bc764:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bc774:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bc784:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bc794:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bc7a4:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   bc7b4:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bc7c4:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bc7d4:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bc7e4:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bc7f4:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bc804:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bc814:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bc824:	5b6bfdff c0fd6adb                       ..k[.j..

000bc82c <_ZL12splash2_data>:
   bc82c:	00600000 00000000 00000000 00000000     ..`.............
   bc83c:	0000e000 00000000 00000000 01000000     ................
   bc84c:	000000e0 00000000 00000000 f0010000     ................
	...
   bc868:	00f00300 00000000 00000000 00000000     ................
   bc878:	0000f007 00000000 00000000 07000000     ................
   bc888:	000000f8 00000000 00000000 f80f0000     ................
   bc898:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bc8a8:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bc8b8:	00c00300 010000fe ffff00e0 000000f8     ................
   bc8c8:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bc8d8:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bc8e8:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bc8f8:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bc908:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bc918:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bc928:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bc938:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bc948:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bc958:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bc968:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bc978:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bc988:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bc998:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bc9a8:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bc9c0:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bc9d0:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bc9e0:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bc9f0:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bca00:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bca0c <_ZTV16Adafruit_SSD1306>:
	...
   bca14:	000b66d1 000b66e9 000b6541 000b89c9     .f...f..Ae......
   bca24:	000b66fd 000b5f47 000b5f49 000b5f7b     .f..G_..I_..{_..
   bca34:	000b5f57 000b5f69 000b5e89 000b5f47     W_..i_...^..G_..
   bca44:	000b6173 000b689b 000b6e43 000b6df5     sa...h..Cn...m..
   bca54:	000b600b 000b6051 000b606d 000b60f1     .`..Q`..m`...`..

000bca64 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bca64:	e0c08000 fefcf8f0                       ........

000bca6c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bca6c:	07030100 7f3f1f0f                       ......?.

000bca74 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bca74:	a880d5ae                                ....

000bca78 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bca78:	8d4000d3                                ..@.

000bca7c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bca7c:	c8a10020                                 ...

000bca80 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bca80:	a6a440db                                 .@....

000bca86 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bca86:	8f8102da                                ....

000bca8a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bca8a:	                                         ...

000bca8d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bca8d:	                                         ...

000bca90 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bca90:	21ff0022 76656400 20656369 20746f6e     "..!.device not 
   bcaa0:	6e756f66 00000064                       found...

000bcaa8 <_ZTV9LIS3DHI2C>:
	...
   bcab0:	000b7067 000b7069 000b7167 000b70bf     gp..ip..gq...p..
   bcac0:	000b7077                                wp..

000bcac4 <_ZL22BlynkReadHandlerVector>:
   bcac4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcad4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcae4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcaf4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb04:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb14:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb24:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb34:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb44:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb54:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb64:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb74:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb84:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcb94:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcba4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcbb4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcbc4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcbd4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcbe4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcbf4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc04:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc14:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc24:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc34:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc44:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc54:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc64:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc74:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc84:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcc94:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bcca4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..
   bccb4:	000b7ded 000b7ded 000b7ded 000b7ded     .}...}...}...}..

000bccc4 <_ZL23BlynkWriteHandlerVector>:
   bccc4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bccd4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcce4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bccf4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd04:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd14:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd24:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd34:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd44:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd54:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd64:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd74:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd84:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcd94:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcda4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcdb4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcdc4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcdd4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcde4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcdf4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce04:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce14:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce24:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce34:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce44:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce54:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce64:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce74:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce84:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bce94:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bcea4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..
   bceb4:	000b7def 000b7def 000b7def 000b7def     .}...}...}...}..

000bcec4 <_ZTV16OledWingAdafruit>:
	...
   bcecc:	000b7e1d 000b7e3d 000b6541 000b89c9     .~..=~..Ae......
   bcedc:	000b66fd 000b5f47 000b5f49 000b5f7b     .f..G_..I_..{_..
   bceec:	000b5f57 000b5f69 000b5e89 000b5f47     W_..i_...^..G_..
   bcefc:	000b6173 000b689b 000b6e43 000b6df5     sa...h..Cn...m..
   bcf0c:	000b600b 000b6051 000b606d 000b60f1     .`..Q`..m`...`..

000bcf1c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bcf24 <_ZTVN5spark13EthernetClassE>:
	...
   bcf2c:	000b85ff 000b85f5 000b85eb 000b85e1     ................
   bcf3c:	000b85d5 000b85c9 000b88a5 000b88ad     ................
   bcf4c:	000b85bd 000b85b5 000b85ab 000b85a1     ................
   bcf5c:	000b88dd                                ....

000bcf60 <_ZTV7TwoWire>:
	...
   bcf68:	000b861d 000b8667 000b863f 000b861f     ....g...?.......
   bcf78:	000b8647 000b864f 000b8657 000b865f     G...O...W..._...

000bcf88 <_ZTV9IPAddress>:
	...
   bcf90:	000b8749 000b8739 000b873b 00707061     I...9...;...app.

000bcfa0 <_ZTVN5spark12NetworkClassE>:
	...
   bcfa8:	000b8865 000b886f 000b8879 000b8883     e...o...y.......
   bcfb8:	000b888d 000b8899 000b88a5 000b88ad     ................
   bcfc8:	000b88b5 000b88c1 000b88c9 000b88d3     ................
   bcfd8:	000b88dd 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000bcfe8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcfe8:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   bcff8:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000bd008 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd010:	000b901d 000b9041 000b9573 000b904f     ....A...s...O...
   bd020:	000b9021                                !...

000bd024 <_ZTV9TCPClient>:
	...
   bd02c:	000b90cd 000b9101 000b8f99 000b8fb3     ................
   bd03c:	000b9409 000b8fdd 000b927f 000b9011     ................
   bd04c:	000b9311 000b9151 000b92ad 000b94bd     ....Q...........
   bd05c:	000b924d 000b9013 000b8fc5 000b9055     M...........U...
   bd06c:	000b9131 252d5925 64252d6d 3a482554     1...%Y-%m-%dT%H:
   bd07c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bd08c <_ZTV11USARTSerial>:
	...
   bd094:	000b958d 000b95f9 000b95d1 000b89c9     ................
   bd0a4:	000b95a1 000b95bd 000b95af 000b95cb     ................
   bd0b4:	000b958f 000b9593                       ........

000bd0bc <_ZTV9USBSerial>:
	...
   bd0c4:	000b9637 000b969f 000b9675 000b89c9     7.......u.......
   bd0d4:	000b9667 000b9639 000b9649 000b9699     g...9...I.......
   bd0e4:	000b9659 000b9631                       Y...1...

000bd0ec <_ZTVN5spark9WiFiClassE>:
	...
   bd0f4:	000b978f 000b9785 000b977b 000b9731     ........{...1...
   bd104:	000b976f 000b9763 000b88a5 000b88ad     o...c...........
   bd114:	000b9757 000b974f 000b9745 000b973b     W...O...E...;...
   bd124:	000b88dd                                ....

000bd128 <_ZSt7nothrow>:
	...

000bd129 <_ZTSSt19_Sp_make_shared_tag>:
   bd129:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bd139:	5f646572 00676174                        red_tag....

000bd144 <_ZTISt19_Sp_make_shared_tag>:
   bd144:	000bd184 000bd129                       ....)...

000bd14c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd14c:	000bd1e4 000bd158 000bd208              ....X.......

000bd158 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd158:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bd168:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bd178:	00000045                                E...

000bd17c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd17c:	00000000 000bd14c 000b9ba5 000b9bb9     ....L...........
   bd18c:	000b9d4d 000b9d4d 000b9c23 000b9b65     M...M...#...e...
   bd19c:	000b9c0b 000b9bcd 000b9b97              ............

000bd1a8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd1a8:	000bd1e4 000bd1b4 000bd14c              ........L...

000bd1b4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd1b4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bd1c4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bd1d4:	456f666e 00000000                       nfoE....

000bd1dc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd1dc:	00000000 000bd1a8 000b9c4d 000b9c61     ........M...a...
   bd1ec:	000b9d4d 000b9d4d 000b9c23 000b9b65     M...M...#...e...
   bd1fc:	000b9d21 000b9cad 000b9c75              !.......u...

000bd208 <_ZTISt9type_info>:
   bd208:	000bd184 000bd210                       ........

000bd210 <_ZTSSt9type_info>:
   bd210:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bd220:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bd230:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   bd240:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bd250:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bd260:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bd270:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bd280:	696c6474 61722f62 632e646e 696e6900     tdlib/rand.c.ini
   bd290:	00007974                                ty..

000bd294 <fpi.1>:
   bd294:	00000035 fffffbce 000003cb 00000001     5...............
   bd2a4:	00000000                                ....

000bd2a8 <fpinan.0>:
   bd2a8:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bd2c0 <tinytens>:
   bd2c0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bd2d0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bd2e0:	64ac6f43 11680628                       Co.d(.h.

000bd2e8 <_ctype_>:
   bd2e8:	20202000 20202020 28282020 20282828     .         ((((( 
   bd2f8:	20202020 20202020 20202020 20202020                     
   bd308:	10108820 10101010 10101010 10101010      ...............
   bd318:	04040410 04040404 10040404 10101010     ................
   bd328:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bd338:	01010101 01010101 01010101 10101010     ................
   bd348:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bd358:	02020202 02020202 02020202 10101010     ................
   bd368:	00000020 00000000 00000000 00000000      ...............
	...
   bd3e8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bd3f8:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bd408:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bd418:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bd428:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bd438:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bd448:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bd458:	0000632e                                .c..

000bd45c <_C_numeric_locale>:
   bd45c:	000bbe54 000bbed7 2003e380 4f500043     T.......... C.PO
   bd46c:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
   bd47c:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bd48c:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bd49c:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bd4ac:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bd4bc:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
   bd4cc:	00000000                                ....

000bd4d0 <__mprec_bigtens>:
   bd4d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bd4e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bd4f0:	7f73bf3c 75154fdd                       <.s..O.u

000bd4f8 <__mprec_tens>:
   bd4f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   bd508:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bd518:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bd528:	00000000 412e8480 00000000 416312d0     .......A......cA
   bd538:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bd548:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bd558:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bd568:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bd578:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bd588:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bd598:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bd5a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bd5b8:	79d99db4 44ea7843                       ...yCx.D

000bd5c0 <p05.0>:
   bd5c0:	00000005 00000019 0000007d              ........}...

000bd5cc <link_const_data_end>:
   bd5cc:	000b5d8d 	.word	0x000b5d8d
   bd5d0:	000b8591 	.word	0x000b8591
   bd5d4:	000b8609 	.word	0x000b8609
   bd5d8:	000b8855 	.word	0x000b8855
   bd5dc:	000b89b5 	.word	0x000b89b5
   bd5e0:	000b8ca9 	.word	0x000b8ca9
   bd5e4:	000b8f75 	.word	0x000b8f75
   bd5e8:	000b9579 	.word	0x000b9579
   bd5ec:	000b9799 	.word	0x000b9799
